// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package mirnator.sql2java;

import java.io.Serializable;
import java.util.Map;
import java.util.HashMap;

import mirnator.sql2java.GeneratedBean;
import mirnator.sql2java.MirnaBean;
import mirnator.sql2java.TestDesignBean;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * MirnatorStatisticBean is a mapping of mirnator_statistic Table.
 * <br>Meta Data Information (in progress):
 * <ul>
 *    <li>comments: add droped constraint:
ALTER TABLE mirnator_statistic DROP CONSTRAINT fk_statistic2array; </li>
 * </ul>
 * @author sql2java
*/
public class MirnatorStatisticBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = -7831616246441342675L;
	
    private Integer statisticTestDesign;

    private boolean statisticTestDesignIsModified = false;
    private boolean statisticTestDesignIsInitialized = false;

    private Float statisticRr;

    private boolean statisticRrIsModified = false;
    private boolean statisticRrIsInitialized = false;

    private Float statisticTt;

    private boolean statisticTtIsModified = false;
    private boolean statisticTtIsInitialized = false;

    private Float statisticMw;

    private boolean statisticMwIsModified = false;
    private boolean statisticMwIsInitialized = false;

    private Integer statisticMirna;

    private boolean statisticMirnaIsModified = false;
    private boolean statisticMirnaIsInitialized = false;

    private String statisticArrayId;

    private boolean statisticArrayIdIsModified = false;
    private boolean statisticArrayIdIsInitialized = false;

    private Integer statisticId;

    private boolean statisticIdIsModified = false;
    private boolean statisticIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a MirnatorStatisticBean is via the createMirnatorStatisticBean method in MirnatorStatisticManager or
     * via the factory class MirnatorStatisticFactory create method
     */
    protected MirnatorStatisticBean()
    {
    }

    /**
     * Getter method for statisticTestDesign.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: mirnator_statistic.statistic_test_design</li>
     * <li> foreign key: test_design.test_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of statisticTestDesign
     */
    public Integer getStatisticTestDesign()
    {
        return statisticTestDesign;
    }

    /**
     * Setter method for statisticTestDesign.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to statisticTestDesign
     */
    public void setStatisticTestDesign(Integer newVal)
    {
        if ((newVal != null && statisticTestDesign != null && (newVal.compareTo(statisticTestDesign) == 0)) ||
            (newVal == null && statisticTestDesign == null && statisticTestDesignIsInitialized)) {
            return;
        }
        statisticTestDesign = newVal;
        statisticTestDesignIsModified = true;
        statisticTestDesignIsInitialized = true;
    }

    /**
     * Setter method for statisticTestDesign.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to statisticTestDesign
     */
    public void setStatisticTestDesign(int newVal)
    {
        setStatisticTestDesign(new Integer(newVal));
    }

    /**
     * Determines if the statisticTestDesign has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isStatisticTestDesignModified()
    {
        return statisticTestDesignIsModified;
    }

    /**
     * Determines if the statisticTestDesign has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isStatisticTestDesignInitialized()
    {
        return statisticTestDesignIsInitialized;
    }

    /**
     * Getter method for statisticRr.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: mirnator_statistic.statistic_rr</li>
     * <li>column size: 8</li>
     * <li>jdbc type returned by the driver: Types.REAL</li>
     * </ul>
     *
     * @return the value of statisticRr
     */
    public Float getStatisticRr()
    {
        return statisticRr;
    }

    /**
     * Setter method for statisticRr.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to statisticRr
     */
    public void setStatisticRr(Float newVal)
    {
        if ((newVal != null && statisticRr != null && (newVal.compareTo(statisticRr) == 0)) ||
            (newVal == null && statisticRr == null && statisticRrIsInitialized)) {
            return;
        }
        statisticRr = newVal;
        statisticRrIsModified = true;
        statisticRrIsInitialized = true;
    }

    /**
     * Setter method for statisticRr.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to statisticRr
     */
    public void setStatisticRr(float newVal)
    {
        setStatisticRr(new Float(newVal));
    }

    /**
     * Determines if the statisticRr has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isStatisticRrModified()
    {
        return statisticRrIsModified;
    }

    /**
     * Determines if the statisticRr has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isStatisticRrInitialized()
    {
        return statisticRrIsInitialized;
    }

    /**
     * Getter method for statisticTt.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: mirnator_statistic.statistic_tt</li>
     * <li>column size: 8</li>
     * <li>jdbc type returned by the driver: Types.REAL</li>
     * </ul>
     *
     * @return the value of statisticTt
     */
    public Float getStatisticTt()
    {
        return statisticTt;
    }

    /**
     * Setter method for statisticTt.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to statisticTt
     */
    public void setStatisticTt(Float newVal)
    {
        if ((newVal != null && statisticTt != null && (newVal.compareTo(statisticTt) == 0)) ||
            (newVal == null && statisticTt == null && statisticTtIsInitialized)) {
            return;
        }
        statisticTt = newVal;
        statisticTtIsModified = true;
        statisticTtIsInitialized = true;
    }

    /**
     * Setter method for statisticTt.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to statisticTt
     */
    public void setStatisticTt(float newVal)
    {
        setStatisticTt(new Float(newVal));
    }

    /**
     * Determines if the statisticTt has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isStatisticTtModified()
    {
        return statisticTtIsModified;
    }

    /**
     * Determines if the statisticTt has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isStatisticTtInitialized()
    {
        return statisticTtIsInitialized;
    }

    /**
     * Getter method for statisticMw.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: mirnator_statistic.statistic_mw</li>
     * <li>column size: 8</li>
     * <li>jdbc type returned by the driver: Types.REAL</li>
     * </ul>
     *
     * @return the value of statisticMw
     */
    public Float getStatisticMw()
    {
        return statisticMw;
    }

    /**
     * Setter method for statisticMw.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to statisticMw
     */
    public void setStatisticMw(Float newVal)
    {
        if ((newVal != null && statisticMw != null && (newVal.compareTo(statisticMw) == 0)) ||
            (newVal == null && statisticMw == null && statisticMwIsInitialized)) {
            return;
        }
        statisticMw = newVal;
        statisticMwIsModified = true;
        statisticMwIsInitialized = true;
    }

    /**
     * Setter method for statisticMw.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to statisticMw
     */
    public void setStatisticMw(float newVal)
    {
        setStatisticMw(new Float(newVal));
    }

    /**
     * Determines if the statisticMw has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isStatisticMwModified()
    {
        return statisticMwIsModified;
    }

    /**
     * Determines if the statisticMw has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isStatisticMwInitialized()
    {
        return statisticMwIsInitialized;
    }

    /**
     * Getter method for statisticMirna.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: mirnator_statistic.statistic_mirna</li>
     * <li> foreign key: mirna.mirna_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of statisticMirna
     */
    public Integer getStatisticMirna()
    {
        return statisticMirna;
    }

    /**
     * Setter method for statisticMirna.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to statisticMirna
     */
    public void setStatisticMirna(Integer newVal)
    {
        if ((newVal != null && statisticMirna != null && (newVal.compareTo(statisticMirna) == 0)) ||
            (newVal == null && statisticMirna == null && statisticMirnaIsInitialized)) {
            return;
        }
        statisticMirna = newVal;
        statisticMirnaIsModified = true;
        statisticMirnaIsInitialized = true;
    }

    /**
     * Setter method for statisticMirna.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to statisticMirna
     */
    public void setStatisticMirna(int newVal)
    {
        setStatisticMirna(new Integer(newVal));
    }

    /**
     * Determines if the statisticMirna has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isStatisticMirnaModified()
    {
        return statisticMirnaIsModified;
    }

    /**
     * Determines if the statisticMirna has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isStatisticMirnaInitialized()
    {
        return statisticMirnaIsInitialized;
    }

    /**
     * Getter method for statisticArrayId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: mirnator_statistic.statistic_array_id</li>
     * <li>column size: 2147483647</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of statisticArrayId
     */
    public String getStatisticArrayId()
    {
        return statisticArrayId;
    }

    /**
     * Setter method for statisticArrayId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to statisticArrayId
     */
    public void setStatisticArrayId(String newVal)
    {
        if ((newVal != null && statisticArrayId != null && (newVal.compareTo(statisticArrayId) == 0)) ||
            (newVal == null && statisticArrayId == null && statisticArrayIdIsInitialized)) {
            return;
        }
        statisticArrayId = newVal;
        statisticArrayIdIsModified = true;
        statisticArrayIdIsInitialized = true;
    }

    /**
     * Determines if the statisticArrayId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isStatisticArrayIdModified()
    {
        return statisticArrayIdIsModified;
    }

    /**
     * Determines if the statisticArrayId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isStatisticArrayIdInitialized()
    {
        return statisticArrayIdIsInitialized;
    }

    /**
     * Getter method for statisticId.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: mirnator_statistic.statistic_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of statisticId
     */
    public Integer getStatisticId()
    {
        return statisticId;
    }

    /**
     * Setter method for statisticId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to statisticId
     */
    public void setStatisticId(Integer newVal)
    {
        if ((newVal != null && statisticId != null && (newVal.compareTo(statisticId) == 0)) ||
            (newVal == null && statisticId == null && statisticIdIsInitialized)) {
            return;
        }
        statisticId = newVal;
        statisticIdIsModified = true;
        statisticIdIsInitialized = true;
    }

    /**
     * Setter method for statisticId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to statisticId
     */
    public void setStatisticId(int newVal)
    {
        setStatisticId(new Integer(newVal));
    }

    /**
     * Determines if the statisticId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isStatisticIdModified()
    {
        return statisticIdIsModified;
    }

    /**
     * Determines if the statisticId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isStatisticIdInitialized()
    {
        return statisticIdIsInitialized;
    }

    /** The Mirna referenced by this bean. */
    private MirnaBean referencedMirna;
    /** Getter method for MirnaBean. */
    public MirnaBean getMirnaBean() {
        return this.referencedMirna;
    }
    /** Setter method for MirnaBean. */
    public void setMirnaBean(MirnaBean reference) {
        this.referencedMirna = reference;
    }
    
    /** The TestDesign referenced by this bean. */
    private TestDesignBean referencedTestDesign;
    /** Getter method for TestDesignBean. */
    public TestDesignBean getTestDesignBean() {
        return this.referencedTestDesign;
    }
    /** Setter method for TestDesignBean. */
    public void setTestDesignBean(TestDesignBean reference) {
        this.referencedTestDesign = reference;
    }
    
    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return statisticTestDesignIsModified 		|| statisticRrIsModified  		|| statisticTtIsModified  		|| statisticMwIsModified  		|| statisticMirnaIsModified  		|| statisticArrayIdIsModified  		|| statisticIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        statisticTestDesignIsModified = false;
        statisticRrIsModified = false;
        statisticTtIsModified = false;
        statisticMwIsModified = false;
        statisticMirnaIsModified = false;
        statisticArrayIdIsModified = false;
        statisticIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(MirnatorStatisticBean bean)
    {
        setStatisticTestDesign(bean.getStatisticTestDesign());
        setStatisticRr(bean.getStatisticRr());
        setStatisticTt(bean.getStatisticTt());
        setStatisticMw(bean.getStatisticMw());
        setStatisticMirna(bean.getStatisticMirna());
        setStatisticArrayId(bean.getStatisticArrayId());
        setStatisticId(bean.getStatisticId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map<String, String> getDictionnary()
    {
        Map<String, String> dictionnary = new HashMap<String, String>();
        dictionnary.put("statistic_test_design", getStatisticTestDesign() == null ? "" : getStatisticTestDesign().toString());
        dictionnary.put("statistic_rr", getStatisticRr() == null ? "" : getStatisticRr().toString());
        dictionnary.put("statistic_tt", getStatisticTt() == null ? "" : getStatisticTt().toString());
        dictionnary.put("statistic_mw", getStatisticMw() == null ? "" : getStatisticMw().toString());
        dictionnary.put("statistic_mirna", getStatisticMirna() == null ? "" : getStatisticMirna().toString());
        dictionnary.put("statistic_array_id", getStatisticArrayId() == null ? "" : getStatisticArrayId().toString());
        dictionnary.put("statistic_id", getStatisticId() == null ? "" : getStatisticId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map<String, String> getPkDictionnary()
    {
        Map<String, String> dictionnary = new HashMap<String, String>();
        dictionnary.put("statistic_id", getStatisticId() == null ? "" : getStatisticId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("statistic_test_design".equalsIgnoreCase(column) || "statisticTestDesign".equalsIgnoreCase(column)) {
            return getStatisticTestDesign() == null ? "" : getStatisticTestDesign().toString();
        } else if ("statistic_rr".equalsIgnoreCase(column) || "statisticRr".equalsIgnoreCase(column)) {
            return getStatisticRr() == null ? "" : getStatisticRr().toString();
        } else if ("statistic_tt".equalsIgnoreCase(column) || "statisticTt".equalsIgnoreCase(column)) {
            return getStatisticTt() == null ? "" : getStatisticTt().toString();
        } else if ("statistic_mw".equalsIgnoreCase(column) || "statisticMw".equalsIgnoreCase(column)) {
            return getStatisticMw() == null ? "" : getStatisticMw().toString();
        } else if ("statistic_mirna".equalsIgnoreCase(column) || "statisticMirna".equalsIgnoreCase(column)) {
            return getStatisticMirna() == null ? "" : getStatisticMirna().toString();
        } else if ("statistic_array_id".equalsIgnoreCase(column) || "statisticArrayId".equalsIgnoreCase(column)) {
            return getStatisticArrayId() == null ? "" : getStatisticArrayId().toString();
        } else if ("statistic_id".equalsIgnoreCase(column) || "statisticId".equalsIgnoreCase(column)) {
            return getStatisticId() == null ? "" : getStatisticId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof MirnatorStatisticBean)) {
            return false;
        }

		MirnatorStatisticBean obj = (MirnatorStatisticBean) object;
		return new EqualsBuilder()
            .append(getStatisticTestDesign(), obj.getStatisticTestDesign())
            .append(getStatisticRr(), obj.getStatisticRr())
            .append(getStatisticTt(), obj.getStatisticTt())
            .append(getStatisticMw(), obj.getStatisticMw())
            .append(getStatisticMirna(), obj.getStatisticMirna())
            .append(getStatisticArrayId(), obj.getStatisticArrayId())
            .append(getStatisticId(), obj.getStatisticId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getStatisticTestDesign())
            .append(getStatisticRr())
            .append(getStatisticTt())
            .append(getStatisticMw())
            .append(getStatisticMirna())
            .append(getStatisticArrayId())
            .append(getStatisticId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("statistic_test_design", getStatisticTestDesign())
            .append("statistic_rr", getStatisticRr())
            .append("statistic_tt", getStatisticTt())
            .append("statistic_mw", getStatisticMw())
            .append("statistic_mirna", getStatisticMirna())
            .append("statistic_array_id", getStatisticArrayId())
            .append("statistic_id", getStatisticId())
            .toString();
	}


    public int compareTo(Object object)
    {
        MirnatorStatisticBean obj = (MirnatorStatisticBean) object;
        return new CompareToBuilder()
            .append(getStatisticTestDesign(), obj.getStatisticTestDesign())
            .append(getStatisticRr(), obj.getStatisticRr())
            .append(getStatisticTt(), obj.getStatisticTt())
            .append(getStatisticMw(), obj.getStatisticMw())
            .append(getStatisticMirna(), obj.getStatisticMirna())
            .append(getStatisticArrayId(), obj.getStatisticArrayId())
            .append(getStatisticId(), obj.getStatisticId())
            .toComparison();
   }
}
