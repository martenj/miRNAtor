// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package mirnator.sql2java;

import java.util.Comparator;

/**
 * Comparator class is used to sort the ExpressionArrayBean objects.
 * 
 * @author sql2java
 */
@SuppressWarnings("rawtypes")
public class ExpressionArrayComparator implements Comparator {
	/**
	 * Holds the field on which the comparison is performed.
	 */
	private int iType;
	/**
	 * Value that will contain the information about the order of the sort: normal or reversal.
	 */
	private boolean bReverse;

	/**
	 * Constructor class for ExpressionArrayComparator. <br>
	 * Example: <br>
	 * <code>Arrays.sort(pArray, new ExpressionArrayComparator(ExpressionArrayManager.ID_PLATTFORM, bReverse));<code>
	 *
	 * @param iType
	 *            the field from which you want to sort <br> Possible values are: <ul>
	 *            <li>ExpressionArrayManager.ID_PLATTFORM <li>ExpressionArrayManager.ID_TITLE
	 *            <li>ExpressionArrayManager.ID_GSM <li>ExpressionArrayManager.ID_GSE
	 *            <li>ExpressionArrayManager.ID_TISSUE <li>ExpressionArrayManager.ID_ARRAY_ID </ul>
	 */
	public ExpressionArrayComparator(int iType) {
		this(iType, false);
	}

	/**
	 * Constructor class for ExpressionArrayComparator. <br>
	 * Example: <br>
	 * <code>Arrays.sort(pArray, new ExpressionArrayComparator(ExpressionArrayManager.ID_PLATTFORM, bReverse));<code>
	 *
	 * @param iType
	 *            the field from which you want to sort. <br> Possible values are: <ul>
	 *            <li>ExpressionArrayManager.ID_PLATTFORM <li>ExpressionArrayManager.ID_TITLE
	 *            <li>ExpressionArrayManager.ID_GSM <li>ExpressionArrayManager.ID_GSE
	 *            <li>ExpressionArrayManager.ID_TISSUE <li>ExpressionArrayManager.ID_ARRAY_ID </ul>
	 *
	 * @param bReverse
	 *            set this value to true, if you want to reverse the sorting results
	 */
	public ExpressionArrayComparator(int iType, boolean bReverse) {
		this.iType = iType;
		this.bReverse = bReverse;
	}

	/**
	 * Implementation of the compare method.
	 */
	public int compare(Object pObj1, Object pObj2) {
		ExpressionArrayBean b1 = (ExpressionArrayBean) pObj1;
		ExpressionArrayBean b2 = (ExpressionArrayBean) pObj2;
		int iReturn = 0;
		switch (iType) {
		case ExpressionArrayManager.ID_PLATTFORM:
			if (b1.getPlattform() == null && b2.getPlattform() != null) {
				iReturn = -1;
			} else if (b1.getPlattform() == null && b2.getPlattform() == null) {
				iReturn = 0;
			} else if (b1.getPlattform() != null && b2.getPlattform() == null) {
				iReturn = 1;
			} else {
				iReturn = b1.getPlattform().compareTo(b2.getPlattform());
			}
			break;
		case ExpressionArrayManager.ID_TITLE:
			if (b1.getTitle() == null && b2.getTitle() != null) {
				iReturn = -1;
			} else if (b1.getTitle() == null && b2.getTitle() == null) {
				iReturn = 0;
			} else if (b1.getTitle() != null && b2.getTitle() == null) {
				iReturn = 1;
			} else {
				iReturn = b1.getTitle().compareTo(b2.getTitle());
			}
			break;
		case ExpressionArrayManager.ID_GSM:
			if (b1.getGsm() == null && b2.getGsm() != null) {
				iReturn = -1;
			} else if (b1.getGsm() == null && b2.getGsm() == null) {
				iReturn = 0;
			} else if (b1.getGsm() != null && b2.getGsm() == null) {
				iReturn = 1;
			} else {
				iReturn = b1.getGsm().compareTo(b2.getGsm());
			}
			break;
		case ExpressionArrayManager.ID_GSE:
			if (b1.getGse() == null && b2.getGse() != null) {
				iReturn = -1;
			} else if (b1.getGse() == null && b2.getGse() == null) {
				iReturn = 0;
			} else if (b1.getGse() != null && b2.getGse() == null) {
				iReturn = 1;
			} else {
				iReturn = b1.getGse().compareTo(b2.getGse());
			}
			break;
		case ExpressionArrayManager.ID_TISSUE:
			if (b1.getTissue() == null && b2.getTissue() != null) {
				iReturn = -1;
			} else if (b1.getTissue() == null && b2.getTissue() == null) {
				iReturn = 0;
			} else if (b1.getTissue() != null && b2.getTissue() == null) {
				iReturn = 1;
			} else {
				iReturn = b1.getTissue().compareTo(b2.getTissue());
			}
			break;
		case ExpressionArrayManager.ID_ARRAY_ID:
			if (b1.getArrayId() == null && b2.getArrayId() != null) {
				iReturn = -1;
			} else if (b1.getArrayId() == null && b2.getArrayId() == null) {
				iReturn = 0;
			} else if (b1.getArrayId() != null && b2.getArrayId() == null) {
				iReturn = 1;
			} else {
				iReturn = b1.getArrayId().compareTo(b2.getArrayId());
			}
			break;
		default:
			throw new IllegalArgumentException("Type passed for the field is not supported");
		}

		return bReverse ? (-1 * iReturn) : iReturn;
	}
}
