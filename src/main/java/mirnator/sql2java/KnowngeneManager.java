// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package mirnator.sql2java;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.List;
import java.util.ArrayList;

import mirnator.sql2java.Manager;
import mirnator.sql2java.exception.DAOException;
import mirnator.sql2java.exception.DataAccessException;
import mirnator.sql2java.exception.ObjectRetrievalException;
import mirnator.sql2java.KgsequenceBean;
import mirnator.sql2java.KgsequenceManager;
import mirnator.sql2java.MreBean;
import mirnator.sql2java.MreManager;
import mirnator.sql2java.XrefBean;
import mirnator.sql2java.XrefManager;

/**
 * Handles database calls (save, load, count, etc...) for the knowngene table.
 * @author sql2java
 */
public class KnowngeneManager 
{

    /* set =QUERY for loadUsingTemplate */
    public static final int SEARCH_EXACT = 0;
    /* set %QUERY% for loadLikeTemplate */
    public static final int SEARCH_LIKE = 1;
    /* set %QUERY for loadLikeTemplate */
    public static final int SEARCH_STARTING_LIKE = 2;
    /* set QUERY% for loadLikeTemplate */
    public static final int SEARCH_ENDING_LIKE = 3;

    /**
     * Identify the chromosom field.
     */
    public static final int ID_CHROMOSOM = 0;

    /**
     * Identify the exon_ends field.
     */
    public static final int ID_EXON_ENDS = 1;

    /**
     * Identify the exon_starts field.
     */
    public static final int ID_EXON_STARTS = 2;

    /**
     * Identify the exon_count field.
     */
    public static final int ID_EXON_COUNT = 3;

    /**
     * Identify the cds_end field.
     */
    public static final int ID_CDS_END = 4;

    /**
     * Identify the cds_start field.
     */
    public static final int ID_CDS_START = 5;

    /**
     * Identify the tx_start field.
     */
    public static final int ID_TX_START = 6;

    /**
     * Identify the tx_end field.
     */
    public static final int ID_TX_END = 7;

    /**
     * Identify the strand field.
     */
    public static final int ID_STRAND = 8;

    /**
     * Identify the ucsc_id field.
     */
    public static final int ID_UCSC_ID = 9;

    /**
     * Identify the gene_id field.
     */
    public static final int ID_GENE_ID = 10;

    /**
     * Contains all the full fields of the knowngene table.
     */
    private static final String[] FULL_FIELD_NAMES =
    {
        "knowngene.chromosom"
        ,"knowngene.exon_ends"
        ,"knowngene.exon_starts"
        ,"knowngene.exon_count"
        ,"knowngene.cds_end"
        ,"knowngene.cds_start"
        ,"knowngene.tx_start"
        ,"knowngene.tx_end"
        ,"knowngene.strand"
        ,"knowngene.ucsc_id"
        ,"knowngene.gene_id"
    };

    /**
     * Contains all the fields of the knowngene table.
     */
    public static final String[] FIELD_NAMES =
    {
        "chromosom"
        ,"exon_ends"
        ,"exon_starts"
        ,"exon_count"
        ,"cds_end"
        ,"cds_start"
        ,"tx_start"
        ,"tx_end"
        ,"strand"
        ,"ucsc_id"
        ,"gene_id"
    };

    /**
     * Field that contains the comma separated fields of the knowngene table.
     */
    public static final String ALL_FULL_FIELDS = "knowngene.chromosom"
                            + ",knowngene.exon_ends"
                            + ",knowngene.exon_starts"
                            + ",knowngene.exon_count"
                            + ",knowngene.cds_end"
                            + ",knowngene.cds_start"
                            + ",knowngene.tx_start"
                            + ",knowngene.tx_end"
                            + ",knowngene.strand"
                            + ",knowngene.ucsc_id"
                            + ",knowngene.gene_id";

    /**
     * Field that contains the comma separated fields of the knowngene table.
     */
    public static final String ALL_FIELDS = "chromosom"
                            + ",exon_ends"
                            + ",exon_starts"
                            + ",exon_count"
                            + ",cds_end"
                            + ",cds_start"
                            + ",tx_start"
                            + ",tx_end"
                            + ",strand"
                            + ",ucsc_id"
                            + ",gene_id";

    private static KnowngeneManager singleton = new KnowngeneManager();

    /**
     * Get the KnowngeneManager singleton.
     *
     * @return KnowngeneManager
     */
    public static KnowngeneManager getInstance()
    {
        return singleton;
    }


    /**
     * Creates a new KnowngeneBean instance.
     *
     * @return the new KnowngeneBean
     */
    public KnowngeneBean createKnowngeneBean()
    {
        return new KnowngeneBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a KnowngeneBean from the knowngene using its key fields.
     *
     * @param geneId Integer - PK# 1
     * @return a unique KnowngeneBean
     * @throws DAOException
     */
    //1
    public KnowngeneBean loadByPrimaryKey(Integer geneId) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("SELECT " + ALL_FIELDS + " FROM knowngene WHERE gene_id=?");
            // System.out.println("loadByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (geneId == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, geneId); }
            List<KnowngeneBean> pReturn = this.loadByPreparedStatementAsList(ps);
            if (pReturn.size() == 0) {
                throw new ObjectRetrievalException();
            } else {
                return pReturn.get(0);
            }
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @param geneId Integer - PK# 1
     * @return the number of deleted rows
     * @throws DAOException
     */
    //2
    public int deleteByPrimaryKey(Integer geneId) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("DELETE FROM knowngene WHERE gene_id=?");
            // System.out.println("deleteByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (geneId == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, geneId); }
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //////////////////////////////////////
    // GET/SET IMPORTED KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the KgsequenceBean object from the knowngene.knowngene_ref field.
     *
     * @param bean the KnowngeneBean
     * @return the associated KgsequenceBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public KgsequenceBean[] getKgsequenceBeans(KnowngeneBean bean) throws DAOException
    {
        KgsequenceBean other = KgsequenceManager.getInstance().createKgsequenceBean();
        other.setKnowngeneRef(bean.getGeneId());
        return KgsequenceManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Retrieves the KgsequenceBean object from the knowngene.knowngene_ref field.
     *
     * @param bean the KnowngeneBean
     * @return the associated KgsequenceBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public List<KgsequenceBean> getKgsequenceBeansAsList(KnowngeneBean bean) throws DAOException
    {
        KgsequenceBean other = KgsequenceManager.getInstance().createKgsequenceBean();
        other.setKnowngeneRef(bean.getGeneId());
        return KgsequenceManager.getInstance().loadUsingTemplateAsList(other);
    }

    /**
     * Associates the KnowngeneBean object to the KgsequenceBean object.
     *
     * @param bean the KnowngeneBean object to use
     * @param beanToSet the KgsequenceBean object to associate to the KnowngeneBean
     * @return the associated KgsequenceBean bean
     */
    //4.1 SET IMPORTED
    public KnowngeneBean setKgsequenceBean(KnowngeneBean bean,KgsequenceBean beanToSet)
    {
        bean.setGeneId(beanToSet.getKnowngeneRef());
        return bean;
    }

    /**
     * Retrieves the MreBean object from the knowngene.knowngene_ref field.
     *
     * @param bean the KnowngeneBean
     * @return the associated MreBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public MreBean[] getMreBeans(KnowngeneBean bean) throws DAOException
    {
        MreBean other = MreManager.getInstance().createMreBean();
        other.setKnowngeneRef(bean.getGeneId());
        return MreManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Retrieves the MreBean object from the knowngene.knowngene_ref field.
     *
     * @param bean the KnowngeneBean
     * @return the associated MreBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public List<MreBean> getMreBeansAsList(KnowngeneBean bean) throws DAOException
    {
        MreBean other = MreManager.getInstance().createMreBean();
        other.setKnowngeneRef(bean.getGeneId());
        return MreManager.getInstance().loadUsingTemplateAsList(other);
    }

    /**
     * Associates the KnowngeneBean object to the MreBean object.
     *
     * @param bean the KnowngeneBean object to use
     * @param beanToSet the MreBean object to associate to the KnowngeneBean
     * @return the associated MreBean bean
     */
    //4.1 SET IMPORTED
    public KnowngeneBean setMreBean(KnowngeneBean bean,MreBean beanToSet)
    {
        bean.setGeneId(beanToSet.getKnowngeneRef());
        return bean;
    }

    /**
     * Retrieves the XrefBean object from the knowngene.knowngene_ref field.
     *
     * @param bean the KnowngeneBean
     * @return the associated XrefBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public XrefBean[] getXrefBeans(KnowngeneBean bean) throws DAOException
    {
        XrefBean other = XrefManager.getInstance().createXrefBean();
        other.setKnowngeneRef(bean.getGeneId());
        return XrefManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Retrieves the XrefBean object from the knowngene.knowngene_ref field.
     *
     * @param bean the KnowngeneBean
     * @return the associated XrefBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public List<XrefBean> getXrefBeansAsList(KnowngeneBean bean) throws DAOException
    {
        XrefBean other = XrefManager.getInstance().createXrefBean();
        other.setKnowngeneRef(bean.getGeneId());
        return XrefManager.getInstance().loadUsingTemplateAsList(other);
    }

    /**
     * Associates the KnowngeneBean object to the XrefBean object.
     *
     * @param bean the KnowngeneBean object to use
     * @param beanToSet the XrefBean object to associate to the KnowngeneBean
     * @return the associated XrefBean bean
     */
    //4.1 SET IMPORTED
    public KnowngeneBean setXrefBean(KnowngeneBean bean,XrefBean beanToSet)
    {
        bean.setGeneId(beanToSet.getKnowngeneRef());
        return bean;
    }




    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from knowngene.
     *
     * @return an array of KnowngeneManager bean
     * @throws DAOException
     */
    //5
    public KnowngeneBean[] loadAll() throws DAOException
    {
        return this.loadUsingTemplate(null);
    }

    /**
     * Loads all the rows from knowngene.
     *
     * @return a list of KnowngeneManager bean
     * @throws DAOException
     */
    //5
    public List<KnowngeneBean> loadAllAsList() throws DAOException
    {
        return this.loadUsingTemplateAsList(null);
    }


    /**
     * Loads the given number of rows from knowngene, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return an array of KnowngeneManager bean
     * @throws DAOException
     */
    //6
    public KnowngeneBean[] loadAll(int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(null, startRow, numRows);
    }

    /**
     * Loads the given number of rows from knowngene, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return a list of KnowngeneManager bean
     * @throws DAOException
     */
    //6
    public List<KnowngeneBean> loadAllAsList(int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplateAsList(null, startRow, numRows);
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of KnowngeneBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting KnowngeneBean table
     * @throws DAOException
     */
    //7
    public KnowngeneBean[] loadByWhere(String where) throws DAOException
    {
        return this.loadByWhere(where, null);
    }
    /**
     * Retrieves a list of KnowngeneBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting KnowngeneBean table
     * @throws DAOException
     */
    //7
    public List<KnowngeneBean> loadByWhereAsList(String where) throws DAOException
    {
        return this.loadByWhereAsList(where, null);
    }

    /**
     * Retrieves an array of KnowngeneBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return the resulting KnowngeneBean table
     * @throws DAOException
     */
    //8
    public KnowngeneBean[] loadByWhere(String where, int[] fieldList) throws DAOException
    {
        return this.loadByWhere(where, fieldList, 1, -1);
    }


    /**
     * Retrieves a list of KnowngeneBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return the resulting KnowngeneBean table
     * @throws DAOException
     */
    //8
    public List<KnowngeneBean> loadByWhereAsList(String where, int[] fieldList) throws DAOException
    {
        return this.loadByWhereAsList(where, fieldList, 1, -1);
    }

    /**
     * Retrieves an array of KnowngeneBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return the resulting KnowngeneBean table
     * @throws DAOException
     */
    //9
    public KnowngeneBean[] loadByWhere(String where, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        return (KnowngeneBean[]) this.loadByWhereAsList(where, fieldList, startRow, numRows).toArray(new KnowngeneBean[0]);
    }

    /**
     * Retrieves a list of KnowngeneBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return the resulting KnowngeneBean table
     * @throws DAOException
     */
    //9
    public List<KnowngeneBean> loadByWhereAsList(String where, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        StringBuffer sql = new StringBuffer(128);
        if(fieldList == null) {
            sql.append("SELECT ").append(ALL_FIELDS).append(" FROM knowngene ").append(where);
        } else
        {
            sql.append("SELECT ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0) {
                    sql.append(",");
                }
                sql.append(FULL_FIELD_NAMES[fieldList[i]]);
            }
            sql.append(" FROM knowngene ");
            sql.append(where);
        }
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        // System.out.println("loadByWhere: " + sql);
        try
        {
            c = this.getConnection();
            st = c.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rs = st.executeQuery(sql.toString());
            return this.decodeResultSetAsList(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(st, rs);
            this.freeConnection(c);
        }
    }


    /**
     * Deletes all rows from knowngene table.
     * @return the number of deleted rows.
     * @throws DAOException
     */
    //10
    public int deleteAll() throws DAOException
    {
        return this.deleteByWhere("");
    }


    /**
     * Deletes rows from the knowngene table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     * @throws DAOException
     */
    //11
    public int deleteByWhere(String where) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("DELETE FROM knowngene " + where);
            // System.out.println("deleteByWhere: " + sql);
            ps = c.prepareStatement(sql.toString());
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the KnowngeneBean bean into the database.
     *
     * @param bean the KnowngeneBean bean to be saved
     * @return the inserted or updated bean
     * @throws DAOException
     */
    //12
    public KnowngeneBean save(KnowngeneBean bean) throws DAOException
    {
        if (bean.isNew()) {
            return this.insert(bean);
        } else {
            return this.update(bean);
        }
    }

    /**
     * Insert the KnowngeneBean bean into the database.
     *
     * @param bean the KnowngeneBean bean to be saved
     * @return the inserted bean
     * @throws DAOException
     */
    //13
    public KnowngeneBean insert(KnowngeneBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (!bean.isNew()){
            return this.update(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = null;

        try
        {
            c = this.getConnection();
            if (!bean.isGeneIdModified())
            {
                StringBuilder hint = new StringBuilder("SELECT nextval('knowngene_gene_id_SEQ')");
                // System.out.println("generatedKey : " + hint);

                ps = c.prepareStatement(hint.toString());
                ResultSet rs = null;
                try
                {
                    rs = ps.executeQuery();
                    if(rs.next()) {
                        bean.setGeneId(Manager.getInteger(rs, 1));
                    } else {
                        this.getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                }
                finally
                {
                    this.getManager().close(ps, rs);
                    ps=null;
                }
            }
            this.beforeInsert(bean); // listener callback
            int _dirtyCount = 0;
            sql = new StringBuilder("INSERT into knowngene (");

            if (bean.isChromosomModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("chromosom");
                _dirtyCount++;
            }

            if (bean.isExonEndsModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("exon_ends");
                _dirtyCount++;
            }

            if (bean.isExonStartsModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("exon_starts");
                _dirtyCount++;
            }

            if (bean.isExonCountModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("exon_count");
                _dirtyCount++;
            }

            if (bean.isCdsEndModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("cds_end");
                _dirtyCount++;
            }

            if (bean.isCdsStartModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("cds_start");
                _dirtyCount++;
            }

            if (bean.isTxStartModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tx_start");
                _dirtyCount++;
            }

            if (bean.isTxEndModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tx_end");
                _dirtyCount++;
            }

            if (bean.isStrandModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("strand");
                _dirtyCount++;
            }

            if (bean.isUcscIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("ucsc_id");
                _dirtyCount++;
            }

            if (bean.isGeneIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("gene_id");
                _dirtyCount++;
            }

            sql.append(") values (");
            if(_dirtyCount > 0) {
                sql.append("?");
                for(int i = 1; i < _dirtyCount; i++) {
                    sql.append(",?");
                }
            }
            sql.append(")");


            // System.out.println("insert : " + sql.toString());

            ps = c.prepareStatement(sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            ps.executeUpdate();

            bean.isNew(false);
            bean.resetIsModified();
            this.afterInsert(bean); // listener callback
            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Update the KnowngeneBean bean record in the database according to the changes.
     *
     * @param bean the KnowngeneBean bean to be updated
     * @return the updated bean
     * @throws DAOException
     */
    //14
    public KnowngeneBean update(KnowngeneBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (bean.isNew()){
            return this.insert(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = null;

        try
        {
            c = this.getConnection();

            this.beforeUpdate(bean); // listener callback
            sql = new StringBuilder("UPDATE knowngene SET ");
            boolean useComma=false;

            if (bean.isChromosomModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("chromosom=?");
            }

            if (bean.isExonEndsModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("exon_ends=?");
            }

            if (bean.isExonStartsModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("exon_starts=?");
            }

            if (bean.isExonCountModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("exon_count=?");
            }

            if (bean.isCdsEndModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("cds_end=?");
            }

            if (bean.isCdsStartModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("cds_start=?");
            }

            if (bean.isTxStartModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tx_start=?");
            }

            if (bean.isTxEndModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tx_end=?");
            }

            if (bean.isStrandModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("strand=?");
            }

            if (bean.isUcscIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("ucsc_id=?");
            }

            if (bean.isGeneIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("gene_id=?");
            }
            sql.append(" WHERE ");
            sql.append("gene_id=?");
            // System.out.println("update : " + sql.toString());
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);

            int _dirtyCount = this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            if (_dirtyCount == 0) {
                // System.out.println("The bean to look is not initialized... do not update.");
                return bean;
            }

            if (bean.getGeneId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getGeneId()); }
            ps.executeUpdate();
            bean.resetIsModified();
            this.afterUpdate(bean); // listener callback

            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Saves an array of KnowngeneBean beans into the database.
     *
     * @param beans the KnowngeneBean bean table to be saved
     * @return the saved KnowngeneBean array.
     * @throws DAOException
     */
    //15
    public KnowngeneBean[] save(KnowngeneBean[] beans) throws DAOException
    {
        for (KnowngeneBean bean : beans) 
        {
            this.save(bean);
        }
        return beans;
    }

    /**
     * Saves a list of KnowngeneBean beans into the database.
     *
     * @param beans the KnowngeneBean bean table to be saved
     * @return the saved KnowngeneBean array.
     * @throws DAOException
     */
    //15
    public List<KnowngeneBean> save(List<KnowngeneBean> beans) throws DAOException
    {
        for (KnowngeneBean bean : beans) 
        {
            this.save(bean);
        }
        return beans;
    }

    /**
     * Insert an array of KnowngeneBean beans into the database.
     *
     * @param beans the KnowngeneBean bean table to be inserted
     * @return the saved KnowngeneBean array.
     * @throws DAOException
     */
    //16
    public KnowngeneBean[] insert(KnowngeneBean[] beans) throws DAOException
    {
        return this.save(beans);
    }

    /**
     * Insert a list of KnowngeneBean beans into the database.
     *
     * @param beans the KnowngeneBean bean table to be inserted
     * @return the saved KnowngeneBean array.
     * @throws DAOException
     */
    //16
    public List<KnowngeneBean> insert(List<KnowngeneBean> beans) throws DAOException
    {
        return this.save(beans);
    }

    /**
     * Updates an array of KnowngeneBean beans into the database.
     *
     * @param beans the KnowngeneBean bean table to be inserted
     * @return the saved KnowngeneBean array.
     * @throws DAOException
     */
    //17
    public KnowngeneBean[] update(KnowngeneBean[] beans) throws DAOException
    {
        return this.save(beans);
    }

    /**
     * Updates a list of KnowngeneBean beans into the database.
     *
     * @param beans the KnowngeneBean bean table to be inserted
     * @return the saved KnowngeneBean array.
     * @throws DAOException
     */
    //17
    public List<KnowngeneBean> update(List<KnowngeneBean> beans) throws DAOException
    {
        return this.save(beans);
    }
    

    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    /**
     * Loads a unique KnowngeneBean bean from a template one giving a c
     *
     * @param bean the KnowngeneBean bean to look for
     * @return the bean matching the template
     * @throws DAOException
     */
    //18
    public KnowngeneBean loadUniqueUsingTemplate(KnowngeneBean bean) throws DAOException
    {
         KnowngeneBean[] beans = this.loadUsingTemplate(bean);
         if (beans.length == 0) {
             return null;
         }
         if (beans.length > 1) {
             throw new ObjectRetrievalException("More than one element !!");
         }
         return beans[0];
     }

    /**
     * Loads an array of KnowngeneBean from a template one.
     *
     * @param bean the KnowngeneBean template to look for
     * @return all the KnowngeneBean matching the template
     * @throws DAOException
     */
    //19
    public KnowngeneBean[] loadUsingTemplate(KnowngeneBean bean) throws DAOException
    {
        return this.loadUsingTemplate(bean, 1, -1);
    }

    /**
     * Loads a list of KnowngeneBean from a template one.
     *
     * @param bean the KnowngeneBean template to look for
     * @return all the KnowngeneBean matching the template
     * @throws DAOException
     */
    //19
    public List<KnowngeneBean> loadUsingTemplateAsList(KnowngeneBean bean) throws DAOException
    {
        return this.loadUsingTemplateAsList(bean, 1, -1);
    }

    /**
     * Loads an array of KnowngeneBean from a template one, given the start row and number of rows.
     *
     * @param bean the KnowngeneBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the KnowngeneBean matching the template
     * @throws DAOException
     */
    //20
    public KnowngeneBean[] loadUsingTemplate(KnowngeneBean bean, int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * Loads a list of KnowngeneBean from a template one, given the start row and number of rows.
     *
     * @param bean the KnowngeneBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the KnowngeneBean matching the template
     * @throws DAOException
     */
    //20
    public List<KnowngeneBean> loadUsingTemplateAsList(KnowngeneBean bean, int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplateAsList(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * Loads an array of KnowngeneBean from a template one, given the start row and number of rows.
     *
     * @param bean the KnowngeneBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return all the KnowngeneBean matching the template
     * @throws DAOException
     */
    //20
    public KnowngeneBean[] loadUsingTemplate(KnowngeneBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
    	return (KnowngeneBean[])this.loadUsingTemplateAsList(bean, startRow, numRows, searchType).toArray(new KnowngeneBean[0]);
    }

    /**
     * Loads a list of KnowngeneBean from a template one, given the start row and number of rows.
     *
     * @param bean the KnowngeneBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return all the KnowngeneBean matching the template
     * @throws DAOException
     */
    //20
    public List<KnowngeneBean> loadUsingTemplateAsList(KnowngeneBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
        // System.out.println("loadUsingTemplate startRow:" + startRow + ", numRows:" + numRows + ", searchType:" + searchType);
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer(128);
        sql.append("SELECT ").append(ALL_FIELDS).append(" FROM knowngene ");
        StringBuilder sqlWhere = new StringBuilder("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, searchType) > 0)
            {
                sql.append(" WHERE ").append(sqlWhere);
            }
            else
            {
                // System.out.println("The bean to look is not initialized... loading all");
            }
            // System.out.println("loadUsingTemplate: " + sql.toString());

            c = this.getConnection();
            int scrollType = ResultSet.TYPE_SCROLL_INSENSITIVE;
            if (startRow != 1) {
                scrollType = ResultSet.TYPE_SCROLL_SENSITIVE;
            }
            ps = c.prepareStatement(sql.toString(),
                                    scrollType,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            ps.executeQuery();
            return this.loadByPreparedStatementAsList(ps, null, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    /**
     * Deletes rows using a KnowngeneBean template.
     *
     * @param bean the KnowngeneBean object(s) to be deleted
     * @return the number of deleted objects
     * @throws DAOException
     */
    //21
    public int deleteUsingTemplate(KnowngeneBean bean) throws DAOException
    {
        if (bean.isGeneIdInitialized()) {
            return this.deleteByPrimaryKey(bean.getGeneId());
        }
        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = new StringBuilder("DELETE FROM knowngene ");
        StringBuilder sqlWhere = new StringBuilder("");

        try
        {
            this.beforeDelete(bean); // listener callback
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0)
            {
                sql.append(" WHERE ").append(sqlWhere);
            }
            else
            {
                // System.out.println("The bean to look is not initialized... deleting all");
            }
            // System.out.println("deleteUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            int _rows = ps.executeUpdate();
            this.afterDelete(bean); // listener callback
            return _rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }



    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________

    /**
     * Retrieves the number of rows of the table knowngene.
     *
     * @return the number of rows returned
     * @throws DAOException
     */
    //24
    public int countAll() throws DAOException
    {
        return this.countWhere("");
    }

    /**
     * Retrieves the number of rows of the table knowngene with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     * @throws DAOException
     */
    //25
    public int countWhere(String where) throws DAOException
    {
        String sql = "SELECT COUNT(*) AS MCOUNT FROM knowngene " + where;
        // System.out.println("countWhere: " + sql);
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            c = this.getConnection();
            st = c.createStatement();
            rs =  st.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(st, rs);
            this.freeConnection(c);
            sql = null;
        }
        throw new DataAccessException("Error in countWhere where=[" + where + "]");
    }

    /**
     * Retrieves the number of rows of the table knowngene with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     * @throws DAOException
     */
    //26
    private int countByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next()) {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
       throw new DataAccessException("Error in countByPreparedStatement");
    }

    /**
     * count the number of elements of a specific KnowngeneBean bean
     *
     * @param bean the KnowngeneBean bean to look for ant count
     * @return the number of rows returned
     * @throws DAOException
     */
    //27
    public int countUsingTemplate(KnowngeneBean bean) throws DAOException
    {
        return this.countUsingTemplate(bean, -1, -1);
    }

    /**
     * count the number of elements of a specific KnowngeneBean bean , given the start row and number of rows.
     *
     * @param bean the KnowngeneBean template to look for and count
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(KnowngeneBean bean, int startRow, int numRows) throws DAOException
    {
        return this.countUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * count the number of elements of a specific KnowngeneBean bean given the start row and number of rows and the search type
     *
     * @param bean the KnowngeneBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(KnowngeneBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = new StringBuilder("SELECT COUNT(*) AS MCOUNT FROM knowngene");
        StringBuilder sqlWhere = new StringBuilder("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0)
            {
                sql.append(" WHERE ").append(sqlWhere);
            }
            else
            {
                // System.out.println("The bean to look is not initialized... counting all...");
            }
            // System.out.println("countUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            return this.countByPreparedStatement(ps);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    //


    /**
     * fills the given StringBuilder with the sql where clausis constructed using the bean and the search type
     * @param sqlWhere the StringBuilder that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     */
    protected int fillWhere(StringBuilder sqlWhere, KnowngeneBean bean, int searchType)
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        String sqlEqualsOperation = "=";
        if (searchType != SEARCH_EXACT) {
            sqlEqualsOperation = " like ";
        }
        try
        {
            if (bean.isChromosomModified()) {
                _dirtyCount ++;
                if (bean.getChromosom() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("chromosom IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("chromosom ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isExonEndsModified()) {
                _dirtyCount ++;
                if (bean.getExonEnds() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("exon_ends IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("exon_ends ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isExonStartsModified()) {
                _dirtyCount ++;
                if (bean.getExonStarts() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("exon_starts IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("exon_starts ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isExonCountModified()) {
                _dirtyCount ++;
                if (bean.getExonCount() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("exon_count IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("exon_count = ?");
                }
            }
            if (bean.isCdsEndModified()) {
                _dirtyCount ++;
                if (bean.getCdsEnd() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("cds_end IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("cds_end = ?");
                }
            }
            if (bean.isCdsStartModified()) {
                _dirtyCount ++;
                if (bean.getCdsStart() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("cds_start IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("cds_start = ?");
                }
            }
            if (bean.isTxStartModified()) {
                _dirtyCount ++;
                if (bean.getTxStart() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tx_start IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tx_start = ?");
                }
            }
            if (bean.isTxEndModified()) {
                _dirtyCount ++;
                if (bean.getTxEnd() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tx_end IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tx_end = ?");
                }
            }
            if (bean.isStrandModified()) {
                _dirtyCount ++;
                if (bean.getStrand() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("strand IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("strand = ?");
                }
            }
            if (bean.isUcscIdModified()) {
                _dirtyCount ++;
                if (bean.getUcscId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("ucsc_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("ucsc_id ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isGeneIdModified()) {
                _dirtyCount ++;
                if (bean.getGeneId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("gene_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("gene_id = ?");
                }
            }
        }
        finally
        {
            sqlEqualsOperation = null;
        }
        return _dirtyCount;
    }

    /**
     * fill the given prepared statement with the bean values and a search type
     * @param ps the PreparedStatement that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     * @throws DAOException
     */
    protected int fillPreparedStatement(PreparedStatement ps, KnowngeneBean bean, int searchType) throws DAOException
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        try
        {
            if (bean.isChromosomModified()) {
                switch (searchType) {
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getChromosom() + "]");
                        if (bean.getChromosom() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getChromosom()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getChromosom() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getChromosom() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getChromosom() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getChromosom());
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getChromosom() + "]");
                        if (bean.getChromosom() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getChromosom() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isExonEndsModified()) {
                switch (searchType) {
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getExonEnds() + "]");
                        if (bean.getExonEnds() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getExonEnds()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getExonEnds() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getExonEnds() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getExonEnds() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getExonEnds());
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getExonEnds() + "]");
                        if (bean.getExonEnds() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getExonEnds() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isExonStartsModified()) {
                switch (searchType) {
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getExonStarts() + "]");
                        if (bean.getExonStarts() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getExonStarts()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getExonStarts() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getExonStarts() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getExonStarts() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getExonStarts());
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getExonStarts() + "]");
                        if (bean.getExonStarts() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getExonStarts() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isExonCountModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getExonCount() + "]");
                if (bean.getExonCount() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getExonCount()); }
            }
            if (bean.isCdsEndModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getCdsEnd() + "]");
                if (bean.getCdsEnd() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getCdsEnd()); }
            }
            if (bean.isCdsStartModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getCdsStart() + "]");
                if (bean.getCdsStart() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getCdsStart()); }
            }
            if (bean.isTxStartModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getTxStart() + "]");
                if (bean.getTxStart() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTxStart()); }
            }
            if (bean.isTxEndModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getTxEnd() + "]");
                if (bean.getTxEnd() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTxEnd()); }
            }
            if (bean.isStrandModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getStrand() + "]");
                if (bean.getStrand() == null) { ps.setNull(++_dirtyCount, Types.BIT); } else { Manager.setBoolean(ps, ++_dirtyCount, bean.getStrand()); }
            }
            if (bean.isUcscIdModified()) {
                switch (searchType) {
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getUcscId() + "]");
                        if (bean.getUcscId() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getUcscId()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getUcscId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getUcscId() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getUcscId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getUcscId());
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getUcscId() + "]");
                        if (bean.getUcscId() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getUcscId() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isGeneIdModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getGeneId() + "]");
                if (bean.getGeneId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getGeneId()); }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        return _dirtyCount;
    }


    //_____________________________________________________________________
    //
    // DECODE RESULT SET
    //_____________________________________________________________________

    /**
     * decode a resultset in an array of KnowngeneBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting KnowngeneBean table
     * @throws DAOException
     */
    //28
    public KnowngeneBean[] decodeResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
    	return (KnowngeneBean[])this.decodeResultSetAsList(rs, fieldList, startRow, numRows).toArray(new KnowngeneBean[0]);
    }

    /**
     * decode a resultset in a list of KnowngeneBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting KnowngeneBean table
     * @throws DAOException
     */
    //28
    public List<KnowngeneBean> decodeResultSetAsList(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        List<KnowngeneBean> v = new ArrayList<KnowngeneBean>();
        try
        {
            if (rs.absolute(startRow) && numRows!=0)
            {
                int count = 0;
                if(fieldList == null) {
                    do
                    {
                        v.add(decodeRow(rs));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
                else {
                    do
                    {
                        v.add(decodeRow(rs, fieldList));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
            }
            return v;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
    }

    /**
     * Transforms a ResultSet iterating on the knowngene on a KnowngeneBean bean.
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting KnowngeneBean bean
     * @throws DAOException
     */
    //29
    public KnowngeneBean decodeRow(ResultSet rs) throws DAOException
    {
        KnowngeneBean bean = this.createKnowngeneBean();
        try
        {
            bean.setChromosom(rs.getString(1));
            bean.setExonEnds(rs.getString(2));
            bean.setExonStarts(rs.getString(3));
            bean.setExonCount(Manager.getInteger(rs, 4));
            bean.setCdsEnd(Manager.getInteger(rs, 5));
            bean.setCdsStart(Manager.getInteger(rs, 6));
            bean.setTxStart(Manager.getInteger(rs, 7));
            bean.setTxEnd(Manager.getInteger(rs, 8));
            bean.setStrand(Manager.getBoolean(rs, 9));
            bean.setUcscId(rs.getString(10));
            bean.setGeneId(Manager.getInteger(rs, 11));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the knowngene table on a KnowngeneBean bean according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return bean resulting KnowngeneBean bean
     * @throws DAOException
     */
    //30
    public KnowngeneBean decodeRow(ResultSet rs, int[] fieldList) throws DAOException
    {
        KnowngeneBean bean = this.createKnowngeneBean();
        int pos = 0;
        try
        {
            for(int i = 0; i < fieldList.length; i++)
            {
                switch(fieldList[i])
                {
                    case ID_CHROMOSOM:
                        ++pos;
                        bean.setChromosom(rs.getString(pos));
                        break;
                    case ID_EXON_ENDS:
                        ++pos;
                        bean.setExonEnds(rs.getString(pos));
                        break;
                    case ID_EXON_STARTS:
                        ++pos;
                        bean.setExonStarts(rs.getString(pos));
                        break;
                    case ID_EXON_COUNT:
                        ++pos;
                        bean.setExonCount(Manager.getInteger(rs, pos));
                        break;
                    case ID_CDS_END:
                        ++pos;
                        bean.setCdsEnd(Manager.getInteger(rs, pos));
                        break;
                    case ID_CDS_START:
                        ++pos;
                        bean.setCdsStart(Manager.getInteger(rs, pos));
                        break;
                    case ID_TX_START:
                        ++pos;
                        bean.setTxStart(Manager.getInteger(rs, pos));
                        break;
                    case ID_TX_END:
                        ++pos;
                        bean.setTxEnd(Manager.getInteger(rs, pos));
                        break;
                    case ID_STRAND:
                        ++pos;
                        bean.setStrand(Manager.getBoolean(rs, pos));
                        break;
                    case ID_UCSC_ID:
                        ++pos;
                        bean.setUcscId(rs.getString(pos));
                        break;
                    case ID_GENE_ID:
                        ++pos;
                        bean.setGeneId(Manager.getInteger(rs, pos));
                        break;
                    default:
                        throw new DAOException("Unknown field id " + fieldList[i]);
                }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the knowngene on a KnowngeneBean bean using the names of the columns
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting KnowngeneBean bean
     * @throws DAOException
     */
    //31
    public KnowngeneBean metaDataDecodeRow(ResultSet rs) throws DAOException
    {
        KnowngeneBean bean = this.createKnowngeneBean();
        try
        {
            bean.setChromosom(rs.getString("chromosom"));
            bean.setExonEnds(rs.getString("exon_ends"));
            bean.setExonStarts(rs.getString("exon_starts"));
            bean.setExonCount(Manager.getInteger(rs, "exon_count"));
            bean.setCdsEnd(Manager.getInteger(rs, "cds_end"));
            bean.setCdsStart(Manager.getInteger(rs, "cds_start"));
            bean.setTxStart(Manager.getInteger(rs, "tx_start"));
            bean.setTxEnd(Manager.getInteger(rs, "tx_end"));
            bean.setStrand(Manager.getBoolean(rs, "strand"));
            bean.setUcscId(rs.getString("ucsc_id"));
            bean.setGeneId(Manager.getInteger(rs, "gene_id"));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }

        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of KnowngeneBean
     * @throws DAOException
     */
    //32
    public KnowngeneBean[] loadByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of KnowngeneBean
     * @throws DAOException
     */
    //32
    public List<KnowngeneBean> loadByPreparedStatementAsList(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatementAsList(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of KnowngeneBean
     * @throws DAOException
     */
    //33
    public KnowngeneBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws DAOException
    {
        return (KnowngeneBean[])this.loadByPreparedStatementAsList(ps, fieldList).toArray(new KnowngeneBean[0]);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of KnowngeneBean
     * @throws DAOException
     */
    //33
    public List<KnowngeneBean> loadByPreparedStatementAsList(PreparedStatement ps, int[] fieldList) throws DAOException
    {		        
        ResultSet rs =  null;
		List<KnowngeneBean> v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new ArrayList<KnowngeneBean>();
			if(fieldList == null) {
				while(rs.next()) {
					v.add(decodeRow(rs));
				}
			}
			else {
				while(rs.next()) {
					v.add(decodeRow(rs, fieldList));
				}
			}

			return v;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            getManager().close(rs);
        }
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of KnowngeneBean
     * @throws DAOException
     */
    //34
    public KnowngeneBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            rs = ps.executeQuery();
            return this.decodeResultSet(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of KnowngeneBean
     * @throws DAOException
     */
    //34
    public List<KnowngeneBean> loadByPreparedStatementAsList(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            rs = ps.executeQuery();
            return this.decodeResultSetAsList(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
    }

    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________
    private KnowngeneListener listener = null;

    /**
     * Registers a unique KnowngeneListener listener.
     */
    //35
    public void registerListener(KnowngeneListener listener)
    {
        this.listener = listener;
    }

    /**
     * Before the save of the KnowngeneBean bean.
     *
     * @param bean the KnowngeneBean bean to be saved
     */
    //36
    private void beforeInsert(KnowngeneBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeInsert(bean);
        }
    }

    /**
     * After the save of the KnowngeneBean bean.
     *
     * @param bean the KnowngeneBean bean to be saved
     */
    //37
    private void afterInsert(KnowngeneBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterInsert(bean);
        }
    }

    /**
     * Before the update of the KnowngeneBean bean.
     *
     * @param bean the KnowngeneBean bean to be updated
     */
    //38
    private void beforeUpdate(KnowngeneBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeUpdate(bean);
        }
    }

    /**
     * After the update of the KnowngeneBean bean.
     *
     * @param bean the KnowngeneBean bean to be updated
     */
    //39
    private void afterUpdate(KnowngeneBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterUpdate(bean);
        }
    }

    /**
     * Before the delete of the KnowngeneBean bean.
     *
     * @param bean the KnowngeneBean bean to be deleted
     */
    private void beforeDelete(KnowngeneBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeDelete(bean);
        }
    }

    /**
     * After the delete of the KnowngeneBean bean.
     *
     * @param bean the KnowngeneBean bean to be deleted
     */
    private void afterDelete(KnowngeneBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterDelete(bean);
        }
    }

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //40
    private Manager getManager()
    {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    //41
    private void freeConnection(Connection c)
    {
        this.getManager().releaseConnection(c); // back to pool
    }

    /**
     * Gets the connection.
     */
    //42
    private Connection getConnection() throws DAOException
    {
        try
        {
            return this.getManager().getConnection();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
    }
}
