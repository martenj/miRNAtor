// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package mirnator.sql2java;

import java.util.Comparator;


/**
 * Comparator class is used to sort the MreBean objects.
 * @author sql2java
 */
@SuppressWarnings("rawtypes")
public class MreComparator implements Comparator
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for MreComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new MreComparator(MreManager.ID_CODON3_FREQUENCY_AA, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>MreManager.ID_CODON3_FREQUENCY_AA
     *   <li>MreManager.ID_CODON2_FREQUENCY_AA
     *   <li>MreManager.ID_CODON1_FREQUENCY_AA
     *   <li>MreManager.ID_CODON3_FREQUENCY
     *   <li>MreManager.ID_CODON2_FREQUENCY
     *   <li>MreManager.ID_CODON1_FREQUENCY
     *   <li>MreManager.ID_MRE_CONSERVATION_LOCAL_SCORE
     *   <li>MreManager.ID_MRE_FREE_ENERGY_SCORE
     *   <li>MreManager.ID_MRE_CONSERVATION_SCORE
     *   <li>MreManager.ID_CHR_END
     *   <li>MreManager.ID_CHR_START
     *   <li>MreManager.ID_CHROMOSOM
     *   <li>MreManager.ID_MIRNA_END
     *   <li>MreManager.ID_MIRNA_START
     *   <li>MreManager.ID_MRE_SOURCE
     *   <li>MreManager.ID_MRE_TYPE_REF
     *   <li>MreManager.ID_KNOWNGENE_END
     *   <li>MreManager.ID_KNOWNGENE_START
     *   <li>MreManager.ID_KNOWNGENE_REF
     *   <li>MreManager.ID_MIRNA_REF
     *   <li>MreManager.ID_MRE_ID
     * </ul>
     */
    public MreComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for MreComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new MreComparator(MreManager.ID_CODON3_FREQUENCY_AA, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>MreManager.ID_CODON3_FREQUENCY_AA
     *   <li>MreManager.ID_CODON2_FREQUENCY_AA
     *   <li>MreManager.ID_CODON1_FREQUENCY_AA
     *   <li>MreManager.ID_CODON3_FREQUENCY
     *   <li>MreManager.ID_CODON2_FREQUENCY
     *   <li>MreManager.ID_CODON1_FREQUENCY
     *   <li>MreManager.ID_MRE_CONSERVATION_LOCAL_SCORE
     *   <li>MreManager.ID_MRE_FREE_ENERGY_SCORE
     *   <li>MreManager.ID_MRE_CONSERVATION_SCORE
     *   <li>MreManager.ID_CHR_END
     *   <li>MreManager.ID_CHR_START
     *   <li>MreManager.ID_STRAND
     *   <li>MreManager.ID_CHROMOSOM
     *   <li>MreManager.ID_MIRNA_END
     *   <li>MreManager.ID_MIRNA_START
     *   <li>MreManager.ID_MRE_SOURCE
     *   <li>MreManager.ID_MRE_TYPE_REF
     *   <li>MreManager.ID_KNOWNGENE_END
     *   <li>MreManager.ID_KNOWNGENE_START
     *   <li>MreManager.ID_KNOWNGENE_REF
     *   <li>MreManager.ID_MIRNA_REF
     *   <li>MreManager.ID_MRE_ID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public MreComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        MreBean b1 = (MreBean)pObj1;
        MreBean b2 = (MreBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case MreManager.ID_CODON3_FREQUENCY_AA:
                if (b1.getCodon3FrequencyAa() == null && b2.getCodon3FrequencyAa() != null) {
                    iReturn = -1;
                } else if (b1.getCodon3FrequencyAa() == null && b2.getCodon3FrequencyAa() == null) {
                    iReturn = 0;
                } else if (b1.getCodon3FrequencyAa() != null && b2.getCodon3FrequencyAa() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getCodon3FrequencyAa().compareTo(b2.getCodon3FrequencyAa());
                }
                break;
            case MreManager.ID_CODON2_FREQUENCY_AA:
                if (b1.getCodon2FrequencyAa() == null && b2.getCodon2FrequencyAa() != null) {
                    iReturn = -1;
                } else if (b1.getCodon2FrequencyAa() == null && b2.getCodon2FrequencyAa() == null) {
                    iReturn = 0;
                } else if (b1.getCodon2FrequencyAa() != null && b2.getCodon2FrequencyAa() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getCodon2FrequencyAa().compareTo(b2.getCodon2FrequencyAa());
                }
                break;
            case MreManager.ID_CODON1_FREQUENCY_AA:
                if (b1.getCodon1FrequencyAa() == null && b2.getCodon1FrequencyAa() != null) {
                    iReturn = -1;
                } else if (b1.getCodon1FrequencyAa() == null && b2.getCodon1FrequencyAa() == null) {
                    iReturn = 0;
                } else if (b1.getCodon1FrequencyAa() != null && b2.getCodon1FrequencyAa() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getCodon1FrequencyAa().compareTo(b2.getCodon1FrequencyAa());
                }
                break;
            case MreManager.ID_CODON3_FREQUENCY:
                if (b1.getCodon3Frequency() == null && b2.getCodon3Frequency() != null) {
                    iReturn = -1;
                } else if (b1.getCodon3Frequency() == null && b2.getCodon3Frequency() == null) {
                    iReturn = 0;
                } else if (b1.getCodon3Frequency() != null && b2.getCodon3Frequency() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getCodon3Frequency().compareTo(b2.getCodon3Frequency());
                }
                break;
            case MreManager.ID_CODON2_FREQUENCY:
                if (b1.getCodon2Frequency() == null && b2.getCodon2Frequency() != null) {
                    iReturn = -1;
                } else if (b1.getCodon2Frequency() == null && b2.getCodon2Frequency() == null) {
                    iReturn = 0;
                } else if (b1.getCodon2Frequency() != null && b2.getCodon2Frequency() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getCodon2Frequency().compareTo(b2.getCodon2Frequency());
                }
                break;
            case MreManager.ID_CODON1_FREQUENCY:
                if (b1.getCodon1Frequency() == null && b2.getCodon1Frequency() != null) {
                    iReturn = -1;
                } else if (b1.getCodon1Frequency() == null && b2.getCodon1Frequency() == null) {
                    iReturn = 0;
                } else if (b1.getCodon1Frequency() != null && b2.getCodon1Frequency() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getCodon1Frequency().compareTo(b2.getCodon1Frequency());
                }
                break;
            case MreManager.ID_MRE_CONSERVATION_LOCAL_SCORE:
                if (b1.getMreConservationLocalScore() == null && b2.getMreConservationLocalScore() != null) {
                    iReturn = -1;
                } else if (b1.getMreConservationLocalScore() == null && b2.getMreConservationLocalScore() == null) {
                    iReturn = 0;
                } else if (b1.getMreConservationLocalScore() != null && b2.getMreConservationLocalScore() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getMreConservationLocalScore().compareTo(b2.getMreConservationLocalScore());
                }
                break;
            case MreManager.ID_MRE_FREE_ENERGY_SCORE:
                if (b1.getMreFreeEnergyScore() == null && b2.getMreFreeEnergyScore() != null) {
                    iReturn = -1;
                } else if (b1.getMreFreeEnergyScore() == null && b2.getMreFreeEnergyScore() == null) {
                    iReturn = 0;
                } else if (b1.getMreFreeEnergyScore() != null && b2.getMreFreeEnergyScore() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getMreFreeEnergyScore().compareTo(b2.getMreFreeEnergyScore());
                }
                break;
            case MreManager.ID_MRE_CONSERVATION_SCORE:
                if (b1.getMreConservationScore() == null && b2.getMreConservationScore() != null) {
                    iReturn = -1;
                } else if (b1.getMreConservationScore() == null && b2.getMreConservationScore() == null) {
                    iReturn = 0;
                } else if (b1.getMreConservationScore() != null && b2.getMreConservationScore() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getMreConservationScore().compareTo(b2.getMreConservationScore());
                }
                break;
            case MreManager.ID_CHR_END:
                if (b1.getChrEnd() == null && b2.getChrEnd() != null) {
                    iReturn = -1;
                } else if (b1.getChrEnd() == null && b2.getChrEnd() == null) {
                    iReturn = 0;
                } else if (b1.getChrEnd() != null && b2.getChrEnd() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getChrEnd().compareTo(b2.getChrEnd());
                }
                break;
            case MreManager.ID_CHR_START:
                if (b1.getChrStart() == null && b2.getChrStart() != null) {
                    iReturn = -1;
                } else if (b1.getChrStart() == null && b2.getChrStart() == null) {
                    iReturn = 0;
                } else if (b1.getChrStart() != null && b2.getChrStart() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getChrStart().compareTo(b2.getChrStart());
                }
                break;
            case MreManager.ID_CHROMOSOM:
                if (b1.getChromosom() == null && b2.getChromosom() != null) {
                    iReturn = -1;
                } else if (b1.getChromosom() == null && b2.getChromosom() == null) {
                    iReturn = 0;
                } else if (b1.getChromosom() != null && b2.getChromosom() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getChromosom().compareTo(b2.getChromosom());
                }
                break;
            case MreManager.ID_MIRNA_END:
                if (b1.getMirnaEnd() == null && b2.getMirnaEnd() != null) {
                    iReturn = -1;
                } else if (b1.getMirnaEnd() == null && b2.getMirnaEnd() == null) {
                    iReturn = 0;
                } else if (b1.getMirnaEnd() != null && b2.getMirnaEnd() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getMirnaEnd().compareTo(b2.getMirnaEnd());
                }
                break;
            case MreManager.ID_MIRNA_START:
                if (b1.getMirnaStart() == null && b2.getMirnaStart() != null) {
                    iReturn = -1;
                } else if (b1.getMirnaStart() == null && b2.getMirnaStart() == null) {
                    iReturn = 0;
                } else if (b1.getMirnaStart() != null && b2.getMirnaStart() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getMirnaStart().compareTo(b2.getMirnaStart());
                }
                break;
            case MreManager.ID_MRE_SOURCE:
                if (b1.getMreSource() == null && b2.getMreSource() != null) {
                    iReturn = -1;
                } else if (b1.getMreSource() == null && b2.getMreSource() == null) {
                    iReturn = 0;
                } else if (b1.getMreSource() != null && b2.getMreSource() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getMreSource().compareTo(b2.getMreSource());
                }
                break;
            case MreManager.ID_MRE_TYPE_REF:
                if (b1.getMreTypeRef() == null && b2.getMreTypeRef() != null) {
                    iReturn = -1;
                } else if (b1.getMreTypeRef() == null && b2.getMreTypeRef() == null) {
                    iReturn = 0;
                } else if (b1.getMreTypeRef() != null && b2.getMreTypeRef() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getMreTypeRef().compareTo(b2.getMreTypeRef());
                }
                break;
            case MreManager.ID_KNOWNGENE_END:
                if (b1.getKnowngeneEnd() == null && b2.getKnowngeneEnd() != null) {
                    iReturn = -1;
                } else if (b1.getKnowngeneEnd() == null && b2.getKnowngeneEnd() == null) {
                    iReturn = 0;
                } else if (b1.getKnowngeneEnd() != null && b2.getKnowngeneEnd() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getKnowngeneEnd().compareTo(b2.getKnowngeneEnd());
                }
                break;
            case MreManager.ID_KNOWNGENE_START:
                if (b1.getKnowngeneStart() == null && b2.getKnowngeneStart() != null) {
                    iReturn = -1;
                } else if (b1.getKnowngeneStart() == null && b2.getKnowngeneStart() == null) {
                    iReturn = 0;
                } else if (b1.getKnowngeneStart() != null && b2.getKnowngeneStart() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getKnowngeneStart().compareTo(b2.getKnowngeneStart());
                }
                break;
            case MreManager.ID_KNOWNGENE_REF:
                if (b1.getKnowngeneRef() == null && b2.getKnowngeneRef() != null) {
                    iReturn = -1;
                } else if (b1.getKnowngeneRef() == null && b2.getKnowngeneRef() == null) {
                    iReturn = 0;
                } else if (b1.getKnowngeneRef() != null && b2.getKnowngeneRef() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getKnowngeneRef().compareTo(b2.getKnowngeneRef());
                }
                break;
            case MreManager.ID_MIRNA_REF:
                if (b1.getMirnaRef() == null && b2.getMirnaRef() != null) {
                    iReturn = -1;
                } else if (b1.getMirnaRef() == null && b2.getMirnaRef() == null) {
                    iReturn = 0;
                } else if (b1.getMirnaRef() != null && b2.getMirnaRef() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getMirnaRef().compareTo(b2.getMirnaRef());
                }
                break;
            case MreManager.ID_MRE_ID:
                if (b1.getMreId() == null && b2.getMreId() != null) {
                    iReturn = -1;
                } else if (b1.getMreId() == null && b2.getMreId() == null) {
                    iReturn = 0;
                } else if (b1.getMreId() != null && b2.getMreId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getMreId().compareTo(b2.getMreId());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }}
