// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package mirnator.sql2java;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import mirnator.sql2java.GeneratedBean;
import mirnator.sql2java.KnowngeneBean;
import mirnator.sql2java.MirnaBean;
import mirnator.sql2java.MreTypeBean;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * MreBean is a mapping of mre Table.
 * @author sql2java
*/
public class MreBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = 3727999563761960587L;
	
    private Float codon3FrequencyAa;
    private boolean codon3FrequencyAaIsModified = false;
    private boolean codon3FrequencyAaIsInitialized = false;

    private Float codon2FrequencyAa;
    private boolean codon2FrequencyAaIsModified = false;
    private boolean codon2FrequencyAaIsInitialized = false;

    private Float codon1FrequencyAa;
    private boolean codon1FrequencyAaIsModified = false;
    private boolean codon1FrequencyAaIsInitialized = false;

    private Float codon3Frequency;
    private boolean codon3FrequencyIsModified = false;
    private boolean codon3FrequencyIsInitialized = false;

    private Float codon2Frequency;
    private boolean codon2FrequencyIsModified = false;
    private boolean codon2FrequencyIsInitialized = false;

    private Float codon1Frequency;
    private boolean codon1FrequencyIsModified = false;
    private boolean codon1FrequencyIsInitialized = false;

    private Float mreConservationLocalScore;
    private boolean mreConservationLocalScoreIsModified = false;
    private boolean mreConservationLocalScoreIsInitialized = false;

    private Float mreFreeEnergyScore;
    private boolean mreFreeEnergyScoreIsModified = false;
    private boolean mreFreeEnergyScoreIsInitialized = false;

    private Float mreConservationScore;
    private boolean mreConservationScoreIsModified = false;
    private boolean mreConservationScoreIsInitialized = false;

    private Integer chrEnd;
    private boolean chrEndIsModified = false;
    private boolean chrEndIsInitialized = false;

    private Integer chrStart;
    private boolean chrStartIsModified = false;
    private boolean chrStartIsInitialized = false;

    private Boolean strand;
    private boolean strandIsModified = false;
    private boolean strandIsInitialized = false;

    private String chromosom;
    private boolean chromosomIsModified = false;
    private boolean chromosomIsInitialized = false;

    private Integer mirnaEnd;
    private boolean mirnaEndIsModified = false;
    private boolean mirnaEndIsInitialized = false;

    private Integer mirnaStart;
    private boolean mirnaStartIsModified = false;
    private boolean mirnaStartIsInitialized = false;

    private Integer mreSource;
    private boolean mreSourceIsModified = false;
    private boolean mreSourceIsInitialized = false;

    private Integer mreTypeRef;
    private boolean mreTypeRefIsModified = false;
    private boolean mreTypeRefIsInitialized = false;

    private Integer knowngeneEnd;
    private boolean knowngeneEndIsModified = false;
    private boolean knowngeneEndIsInitialized = false;

    private Integer knowngeneStart;
    private boolean knowngeneStartIsModified = false;
    private boolean knowngeneStartIsInitialized = false;

    private Integer knowngeneRef;
    private boolean knowngeneRefIsModified = false;
    private boolean knowngeneRefIsInitialized = false;

    private Integer mirnaRef;
    private boolean mirnaRefIsModified = false;
    private boolean mirnaRefIsInitialized = false;

    private Integer mreId;
    private boolean mreIdIsModified = false;
    private boolean mreIdIsInitialized = false;

    private boolean _isNew = true;
    

    /**
     * Prefered methods to create a MreBean is via the createMreBean method in MreManager or
     * via the factory class MreFactory create method
     */
    protected MreBean()
    {
    }

    /**
     * Getter method for codon3FrequencyAa.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: mre.codon3_frequency_aa</li>
     * <li>column size: 8</li>
     * <li>jdbc type returned by the driver: Types.REAL</li>
     * </ul>
     *
     * @return the value of codon3FrequencyAa
     */
    public Float getCodon3FrequencyAa()
    {
        return codon3FrequencyAa;
    }

    /**
     * Setter method for codon3FrequencyAa.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to codon3FrequencyAa
     */
    public void setCodon3FrequencyAa(Float newVal)
    {
        if ((newVal != null && codon3FrequencyAa != null && (newVal.compareTo(codon3FrequencyAa) == 0)) ||
            (newVal == null && codon3FrequencyAa == null && codon3FrequencyAaIsInitialized)) {
            return;
        }
        codon3FrequencyAa = newVal;
        codon3FrequencyAaIsModified = true;
        codon3FrequencyAaIsInitialized = true;
    }

    /**
     * Setter method for codon3FrequencyAa.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to codon3FrequencyAa
     */
    public void setCodon3FrequencyAa(float newVal)
    {
        setCodon3FrequencyAa(new Float(newVal));
    }

    /**
     * Determines if the codon3FrequencyAa has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCodon3FrequencyAaModified()
    {
        return codon3FrequencyAaIsModified;
    }

    /**
     * Determines if the codon3FrequencyAa has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCodon3FrequencyAaInitialized()
    {
        return codon3FrequencyAaIsInitialized;
    }

    /**
     * Getter method for codon2FrequencyAa.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: mre.codon2_frequency_aa</li>
     * <li>column size: 8</li>
     * <li>jdbc type returned by the driver: Types.REAL</li>
     * </ul>
     *
     * @return the value of codon2FrequencyAa
     */
    public Float getCodon2FrequencyAa()
    {
        return codon2FrequencyAa;
    }

    /**
     * Setter method for codon2FrequencyAa.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to codon2FrequencyAa
     */
    public void setCodon2FrequencyAa(Float newVal)
    {
        if ((newVal != null && codon2FrequencyAa != null && (newVal.compareTo(codon2FrequencyAa) == 0)) ||
            (newVal == null && codon2FrequencyAa == null && codon2FrequencyAaIsInitialized)) {
            return;
        }
        codon2FrequencyAa = newVal;
        codon2FrequencyAaIsModified = true;
        codon2FrequencyAaIsInitialized = true;
    }

    /**
     * Setter method for codon2FrequencyAa.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to codon2FrequencyAa
     */
    public void setCodon2FrequencyAa(float newVal)
    {
        setCodon2FrequencyAa(new Float(newVal));
    }

    /**
     * Determines if the codon2FrequencyAa has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCodon2FrequencyAaModified()
    {
        return codon2FrequencyAaIsModified;
    }

    /**
     * Determines if the codon2FrequencyAa has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCodon2FrequencyAaInitialized()
    {
        return codon2FrequencyAaIsInitialized;
    }

    /**
     * Getter method for codon1FrequencyAa.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: mre.codon1_frequency_aa</li>
     * <li>column size: 8</li>
     * <li>jdbc type returned by the driver: Types.REAL</li>
     * </ul>
     *
     * @return the value of codon1FrequencyAa
     */
    public Float getCodon1FrequencyAa()
    {
        return codon1FrequencyAa;
    }

    /**
     * Setter method for codon1FrequencyAa.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to codon1FrequencyAa
     */
    public void setCodon1FrequencyAa(Float newVal)
    {
        if ((newVal != null && codon1FrequencyAa != null && (newVal.compareTo(codon1FrequencyAa) == 0)) ||
            (newVal == null && codon1FrequencyAa == null && codon1FrequencyAaIsInitialized)) {
            return;
        }
        codon1FrequencyAa = newVal;
        codon1FrequencyAaIsModified = true;
        codon1FrequencyAaIsInitialized = true;
    }

    /**
     * Setter method for codon1FrequencyAa.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to codon1FrequencyAa
     */
    public void setCodon1FrequencyAa(float newVal)
    {
        setCodon1FrequencyAa(new Float(newVal));
    }

    /**
     * Determines if the codon1FrequencyAa has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCodon1FrequencyAaModified()
    {
        return codon1FrequencyAaIsModified;
    }

    /**
     * Determines if the codon1FrequencyAa has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCodon1FrequencyAaInitialized()
    {
        return codon1FrequencyAaIsInitialized;
    }

    /**
     * Getter method for codon3Frequency.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: mre.codon3_frequency</li>
     * <li>column size: 8</li>
     * <li>jdbc type returned by the driver: Types.REAL</li>
     * </ul>
     *
     * @return the value of codon3Frequency
     */
    public Float getCodon3Frequency()
    {
        return codon3Frequency;
    }

    /**
     * Setter method for codon3Frequency.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to codon3Frequency
     */
    public void setCodon3Frequency(Float newVal)
    {
        if ((newVal != null && codon3Frequency != null && (newVal.compareTo(codon3Frequency) == 0)) ||
            (newVal == null && codon3Frequency == null && codon3FrequencyIsInitialized)) {
            return;
        }
        codon3Frequency = newVal;
        codon3FrequencyIsModified = true;
        codon3FrequencyIsInitialized = true;
    }

    /**
     * Setter method for codon3Frequency.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to codon3Frequency
     */
    public void setCodon3Frequency(float newVal)
    {
        setCodon3Frequency(new Float(newVal));
    }

    /**
     * Determines if the codon3Frequency has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCodon3FrequencyModified()
    {
        return codon3FrequencyIsModified;
    }

    /**
     * Determines if the codon3Frequency has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCodon3FrequencyInitialized()
    {
        return codon3FrequencyIsInitialized;
    }

    /**
     * Getter method for codon2Frequency.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: mre.codon2_frequency</li>
     * <li>column size: 8</li>
     * <li>jdbc type returned by the driver: Types.REAL</li>
     * </ul>
     *
     * @return the value of codon2Frequency
     */
    public Float getCodon2Frequency()
    {
        return codon2Frequency;
    }

    /**
     * Setter method for codon2Frequency.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to codon2Frequency
     */
    public void setCodon2Frequency(Float newVal)
    {
        if ((newVal != null && codon2Frequency != null && (newVal.compareTo(codon2Frequency) == 0)) ||
            (newVal == null && codon2Frequency == null && codon2FrequencyIsInitialized)) {
            return;
        }
        codon2Frequency = newVal;
        codon2FrequencyIsModified = true;
        codon2FrequencyIsInitialized = true;
    }

    /**
     * Setter method for codon2Frequency.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to codon2Frequency
     */
    public void setCodon2Frequency(float newVal)
    {
        setCodon2Frequency(new Float(newVal));
    }

    /**
     * Determines if the codon2Frequency has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCodon2FrequencyModified()
    {
        return codon2FrequencyIsModified;
    }

    /**
     * Determines if the codon2Frequency has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCodon2FrequencyInitialized()
    {
        return codon2FrequencyIsInitialized;
    }

    /**
     * Getter method for codon1Frequency.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: mre.codon1_frequency</li>
     * <li>column size: 8</li>
     * <li>jdbc type returned by the driver: Types.REAL</li>
     * </ul>
     *
     * @return the value of codon1Frequency
     */
    public Float getCodon1Frequency()
    {
        return codon1Frequency;
    }

    /**
     * Setter method for codon1Frequency.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to codon1Frequency
     */
    public void setCodon1Frequency(Float newVal)
    {
        if ((newVal != null && codon1Frequency != null && (newVal.compareTo(codon1Frequency) == 0)) ||
            (newVal == null && codon1Frequency == null && codon1FrequencyIsInitialized)) {
            return;
        }
        codon1Frequency = newVal;
        codon1FrequencyIsModified = true;
        codon1FrequencyIsInitialized = true;
    }

    /**
     * Setter method for codon1Frequency.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to codon1Frequency
     */
    public void setCodon1Frequency(float newVal)
    {
        setCodon1Frequency(new Float(newVal));
    }

    /**
     * Determines if the codon1Frequency has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCodon1FrequencyModified()
    {
        return codon1FrequencyIsModified;
    }

    /**
     * Determines if the codon1Frequency has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCodon1FrequencyInitialized()
    {
        return codon1FrequencyIsInitialized;
    }

    /**
     * Getter method for mreConservationLocalScore.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: mre.mre_conservation_local_score</li>
     * <li>column size: 8</li>
     * <li>jdbc type returned by the driver: Types.REAL</li>
     * </ul>
     *
     * @return the value of mreConservationLocalScore
     */
    public Float getMreConservationLocalScore()
    {
        return mreConservationLocalScore;
    }

    /**
     * Setter method for mreConservationLocalScore.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to mreConservationLocalScore
     */
    public void setMreConservationLocalScore(Float newVal)
    {
        if ((newVal != null && mreConservationLocalScore != null && (newVal.compareTo(mreConservationLocalScore) == 0)) ||
            (newVal == null && mreConservationLocalScore == null && mreConservationLocalScoreIsInitialized)) {
            return;
        }
        mreConservationLocalScore = newVal;
        mreConservationLocalScoreIsModified = true;
        mreConservationLocalScoreIsInitialized = true;
    }

    /**
     * Setter method for mreConservationLocalScore.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to mreConservationLocalScore
     */
    public void setMreConservationLocalScore(float newVal)
    {
        setMreConservationLocalScore(new Float(newVal));
    }

    /**
     * Determines if the mreConservationLocalScore has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMreConservationLocalScoreModified()
    {
        return mreConservationLocalScoreIsModified;
    }

    /**
     * Determines if the mreConservationLocalScore has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMreConservationLocalScoreInitialized()
    {
        return mreConservationLocalScoreIsInitialized;
    }

    /**
     * Getter method for mreFreeEnergyScore.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: mre.mre_free_energy_score</li>
     * <li>column size: 8</li>
     * <li>jdbc type returned by the driver: Types.REAL</li>
     * </ul>
     *
     * @return the value of mreFreeEnergyScore
     */
    public Float getMreFreeEnergyScore()
    {
        return mreFreeEnergyScore;
    }

    /**
     * Setter method for mreFreeEnergyScore.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to mreFreeEnergyScore
     */
    public void setMreFreeEnergyScore(Float newVal)
    {
        if ((newVal != null && mreFreeEnergyScore != null && (newVal.compareTo(mreFreeEnergyScore) == 0)) ||
            (newVal == null && mreFreeEnergyScore == null && mreFreeEnergyScoreIsInitialized)) {
            return;
        }
        mreFreeEnergyScore = newVal;
        mreFreeEnergyScoreIsModified = true;
        mreFreeEnergyScoreIsInitialized = true;
    }

    /**
     * Setter method for mreFreeEnergyScore.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to mreFreeEnergyScore
     */
    public void setMreFreeEnergyScore(float newVal)
    {
        setMreFreeEnergyScore(new Float(newVal));
    }

    /**
     * Determines if the mreFreeEnergyScore has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMreFreeEnergyScoreModified()
    {
        return mreFreeEnergyScoreIsModified;
    }

    /**
     * Determines if the mreFreeEnergyScore has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMreFreeEnergyScoreInitialized()
    {
        return mreFreeEnergyScoreIsInitialized;
    }

    /**
     * Getter method for mreConservationScore.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: mre.mre_conservation_score</li>
     * <li>column size: 8</li>
     * <li>jdbc type returned by the driver: Types.REAL</li>
     * </ul>
     *
     * @return the value of mreConservationScore
     */
    public Float getMreConservationScore()
    {
        return mreConservationScore;
    }

    /**
     * Setter method for mreConservationScore.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to mreConservationScore
     */
    public void setMreConservationScore(Float newVal)
    {
        if ((newVal != null && mreConservationScore != null && (newVal.compareTo(mreConservationScore) == 0)) ||
            (newVal == null && mreConservationScore == null && mreConservationScoreIsInitialized)) {
            return;
        }
        mreConservationScore = newVal;
        mreConservationScoreIsModified = true;
        mreConservationScoreIsInitialized = true;
    }

    /**
     * Setter method for mreConservationScore.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to mreConservationScore
     */
    public void setMreConservationScore(float newVal)
    {
        setMreConservationScore(new Float(newVal));
    }

    /**
     * Determines if the mreConservationScore has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMreConservationScoreModified()
    {
        return mreConservationScoreIsModified;
    }

    /**
     * Determines if the mreConservationScore has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMreConservationScoreInitialized()
    {
        return mreConservationScoreIsInitialized;
    }

    /**
     * Getter method for chrEnd.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: mre.chr_end</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of chrEnd
     */
    public Integer getChrEnd()
    {
        return chrEnd;
    }

    /**
     * Setter method for chrEnd.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to chrEnd
     */
    public void setChrEnd(Integer newVal)
    {
        if ((newVal != null && chrEnd != null && (newVal.compareTo(chrEnd) == 0)) ||
            (newVal == null && chrEnd == null && chrEndIsInitialized)) {
            return;
        }
        chrEnd = newVal;
        chrEndIsModified = true;
        chrEndIsInitialized = true;
    }

    /**
     * Setter method for chrEnd.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to chrEnd
     */
    public void setChrEnd(int newVal)
    {
        setChrEnd(new Integer(newVal));
    }

    /**
     * Determines if the chrEnd has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isChrEndModified()
    {
        return chrEndIsModified;
    }

    /**
     * Determines if the chrEnd has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isChrEndInitialized()
    {
        return chrEndIsInitialized;
    }

    /**
     * Getter method for chrStart.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: mre.chr_start</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of chrStart
     */
    public Integer getChrStart()
    {
        return chrStart;
    }

    /**
     * Setter method for chrStart.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to chrStart
     */
    public void setChrStart(Integer newVal)
    {
        if ((newVal != null && chrStart != null && (newVal.compareTo(chrStart) == 0)) ||
            (newVal == null && chrStart == null && chrStartIsInitialized)) {
            return;
        }
        chrStart = newVal;
        chrStartIsModified = true;
        chrStartIsInitialized = true;
    }

    /**
     * Setter method for chrStart.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to chrStart
     */
    public void setChrStart(int newVal)
    {
        setChrStart(new Integer(newVal));
    }

    /**
     * Determines if the chrStart has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isChrStartModified()
    {
        return chrStartIsModified;
    }

    /**
     * Determines if the chrStart has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isChrStartInitialized()
    {
        return chrStartIsInitialized;
    }

    /**
     * Getter method for strand.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: mre.strand</li>
     * <li>column size: 1</li>
     * <li>jdbc type returned by the driver: Types.BIT</li>
     * </ul>
     *
     * @return the value of strand
     */
    public Boolean getStrand()
    {
        return strand;
    }

    /**
     * Setter method for strand.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to strand
     */
    public void setStrand(Boolean newVal)
    {
        if ((newVal != null && strand != null && newVal.equals(strand)) ||
            (newVal == null && strand == null && strandIsInitialized)) {
            return;
        }
        strand = newVal;
        strandIsModified = true;
        strandIsInitialized = true;
    }

    /**
     * Setter method for strand.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to strand
     */
    public void setStrand(boolean newVal)
    {
        setStrand(new Boolean(newVal));
    }

    /**
     * Determines if the strand has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isStrandModified()
    {
        return strandIsModified;
    }

    /**
     * Determines if the strand has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isStrandInitialized()
    {
        return strandIsInitialized;
    }

    /**
     * Getter method for chromosom.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: mre.chromosom</li>
     * <li>column size: 2147483647</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of chromosom
     */
    public String getChromosom()
    {
        return chromosom;
    }

    /**
     * Setter method for chromosom.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to chromosom
     */
    public void setChromosom(String newVal)
    {
        if ((newVal != null && chromosom != null && (newVal.compareTo(chromosom) == 0)) ||
            (newVal == null && chromosom == null && chromosomIsInitialized)) {
            return;
        }
        chromosom = newVal;
        chromosomIsModified = true;
        chromosomIsInitialized = true;
    }

    /**
     * Determines if the chromosom has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isChromosomModified()
    {
        return chromosomIsModified;
    }

    /**
     * Determines if the chromosom has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isChromosomInitialized()
    {
        return chromosomIsInitialized;
    }

    /**
     * Getter method for mirnaEnd.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: mre.mirna_end</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of mirnaEnd
     */
    public Integer getMirnaEnd()
    {
        return mirnaEnd;
    }

    /**
     * Setter method for mirnaEnd.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to mirnaEnd
     */
    public void setMirnaEnd(Integer newVal)
    {
        if ((newVal != null && mirnaEnd != null && (newVal.compareTo(mirnaEnd) == 0)) ||
            (newVal == null && mirnaEnd == null && mirnaEndIsInitialized)) {
            return;
        }
        mirnaEnd = newVal;
        mirnaEndIsModified = true;
        mirnaEndIsInitialized = true;
    }

    /**
     * Setter method for mirnaEnd.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to mirnaEnd
     */
    public void setMirnaEnd(int newVal)
    {
        setMirnaEnd(new Integer(newVal));
    }

    /**
     * Determines if the mirnaEnd has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMirnaEndModified()
    {
        return mirnaEndIsModified;
    }

    /**
     * Determines if the mirnaEnd has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMirnaEndInitialized()
    {
        return mirnaEndIsInitialized;
    }

    /**
     * Getter method for mirnaStart.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: mre.mirna_start</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of mirnaStart
     */
    public Integer getMirnaStart()
    {
        return mirnaStart;
    }

    /**
     * Setter method for mirnaStart.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to mirnaStart
     */
    public void setMirnaStart(Integer newVal)
    {
        if ((newVal != null && mirnaStart != null && (newVal.compareTo(mirnaStart) == 0)) ||
            (newVal == null && mirnaStart == null && mirnaStartIsInitialized)) {
            return;
        }
        mirnaStart = newVal;
        mirnaStartIsModified = true;
        mirnaStartIsInitialized = true;
    }

    /**
     * Setter method for mirnaStart.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to mirnaStart
     */
    public void setMirnaStart(int newVal)
    {
        setMirnaStart(new Integer(newVal));
    }

    /**
     * Determines if the mirnaStart has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMirnaStartModified()
    {
        return mirnaStartIsModified;
    }

    /**
     * Determines if the mirnaStart has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMirnaStartInitialized()
    {
        return mirnaStartIsInitialized;
    }

    /**
     * Getter method for mreSource.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: mre.mre_source</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of mreSource
     */
    public Integer getMreSource()
    {
        return mreSource;
    }

    /**
     * Setter method for mreSource.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to mreSource
     */
    public void setMreSource(Integer newVal)
    {
        if ((newVal != null && mreSource != null && (newVal.compareTo(mreSource) == 0)) ||
            (newVal == null && mreSource == null && mreSourceIsInitialized)) {
            return;
        }
        mreSource = newVal;
        mreSourceIsModified = true;
        mreSourceIsInitialized = true;
    }

    /**
     * Setter method for mreSource.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to mreSource
     */
    public void setMreSource(int newVal)
    {
        setMreSource(new Integer(newVal));
    }

    /**
     * Determines if the mreSource has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMreSourceModified()
    {
        return mreSourceIsModified;
    }

    /**
     * Determines if the mreSource has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMreSourceInitialized()
    {
        return mreSourceIsInitialized;
    }

    /**
     * Getter method for mreTypeRef.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: mre.mre_type_ref</li>
     * <li> foreign key: mre_type.mre_type_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of mreTypeRef
     */
    public Integer getMreTypeRef()
    {
        return mreTypeRef;
    }

    /**
     * Setter method for mreTypeRef.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to mreTypeRef
     */
    public void setMreTypeRef(Integer newVal)
    {
        if ((newVal != null && mreTypeRef != null && (newVal.compareTo(mreTypeRef) == 0)) ||
            (newVal == null && mreTypeRef == null && mreTypeRefIsInitialized)) {
            return;
        }
        mreTypeRef = newVal;
        mreTypeRefIsModified = true;
        mreTypeRefIsInitialized = true;
    }

    /**
     * Setter method for mreTypeRef.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to mreTypeRef
     */
    public void setMreTypeRef(int newVal)
    {
        setMreTypeRef(new Integer(newVal));
    }

    /**
     * Determines if the mreTypeRef has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMreTypeRefModified()
    {
        return mreTypeRefIsModified;
    }

    /**
     * Determines if the mreTypeRef has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMreTypeRefInitialized()
    {
        return mreTypeRefIsInitialized;
    }

    /**
     * Getter method for knowngeneEnd.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: mre.knowngene_end</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of knowngeneEnd
     */
    public Integer getKnowngeneEnd()
    {
        return knowngeneEnd;
    }

    /**
     * Setter method for knowngeneEnd.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to knowngeneEnd
     */
    public void setKnowngeneEnd(Integer newVal)
    {
        if ((newVal != null && knowngeneEnd != null && (newVal.compareTo(knowngeneEnd) == 0)) ||
            (newVal == null && knowngeneEnd == null && knowngeneEndIsInitialized)) {
            return;
        }
        knowngeneEnd = newVal;
        knowngeneEndIsModified = true;
        knowngeneEndIsInitialized = true;
    }

    /**
     * Setter method for knowngeneEnd.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to knowngeneEnd
     */
    public void setKnowngeneEnd(int newVal)
    {
        setKnowngeneEnd(new Integer(newVal));
    }

    /**
     * Determines if the knowngeneEnd has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isKnowngeneEndModified()
    {
        return knowngeneEndIsModified;
    }

    /**
     * Determines if the knowngeneEnd has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isKnowngeneEndInitialized()
    {
        return knowngeneEndIsInitialized;
    }

    /**
     * Getter method for knowngeneStart.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: mre.knowngene_start</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of knowngeneStart
     */
    public Integer getKnowngeneStart()
    {
        return knowngeneStart;
    }

    /**
     * Setter method for knowngeneStart.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to knowngeneStart
     */
    public void setKnowngeneStart(Integer newVal)
    {
        if ((newVal != null && knowngeneStart != null && (newVal.compareTo(knowngeneStart) == 0)) ||
            (newVal == null && knowngeneStart == null && knowngeneStartIsInitialized)) {
            return;
        }
        knowngeneStart = newVal;
        knowngeneStartIsModified = true;
        knowngeneStartIsInitialized = true;
    }

    /**
     * Setter method for knowngeneStart.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to knowngeneStart
     */
    public void setKnowngeneStart(int newVal)
    {
        setKnowngeneStart(new Integer(newVal));
    }

    /**
     * Determines if the knowngeneStart has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isKnowngeneStartModified()
    {
        return knowngeneStartIsModified;
    }

    /**
     * Determines if the knowngeneStart has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isKnowngeneStartInitialized()
    {
        return knowngeneStartIsInitialized;
    }

    /**
     * Getter method for knowngeneRef.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: mre.knowngene_ref</li>
     * <li> foreign key: knowngene.gene_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of knowngeneRef
     */
    public Integer getKnowngeneRef()
    {
        return knowngeneRef;
    }

    /**
     * Setter method for knowngeneRef.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to knowngeneRef
     */
    public void setKnowngeneRef(Integer newVal)
    {
        if ((newVal != null && knowngeneRef != null && (newVal.compareTo(knowngeneRef) == 0)) ||
            (newVal == null && knowngeneRef == null && knowngeneRefIsInitialized)) {
            return;
        }
        knowngeneRef = newVal;
        knowngeneRefIsModified = true;
        knowngeneRefIsInitialized = true;
    }

    /**
     * Setter method for knowngeneRef.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to knowngeneRef
     */
    public void setKnowngeneRef(int newVal)
    {
        setKnowngeneRef(new Integer(newVal));
    }

    /**
     * Determines if the knowngeneRef has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isKnowngeneRefModified()
    {
        return knowngeneRefIsModified;
    }

    /**
     * Determines if the knowngeneRef has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isKnowngeneRefInitialized()
    {
        return knowngeneRefIsInitialized;
    }

    /**
     * Getter method for mirnaRef.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: mre.mirna_ref</li>
     * <li> foreign key: mirna.mirna_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of mirnaRef
     */
    public Integer getMirnaRef()
    {
        return mirnaRef;
    }

    /**
     * Setter method for mirnaRef.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to mirnaRef
     */
    public void setMirnaRef(Integer newVal)
    {
        if ((newVal != null && mirnaRef != null && (newVal.compareTo(mirnaRef) == 0)) ||
            (newVal == null && mirnaRef == null && mirnaRefIsInitialized)) {
            return;
        }
        mirnaRef = newVal;
        mirnaRefIsModified = true;
        mirnaRefIsInitialized = true;
    }

    /**
     * Setter method for mirnaRef.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to mirnaRef
     */
    public void setMirnaRef(int newVal)
    {
        setMirnaRef(new Integer(newVal));
    }

    /**
     * Determines if the mirnaRef has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMirnaRefModified()
    {
        return mirnaRefIsModified;
    }

    /**
     * Determines if the mirnaRef has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMirnaRefInitialized()
    {
        return mirnaRefIsInitialized;
    }

    /**
     * Getter method for mreId.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: mre.mre_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of mreId
     */
    public Integer getMreId()
    {
        return mreId;
    }

    /**
     * Setter method for mreId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to mreId
     */
    public void setMreId(Integer newVal)
    {
        if ((newVal != null && mreId != null && (newVal.compareTo(mreId) == 0)) ||
            (newVal == null && mreId == null && mreIdIsInitialized)) {
            return;
        }
        mreId = newVal;
        mreIdIsModified = true;
        mreIdIsInitialized = true;
    }

    /**
     * Setter method for mreId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to mreId
     */
    public void setMreId(int newVal)
    {
        setMreId(new Integer(newVal));
    }

    /**
     * Determines if the mreId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMreIdModified()
    {
        return mreIdIsModified;
    }

    /**
     * Determines if the mreId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMreIdInitialized()
    {
        return mreIdIsInitialized;
    }

    /** The Knowngene referenced by this bean. */
    private KnowngeneBean referencedKnowngene;
    /** Getter method for KnowngeneBean. */
    public KnowngeneBean getKnowngeneBean() {
        return this.referencedKnowngene;
    }
    /** Setter method for KnowngeneBean. */
    public void setKnowngeneBean(KnowngeneBean reference) {
        this.referencedKnowngene = reference;
    }
    
    /** The Mirna referenced by this bean. */
    private MirnaBean referencedMirna;
    /** Getter method for MirnaBean. */
    public MirnaBean getMirnaBean() {
        return this.referencedMirna;
    }
    /** Setter method for MirnaBean. */
    public void setMirnaBean(MirnaBean reference) {
        this.referencedMirna = reference;
    }
    
    /** The MreType referenced by this bean. */
    private MreTypeBean referencedMreType;
    /** Getter method for MreTypeBean. */
    public MreTypeBean getMreTypeBean() {
        return this.referencedMreType;
    }
    /** Setter method for MreTypeBean. */
    public void setMreTypeBean(MreTypeBean reference) {
        this.referencedMreType = reference;
    }
    
    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return codon3FrequencyAaIsModified 		|| codon2FrequencyAaIsModified  		|| codon1FrequencyAaIsModified  		|| codon3FrequencyIsModified  		|| codon2FrequencyIsModified  		|| codon1FrequencyIsModified  		|| mreConservationLocalScoreIsModified  		|| mreFreeEnergyScoreIsModified  		|| mreConservationScoreIsModified  		|| chrEndIsModified  		|| chrStartIsModified  		|| strandIsModified  		|| chromosomIsModified  		|| mirnaEndIsModified  		|| mirnaStartIsModified  		|| mreSourceIsModified  		|| mreTypeRefIsModified  		|| knowngeneEndIsModified  		|| knowngeneStartIsModified  		|| knowngeneRefIsModified  		|| mirnaRefIsModified  		|| mreIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        codon3FrequencyAaIsModified = false;
        codon2FrequencyAaIsModified = false;
        codon1FrequencyAaIsModified = false;
        codon3FrequencyIsModified = false;
        codon2FrequencyIsModified = false;
        codon1FrequencyIsModified = false;
        mreConservationLocalScoreIsModified = false;
        mreFreeEnergyScoreIsModified = false;
        mreConservationScoreIsModified = false;
        chrEndIsModified = false;
        chrStartIsModified = false;
        strandIsModified = false;
        chromosomIsModified = false;
        mirnaEndIsModified = false;
        mirnaStartIsModified = false;
        mreSourceIsModified = false;
        mreTypeRefIsModified = false;
        knowngeneEndIsModified = false;
        knowngeneStartIsModified = false;
        knowngeneRefIsModified = false;
        mirnaRefIsModified = false;
        mreIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(MreBean bean)
    {
        setCodon3FrequencyAa(bean.getCodon3FrequencyAa());
        setCodon2FrequencyAa(bean.getCodon2FrequencyAa());
        setCodon1FrequencyAa(bean.getCodon1FrequencyAa());
        setCodon3Frequency(bean.getCodon3Frequency());
        setCodon2Frequency(bean.getCodon2Frequency());
        setCodon1Frequency(bean.getCodon1Frequency());
        setMreConservationLocalScore(bean.getMreConservationLocalScore());
        setMreFreeEnergyScore(bean.getMreFreeEnergyScore());
        setMreConservationScore(bean.getMreConservationScore());
        setChrEnd(bean.getChrEnd());
        setChrStart(bean.getChrStart());
        setStrand(bean.getStrand());
        setChromosom(bean.getChromosom());
        setMirnaEnd(bean.getMirnaEnd());
        setMirnaStart(bean.getMirnaStart());
        setMreSource(bean.getMreSource());
        setMreTypeRef(bean.getMreTypeRef());
        setKnowngeneEnd(bean.getKnowngeneEnd());
        setKnowngeneStart(bean.getKnowngeneStart());
        setKnowngeneRef(bean.getKnowngeneRef());
        setMirnaRef(bean.getMirnaRef());
        setMreId(bean.getMreId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map<String,String> getDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("codon3_frequency_aa", getCodon3FrequencyAa() == null ? "" : getCodon3FrequencyAa().toString());
        dictionnary.put("codon2_frequency_aa", getCodon2FrequencyAa() == null ? "" : getCodon2FrequencyAa().toString());
        dictionnary.put("codon1_frequency_aa", getCodon1FrequencyAa() == null ? "" : getCodon1FrequencyAa().toString());
        dictionnary.put("codon3_frequency", getCodon3Frequency() == null ? "" : getCodon3Frequency().toString());
        dictionnary.put("codon2_frequency", getCodon2Frequency() == null ? "" : getCodon2Frequency().toString());
        dictionnary.put("codon1_frequency", getCodon1Frequency() == null ? "" : getCodon1Frequency().toString());
        dictionnary.put("mre_conservation_local_score", getMreConservationLocalScore() == null ? "" : getMreConservationLocalScore().toString());
        dictionnary.put("mre_free_energy_score", getMreFreeEnergyScore() == null ? "" : getMreFreeEnergyScore().toString());
        dictionnary.put("mre_conservation_score", getMreConservationScore() == null ? "" : getMreConservationScore().toString());
        dictionnary.put("chr_end", getChrEnd() == null ? "" : getChrEnd().toString());
        dictionnary.put("chr_start", getChrStart() == null ? "" : getChrStart().toString());
        dictionnary.put("strand", getStrand() == null ? "" : getStrand().toString());
        dictionnary.put("chromosom", getChromosom() == null ? "" : getChromosom().toString());
        dictionnary.put("mirna_end", getMirnaEnd() == null ? "" : getMirnaEnd().toString());
        dictionnary.put("mirna_start", getMirnaStart() == null ? "" : getMirnaStart().toString());
        dictionnary.put("mre_source", getMreSource() == null ? "" : getMreSource().toString());
        dictionnary.put("mre_type_ref", getMreTypeRef() == null ? "" : getMreTypeRef().toString());
        dictionnary.put("knowngene_end", getKnowngeneEnd() == null ? "" : getKnowngeneEnd().toString());
        dictionnary.put("knowngene_start", getKnowngeneStart() == null ? "" : getKnowngeneStart().toString());
        dictionnary.put("knowngene_ref", getKnowngeneRef() == null ? "" : getKnowngeneRef().toString());
        dictionnary.put("mirna_ref", getMirnaRef() == null ? "" : getMirnaRef().toString());
        dictionnary.put("mre_id", getMreId() == null ? "" : getMreId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map<String,String> getPkDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("mre_id", getMreId() == null ? "" : getMreId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("codon3_frequency_aa".equalsIgnoreCase(column) || "codon3FrequencyAa".equalsIgnoreCase(column)) {
            return getCodon3FrequencyAa() == null ? "" : getCodon3FrequencyAa().toString();
        } else if ("codon2_frequency_aa".equalsIgnoreCase(column) || "codon2FrequencyAa".equalsIgnoreCase(column)) {
            return getCodon2FrequencyAa() == null ? "" : getCodon2FrequencyAa().toString();
        } else if ("codon1_frequency_aa".equalsIgnoreCase(column) || "codon1FrequencyAa".equalsIgnoreCase(column)) {
            return getCodon1FrequencyAa() == null ? "" : getCodon1FrequencyAa().toString();
        } else if ("codon3_frequency".equalsIgnoreCase(column) || "codon3Frequency".equalsIgnoreCase(column)) {
            return getCodon3Frequency() == null ? "" : getCodon3Frequency().toString();
        } else if ("codon2_frequency".equalsIgnoreCase(column) || "codon2Frequency".equalsIgnoreCase(column)) {
            return getCodon2Frequency() == null ? "" : getCodon2Frequency().toString();
        } else if ("codon1_frequency".equalsIgnoreCase(column) || "codon1Frequency".equalsIgnoreCase(column)) {
            return getCodon1Frequency() == null ? "" : getCodon1Frequency().toString();
        } else if ("mre_conservation_local_score".equalsIgnoreCase(column) || "mreConservationLocalScore".equalsIgnoreCase(column)) {
            return getMreConservationLocalScore() == null ? "" : getMreConservationLocalScore().toString();
        } else if ("mre_free_energy_score".equalsIgnoreCase(column) || "mreFreeEnergyScore".equalsIgnoreCase(column)) {
            return getMreFreeEnergyScore() == null ? "" : getMreFreeEnergyScore().toString();
        } else if ("mre_conservation_score".equalsIgnoreCase(column) || "mreConservationScore".equalsIgnoreCase(column)) {
            return getMreConservationScore() == null ? "" : getMreConservationScore().toString();
        } else if ("chr_end".equalsIgnoreCase(column) || "chrEnd".equalsIgnoreCase(column)) {
            return getChrEnd() == null ? "" : getChrEnd().toString();
        } else if ("chr_start".equalsIgnoreCase(column) || "chrStart".equalsIgnoreCase(column)) {
            return getChrStart() == null ? "" : getChrStart().toString();
        } else if ("strand".equalsIgnoreCase(column) || "strand".equalsIgnoreCase(column)) {
            return getStrand() == null ? "" : getStrand().toString();
        } else if ("chromosom".equalsIgnoreCase(column) || "chromosom".equalsIgnoreCase(column)) {
            return getChromosom() == null ? "" : getChromosom().toString();
        } else if ("mirna_end".equalsIgnoreCase(column) || "mirnaEnd".equalsIgnoreCase(column)) {
            return getMirnaEnd() == null ? "" : getMirnaEnd().toString();
        } else if ("mirna_start".equalsIgnoreCase(column) || "mirnaStart".equalsIgnoreCase(column)) {
            return getMirnaStart() == null ? "" : getMirnaStart().toString();
        } else if ("mre_source".equalsIgnoreCase(column) || "mreSource".equalsIgnoreCase(column)) {
            return getMreSource() == null ? "" : getMreSource().toString();
        } else if ("mre_type_ref".equalsIgnoreCase(column) || "mreTypeRef".equalsIgnoreCase(column)) {
            return getMreTypeRef() == null ? "" : getMreTypeRef().toString();
        } else if ("knowngene_end".equalsIgnoreCase(column) || "knowngeneEnd".equalsIgnoreCase(column)) {
            return getKnowngeneEnd() == null ? "" : getKnowngeneEnd().toString();
        } else if ("knowngene_start".equalsIgnoreCase(column) || "knowngeneStart".equalsIgnoreCase(column)) {
            return getKnowngeneStart() == null ? "" : getKnowngeneStart().toString();
        } else if ("knowngene_ref".equalsIgnoreCase(column) || "knowngeneRef".equalsIgnoreCase(column)) {
            return getKnowngeneRef() == null ? "" : getKnowngeneRef().toString();
        } else if ("mirna_ref".equalsIgnoreCase(column) || "mirnaRef".equalsIgnoreCase(column)) {
            return getMirnaRef() == null ? "" : getMirnaRef().toString();
        } else if ("mre_id".equalsIgnoreCase(column) || "mreId".equalsIgnoreCase(column)) {
            return getMreId() == null ? "" : getMreId().toString();
        }
        return "";
    }

    /**
	 * @see java.lang.Object#equals(Object)
	 */
	public boolean equals(Object object)
	{
		if (!(object instanceof MreBean)) {
			return false;
		}

		MreBean obj = (MreBean) object;
		return new EqualsBuilder()
            .append(getCodon3FrequencyAa(), obj.getCodon3FrequencyAa())
            .append(getCodon2FrequencyAa(), obj.getCodon2FrequencyAa())
            .append(getCodon1FrequencyAa(), obj.getCodon1FrequencyAa())
            .append(getCodon3Frequency(), obj.getCodon3Frequency())
            .append(getCodon2Frequency(), obj.getCodon2Frequency())
            .append(getCodon1Frequency(), obj.getCodon1Frequency())
            .append(getMreConservationLocalScore(), obj.getMreConservationLocalScore())
            .append(getMreFreeEnergyScore(), obj.getMreFreeEnergyScore())
            .append(getMreConservationScore(), obj.getMreConservationScore())
            .append(getChrEnd(), obj.getChrEnd())
            .append(getChrStart(), obj.getChrStart())
            .append(getStrand(), obj.getStrand())
            .append(getChromosom(), obj.getChromosom())
            .append(getMirnaEnd(), obj.getMirnaEnd())
            .append(getMirnaStart(), obj.getMirnaStart())
            .append(getMreSource(), obj.getMreSource())
            .append(getMreTypeRef(), obj.getMreTypeRef())
            .append(getKnowngeneEnd(), obj.getKnowngeneEnd())
            .append(getKnowngeneStart(), obj.getKnowngeneStart())
            .append(getKnowngeneRef(), obj.getKnowngeneRef())
            .append(getMirnaRef(), obj.getMirnaRef())
            .append(getMreId(), obj.getMreId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getCodon3FrequencyAa())
            .append(getCodon2FrequencyAa())
            .append(getCodon1FrequencyAa())
            .append(getCodon3Frequency())
            .append(getCodon2Frequency())
            .append(getCodon1Frequency())
            .append(getMreConservationLocalScore())
            .append(getMreFreeEnergyScore())
            .append(getMreConservationScore())
            .append(getChrEnd())
            .append(getChrStart())
            .append(getStrand())
            .append(getChromosom())
            .append(getMirnaEnd())
            .append(getMirnaStart())
            .append(getMreSource())
            .append(getMreTypeRef())
            .append(getKnowngeneEnd())
            .append(getKnowngeneStart())
            .append(getKnowngeneRef())
            .append(getMirnaRef())
            .append(getMreId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("codon3_frequency_aa", getCodon3FrequencyAa())
            .append("codon2_frequency_aa", getCodon2FrequencyAa())
            .append("codon1_frequency_aa", getCodon1FrequencyAa())
            .append("codon3_frequency", getCodon3Frequency())
            .append("codon2_frequency", getCodon2Frequency())
            .append("codon1_frequency", getCodon1Frequency())
            .append("mre_conservation_local_score", getMreConservationLocalScore())
            .append("mre_free_energy_score", getMreFreeEnergyScore())
            .append("mre_conservation_score", getMreConservationScore())
            .append("chr_end", getChrEnd())
            .append("chr_start", getChrStart())
            .append("strand", getStrand())
            .append("chromosom", getChromosom())
            .append("mirna_end", getMirnaEnd())
            .append("mirna_start", getMirnaStart())
            .append("mre_source", getMreSource())
            .append("mre_type_ref", getMreTypeRef())
            .append("knowngene_end", getKnowngeneEnd())
            .append("knowngene_start", getKnowngeneStart())
            .append("knowngene_ref", getKnowngeneRef())
            .append("mirna_ref", getMirnaRef())
            .append("mre_id", getMreId())
            .toString();
	}


    public int compareTo(Object object)
    {
        MreBean obj = (MreBean) object;
        return new CompareToBuilder()
            .append(getCodon3FrequencyAa(), obj.getCodon3FrequencyAa())
            .append(getCodon2FrequencyAa(), obj.getCodon2FrequencyAa())
            .append(getCodon1FrequencyAa(), obj.getCodon1FrequencyAa())
            .append(getCodon3Frequency(), obj.getCodon3Frequency())
            .append(getCodon2Frequency(), obj.getCodon2Frequency())
            .append(getCodon1Frequency(), obj.getCodon1Frequency())
            .append(getMreConservationLocalScore(), obj.getMreConservationLocalScore())
            .append(getMreFreeEnergyScore(), obj.getMreFreeEnergyScore())
            .append(getMreConservationScore(), obj.getMreConservationScore())
            .append(getChrEnd(), obj.getChrEnd())
            .append(getChrStart(), obj.getChrStart())
            .append(getStrand(), obj.getStrand())
            .append(getChromosom(), obj.getChromosom())
            .append(getMirnaEnd(), obj.getMirnaEnd())
            .append(getMirnaStart(), obj.getMirnaStart())
            .append(getMreSource(), obj.getMreSource())
            .append(getMreTypeRef(), obj.getMreTypeRef())
            .append(getKnowngeneEnd(), obj.getKnowngeneEnd())
            .append(getKnowngeneStart(), obj.getKnowngeneStart())
            .append(getKnowngeneRef(), obj.getKnowngeneRef())
            .append(getMirnaRef(), obj.getMirnaRef())
            .append(getMreId(), obj.getMreId())
            .toComparison();
   }
   
      /**
     * returns a Flat File styled w/o added line break:<br>
     * <code> John Doe, 33, false</code>
     * @return flat string representation of the MRE bean
     */
    public String toStringFlatFile() {
	return this.toStringFlatFile(this.getMreId());
    }

    /**
     * returns a Flat File styled w/o added line break:<br>
     * <code> John Doe, 33, false</code>
     * @param id - the mre id used for the database
     * @return flat string representation of the MRE bean
     */
    public String toStringFlatFile(int id) {
	return new ToStringBuilder(this, ToStringStyle.SIMPLE_STYLE)
        .append(id)
        .append(",", getMirnaRef())
        .append(",", getKnowngeneRef())
        .append(",", getKnowngeneStart())
        .append(",", getKnowngeneEnd())
        .append(",", getMreTypeRef())
        .append(",", getMreSource())
        .append(",", getMirnaStart())
        .append(",", getMirnaEnd())
        .append(",", getChromosom())
        .append(",", getStrand())
        .append(",", getChrStart())
        .append(",", getChrEnd())
        .append(",", getMreConservationScore())
        .append(",", getMreFreeEnergyScore())
        .append(",", getMreConservationLocalScore())
        .append(",", getCodon1Frequency())
        .append(",", getCodon2Frequency())
        .append(",", getCodon3Frequency())
        .append(",", getCodon1FrequencyAa())
        .append(",", getCodon2FrequencyAa())
        .append(",", getCodon3FrequencyAa())
        .toString();
    }
    
    /**
     * returns a Flat File styled w/o added line break:<br>
     * <code> John Doe, 33, false</code>
     * @param id - the mre id used for the database
     * @return flat string representation of the MRE bean
     */
    public String toStringFlatFileSimple() {
	return new ToStringBuilder(this, ToStringStyle.SIMPLE_STYLE)
        .append(getMirnaIdString())
        .append(",", getSequenceIdString())
        .append(",", getKnowngeneStart())
        .append(",", getKnowngeneEnd())
        .append(",", getMreTypeRef())
        .append(",", getMirnaStart())
        .append(",", getMirnaEnd())
        .toString();
    }
    
    private String mirnaIdString;
    private String sequenceIdString;

    /**
     * @return the mreIdString
     */
    public String getMirnaIdString() {
        return mirnaIdString;
    }

    /**
     * @param mreIdString the mreIdString to set
     */
    public void setMirnaIdString(String mirnaIdString) {
        this.mirnaIdString = mirnaIdString;
    }

    /**
     * @return the sequenceIdString
     */
    public String getSequenceIdString() {
        return sequenceIdString;
    }
    
    /**
     * @param sequenceIdString the sequenceIdString to set
     */
    public void setSequenceIdString(String sequenceIdString) {
//	System.out.println(sequenceIdString);
        this.sequenceIdString = sequenceIdString;
    }

}
