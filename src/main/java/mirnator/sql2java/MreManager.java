// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package mirnator.sql2java;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.List;
import java.util.ArrayList;

import mirnator.sql2java.Manager;
import mirnator.sql2java.exception.DAOException;
import mirnator.sql2java.exception.DataAccessException;
import mirnator.sql2java.exception.ObjectRetrievalException;
import mirnator.sql2java.KnowngeneBean;
import mirnator.sql2java.KnowngeneManager;
import mirnator.sql2java.MirnaBean;
import mirnator.sql2java.MirnaManager;
import mirnator.sql2java.MreTypeBean;
import mirnator.sql2java.MreTypeManager;

/**
 * Handles database calls (save, load, count, etc...) for the mre table.
 * @author sql2java
 */
public class MreManager 
{

    /* set =QUERY for loadUsingTemplate */
    public static final int SEARCH_EXACT = 0;
    /* set %QUERY% for loadLikeTemplate */
    public static final int SEARCH_LIKE = 1;
    /* set %QUERY for loadLikeTemplate */
    public static final int SEARCH_STARTING_LIKE = 2;
    /* set QUERY% for loadLikeTemplate */
    public static final int SEARCH_ENDING_LIKE = 3;

    /**
     * Identify the codon3_frequency_aa field.
     */
    public static final int ID_CODON3_FREQUENCY_AA = 0;

    /**
     * Identify the codon2_frequency_aa field.
     */
    public static final int ID_CODON2_FREQUENCY_AA = 1;

    /**
     * Identify the codon1_frequency_aa field.
     */
    public static final int ID_CODON1_FREQUENCY_AA = 2;

    /**
     * Identify the codon3_frequency field.
     */
    public static final int ID_CODON3_FREQUENCY = 3;

    /**
     * Identify the codon2_frequency field.
     */
    public static final int ID_CODON2_FREQUENCY = 4;

    /**
     * Identify the codon1_frequency field.
     */
    public static final int ID_CODON1_FREQUENCY = 5;

    /**
     * Identify the mre_conservation_local_score field.
     */
    public static final int ID_MRE_CONSERVATION_LOCAL_SCORE = 6;

    /**
     * Identify the mre_free_energy_score field.
     */
    public static final int ID_MRE_FREE_ENERGY_SCORE = 7;

    /**
     * Identify the mre_conservation_score field.
     */
    public static final int ID_MRE_CONSERVATION_SCORE = 8;

    /**
     * Identify the chr_end field.
     */
    public static final int ID_CHR_END = 9;

    /**
     * Identify the chr_start field.
     */
    public static final int ID_CHR_START = 10;

    /**
     * Identify the strand field.
     */
    public static final int ID_STRAND = 11;

    /**
     * Identify the chromosom field.
     */
    public static final int ID_CHROMOSOM = 12;

    /**
     * Identify the mirna_end field.
     */
    public static final int ID_MIRNA_END = 13;

    /**
     * Identify the mirna_start field.
     */
    public static final int ID_MIRNA_START = 14;

    /**
     * Identify the mre_source field.
     */
    public static final int ID_MRE_SOURCE = 15;

    /**
     * Identify the mre_type_ref field.
     */
    public static final int ID_MRE_TYPE_REF = 16;

    /**
     * Identify the knowngene_end field.
     */
    public static final int ID_KNOWNGENE_END = 17;

    /**
     * Identify the knowngene_start field.
     */
    public static final int ID_KNOWNGENE_START = 18;

    /**
     * Identify the knowngene_ref field.
     */
    public static final int ID_KNOWNGENE_REF = 19;

    /**
     * Identify the mirna_ref field.
     */
    public static final int ID_MIRNA_REF = 20;

    /**
     * Identify the mre_id field.
     */
    public static final int ID_MRE_ID = 21;

    /**
     * Contains all the full fields of the mre table.
     */
    private static final String[] FULL_FIELD_NAMES =
    {
        "mre.codon3_frequency_aa"
        ,"mre.codon2_frequency_aa"
        ,"mre.codon1_frequency_aa"
        ,"mre.codon3_frequency"
        ,"mre.codon2_frequency"
        ,"mre.codon1_frequency"
        ,"mre.mre_conservation_local_score"
        ,"mre.mre_free_energy_score"
        ,"mre.mre_conservation_score"
        ,"mre.chr_end"
        ,"mre.chr_start"
        ,"mre.strand"
        ,"mre.chromosom"
        ,"mre.mirna_end"
        ,"mre.mirna_start"
        ,"mre.mre_source"
        ,"mre.mre_type_ref"
        ,"mre.knowngene_end"
        ,"mre.knowngene_start"
        ,"mre.knowngene_ref"
        ,"mre.mirna_ref"
        ,"mre.mre_id"
    };

    /**
     * Contains all the fields of the mre table.
     */
    public static final String[] FIELD_NAMES =
    {
        "codon3_frequency_aa"
        ,"codon2_frequency_aa"
        ,"codon1_frequency_aa"
        ,"codon3_frequency"
        ,"codon2_frequency"
        ,"codon1_frequency"
        ,"mre_conservation_local_score"
        ,"mre_free_energy_score"
        ,"mre_conservation_score"
        ,"chr_end"
        ,"chr_start"
        ,"strand"
        ,"chromosom"
        ,"mirna_end"
        ,"mirna_start"
        ,"mre_source"
        ,"mre_type_ref"
        ,"knowngene_end"
        ,"knowngene_start"
        ,"knowngene_ref"
        ,"mirna_ref"
        ,"mre_id"
    };

    /**
     * Field that contains the comma separated fields of the mre table.
     */
    public static final String ALL_FULL_FIELDS = "mre.codon3_frequency_aa"
                            + ",mre.codon2_frequency_aa"
                            + ",mre.codon1_frequency_aa"
                            + ",mre.codon3_frequency"
                            + ",mre.codon2_frequency"
                            + ",mre.codon1_frequency"
                            + ",mre.mre_conservation_local_score"
                            + ",mre.mre_free_energy_score"
                            + ",mre.mre_conservation_score"
                            + ",mre.chr_end"
                            + ",mre.chr_start"
                            + ",mre.strand"
                            + ",mre.chromosom"
                            + ",mre.mirna_end"
                            + ",mre.mirna_start"
                            + ",mre.mre_source"
                            + ",mre.mre_type_ref"
                            + ",mre.knowngene_end"
                            + ",mre.knowngene_start"
                            + ",mre.knowngene_ref"
                            + ",mre.mirna_ref"
                            + ",mre.mre_id";

    /**
     * Field that contains the comma separated fields of the mre table.
     */
    public static final String ALL_FIELDS = "codon3_frequency_aa"
                            + ",codon2_frequency_aa"
                            + ",codon1_frequency_aa"
                            + ",codon3_frequency"
                            + ",codon2_frequency"
                            + ",codon1_frequency"
                            + ",mre_conservation_local_score"
                            + ",mre_free_energy_score"
                            + ",mre_conservation_score"
                            + ",chr_end"
                            + ",chr_start"
                            + ",strand"
                            + ",chromosom"
                            + ",mirna_end"
                            + ",mirna_start"
                            + ",mre_source"
                            + ",mre_type_ref"
                            + ",knowngene_end"
                            + ",knowngene_start"
                            + ",knowngene_ref"
                            + ",mirna_ref"
                            + ",mre_id";

    private static MreManager singleton = new MreManager();

    /**
     * Get the MreManager singleton.
     *
     * @return MreManager
     */
    public static MreManager getInstance()
    {
        return singleton;
    }


    /**
     * Creates a new MreBean instance.
     *
     * @return the new MreBean
     */
    public MreBean createMreBean()
    {
        return new MreBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a MreBean from the mre using its key fields.
     *
     * @param mreId Integer - PK# 1
     * @return a unique MreBean
     * @throws DAOException
     */
    //1
    public MreBean loadByPrimaryKey(Integer mreId) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("SELECT " + ALL_FIELDS + " FROM mre WHERE mre_id=?");
            // System.out.println("loadByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (mreId == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, mreId); }
            List<MreBean> pReturn = this.loadByPreparedStatementAsList(ps);
            if (pReturn.size() == 0) {
                throw new ObjectRetrievalException();
            } else {
                return pReturn.get(0);
            }
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @param mreId Integer - PK# 1
     * @return the number of deleted rows
     * @throws DAOException
     */
    //2
    public int deleteByPrimaryKey(Integer mreId) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("DELETE FROM mre WHERE mre_id=?");
            // System.out.println("deleteByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (mreId == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, mreId); }
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }


    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the KnowngeneBean object from the mre.knowngene_ref field.
     *
     * @param bean the MreBean
     * @return the associated KnowngeneBean bean
     * @throws DAOException
     */
    //3.2 GET IMPORTED VALUES
    public KnowngeneBean getKnowngeneBean(MreBean bean) throws DAOException
    {
        KnowngeneBean other = KnowngeneManager.getInstance().createKnowngeneBean();
        other.setGeneId(bean.getKnowngeneRef()); 
        bean.setKnowngeneBean(KnowngeneManager.getInstance().loadUniqueUsingTemplate(other)); 
        return bean.getKnowngeneBean();
    }

    /**
     * Associates the MreBean object to the KnowngeneBean object.
     *
     * @param bean the MreBean object to use
     * @param beanToSet the KnowngeneBean object to associate to the MreBean
     * @return the associated KnowngeneBean bean
     * @throws Exception
     */
    //4.2 ADD IMPORTED VALUE
    public KnowngeneBean addKnowngeneBean(KnowngeneBean beanToSet, MreBean bean) throws Exception
    {
        beanToSet.setGeneId(bean.getKnowngeneRef());
        return KnowngeneManager.getInstance().save(beanToSet);
    }

    /**
     * Associates the MreBean object to the KnowngeneBean object.
     *
     * @param bean the MreBean object to use
     * @param beanToSet the KnowngeneBean object to associate to the MreBean
     * @return the associated KnowngeneBean bean
     * @throws Exception
     */
    //5.2 SET IMPORTED
    public KnowngeneBean setKnowngeneBean(MreBean bean, KnowngeneBean beanToSet) throws Exception
    {
        bean.setKnowngeneRef(beanToSet.getGeneId());
        return KnowngeneManager.getInstance().save(beanToSet);
    }

    /**
     * Retrieves the MirnaBean object from the mre.mirna_ref field.
     *
     * @param bean the MreBean
     * @return the associated MirnaBean bean
     * @throws DAOException
     */
    //3.2 GET IMPORTED VALUES
    public MirnaBean getMirnaBean(MreBean bean) throws DAOException
    {
        MirnaBean other = MirnaManager.getInstance().createMirnaBean();
        other.setMirnaId(bean.getMirnaRef()); 
        bean.setMirnaBean(MirnaManager.getInstance().loadUniqueUsingTemplate(other)); 
        return bean.getMirnaBean();
    }

    /**
     * Associates the MreBean object to the MirnaBean object.
     *
     * @param bean the MreBean object to use
     * @param beanToSet the MirnaBean object to associate to the MreBean
     * @return the associated MirnaBean bean
     * @throws Exception
     */
    //4.2 ADD IMPORTED VALUE
    public MirnaBean addMirnaBean(MirnaBean beanToSet, MreBean bean) throws Exception
    {
        beanToSet.setMirnaId(bean.getMirnaRef());
        return MirnaManager.getInstance().save(beanToSet);
    }

    /**
     * Associates the MreBean object to the MirnaBean object.
     *
     * @param bean the MreBean object to use
     * @param beanToSet the MirnaBean object to associate to the MreBean
     * @return the associated MirnaBean bean
     * @throws Exception
     */
    //5.2 SET IMPORTED
    public MirnaBean setMirnaBean(MreBean bean, MirnaBean beanToSet) throws Exception
    {
        bean.setMirnaRef(beanToSet.getMirnaId());
        return MirnaManager.getInstance().save(beanToSet);
    }

    /**
     * Retrieves the MreTypeBean object from the mre.mre_type_ref field.
     *
     * @param bean the MreBean
     * @return the associated MreTypeBean bean
     * @throws DAOException
     */
    //3.2 GET IMPORTED VALUES
    public MreTypeBean getMreTypeBean(MreBean bean) throws DAOException
    {
        MreTypeBean other = MreTypeManager.getInstance().createMreTypeBean();
        other.setMreTypeId(bean.getMreTypeRef()); 
        bean.setMreTypeBean(MreTypeManager.getInstance().loadUniqueUsingTemplate(other)); 
        return bean.getMreTypeBean();
    }

    /**
     * Associates the MreBean object to the MreTypeBean object.
     *
     * @param bean the MreBean object to use
     * @param beanToSet the MreTypeBean object to associate to the MreBean
     * @return the associated MreTypeBean bean
     * @throws Exception
     */
    //4.2 ADD IMPORTED VALUE
    public MreTypeBean addMreTypeBean(MreTypeBean beanToSet, MreBean bean) throws Exception
    {
        beanToSet.setMreTypeId(bean.getMreTypeRef());
        return MreTypeManager.getInstance().save(beanToSet);
    }

    /**
     * Associates the MreBean object to the MreTypeBean object.
     *
     * @param bean the MreBean object to use
     * @param beanToSet the MreTypeBean object to associate to the MreBean
     * @return the associated MreTypeBean bean
     * @throws Exception
     */
    //5.2 SET IMPORTED
    public MreTypeBean setMreTypeBean(MreBean bean, MreTypeBean beanToSet) throws Exception
    {
        bean.setMreTypeRef(beanToSet.getMreTypeId());
        return MreTypeManager.getInstance().save(beanToSet);
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from mre.
     *
     * @return an array of MreManager bean
     * @throws DAOException
     */
    //5
    public MreBean[] loadAll() throws DAOException
    {
        return this.loadUsingTemplate(null);
    }

    /**
     * Loads all the rows from mre.
     *
     * @return a list of MreManager bean
     * @throws DAOException
     */
    //5
    public List<MreBean> loadAllAsList() throws DAOException
    {
        return this.loadUsingTemplateAsList(null);
    }


    /**
     * Loads the given number of rows from mre, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return an array of MreManager bean
     * @throws DAOException
     */
    //6
    public MreBean[] loadAll(int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(null, startRow, numRows);
    }

    /**
     * Loads the given number of rows from mre, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return a list of MreManager bean
     * @throws DAOException
     */
    //6
    public List<MreBean> loadAllAsList(int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplateAsList(null, startRow, numRows);
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of MreBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting MreBean table
     * @throws DAOException
     */
    //7
    public MreBean[] loadByWhere(String where) throws DAOException
    {
        return this.loadByWhere(where, null);
    }
    /**
     * Retrieves a list of MreBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting MreBean table
     * @throws DAOException
     */
    //7
    public List<MreBean> loadByWhereAsList(String where) throws DAOException
    {
        return this.loadByWhereAsList(where, null);
    }

    /**
     * Retrieves an array of MreBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return the resulting MreBean table
     * @throws DAOException
     */
    //8
    public MreBean[] loadByWhere(String where, int[] fieldList) throws DAOException
    {
        return this.loadByWhere(where, fieldList, 1, -1);
    }


    /**
     * Retrieves a list of MreBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return the resulting MreBean table
     * @throws DAOException
     */
    //8
    public List<MreBean> loadByWhereAsList(String where, int[] fieldList) throws DAOException
    {
        return this.loadByWhereAsList(where, fieldList, 1, -1);
    }

    /**
     * Retrieves an array of MreBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return the resulting MreBean table
     * @throws DAOException
     */
    //9
    public MreBean[] loadByWhere(String where, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        return (MreBean[]) this.loadByWhereAsList(where, fieldList, startRow, numRows).toArray(new MreBean[0]);
    }

    /**
     * Retrieves a list of MreBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return the resulting MreBean table
     * @throws DAOException
     */
    //9
    public List<MreBean> loadByWhereAsList(String where, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        StringBuffer sql = new StringBuffer(128);
        if(fieldList == null) {
            sql.append("SELECT ").append(ALL_FIELDS).append(" FROM mre ").append(where);
        } else
        {
            sql.append("SELECT ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0) {
                    sql.append(",");
                }
                sql.append(FULL_FIELD_NAMES[fieldList[i]]);
            }
            sql.append(" FROM mre ");
            sql.append(where);
        }
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        // System.out.println("loadByWhere: " + sql);
        try
        {
            c = this.getConnection();
            st = c.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rs = st.executeQuery(sql.toString());
            return this.decodeResultSetAsList(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(st, rs);
            this.freeConnection(c);
        }
    }


    /**
     * Deletes all rows from mre table.
     * @return the number of deleted rows.
     * @throws DAOException
     */
    //10
    public int deleteAll() throws DAOException
    {
        return this.deleteByWhere("");
    }


    /**
     * Deletes rows from the mre table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     * @throws DAOException
     */
    //11
    public int deleteByWhere(String where) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("DELETE FROM mre " + where);
            // System.out.println("deleteByWhere: " + sql);
            ps = c.prepareStatement(sql.toString());
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the MreBean bean into the database.
     *
     * @param bean the MreBean bean to be saved
     * @return the inserted or updated bean
     * @throws DAOException
     */
    //12
    public MreBean save(MreBean bean) throws DAOException
    {
        if (bean.isNew()) {
            return this.insert(bean);
        } else {
            return this.update(bean);
        }
    }

    /**
     * Insert the MreBean bean into the database.
     *
     * @param bean the MreBean bean to be saved
     * @return the inserted bean
     * @throws DAOException
     */
    //13
    public MreBean insert(MreBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (!bean.isNew()){
            return this.update(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = null;

        try
        {
            c = this.getConnection();
            if (!bean.isMreIdModified())
            {
                StringBuilder hint = new StringBuilder("SELECT nextval('mre_mre_id_SEQ')");
                // System.out.println("generatedKey : " + hint);

                ps = c.prepareStatement(hint.toString());
                ResultSet rs = null;
                try
                {
                    rs = ps.executeQuery();
                    if(rs.next()) {
                        bean.setMreId(Manager.getInteger(rs, 1));
                    } else {
                        this.getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                }
                finally
                {
                    this.getManager().close(ps, rs);
                    ps=null;
                }
            }
            this.beforeInsert(bean); // listener callback
            int _dirtyCount = 0;
            sql = new StringBuilder("INSERT into mre (");

            if (bean.isCodon3FrequencyAaModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("codon3_frequency_aa");
                _dirtyCount++;
            }

            if (bean.isCodon2FrequencyAaModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("codon2_frequency_aa");
                _dirtyCount++;
            }

            if (bean.isCodon1FrequencyAaModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("codon1_frequency_aa");
                _dirtyCount++;
            }

            if (bean.isCodon3FrequencyModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("codon3_frequency");
                _dirtyCount++;
            }

            if (bean.isCodon2FrequencyModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("codon2_frequency");
                _dirtyCount++;
            }

            if (bean.isCodon1FrequencyModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("codon1_frequency");
                _dirtyCount++;
            }

            if (bean.isMreConservationLocalScoreModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("mre_conservation_local_score");
                _dirtyCount++;
            }

            if (bean.isMreFreeEnergyScoreModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("mre_free_energy_score");
                _dirtyCount++;
            }

            if (bean.isMreConservationScoreModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("mre_conservation_score");
                _dirtyCount++;
            }

            if (bean.isChrEndModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("chr_end");
                _dirtyCount++;
            }

            if (bean.isChrStartModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("chr_start");
                _dirtyCount++;
            }

            if (bean.isStrandModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("strand");
                _dirtyCount++;
            }

            if (bean.isChromosomModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("chromosom");
                _dirtyCount++;
            }

            if (bean.isMirnaEndModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("mirna_end");
                _dirtyCount++;
            }

            if (bean.isMirnaStartModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("mirna_start");
                _dirtyCount++;
            }

            if (bean.isMreSourceModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("mre_source");
                _dirtyCount++;
            }

            if (bean.isMreTypeRefModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("mre_type_ref");
                _dirtyCount++;
            }

            if (bean.isKnowngeneEndModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("knowngene_end");
                _dirtyCount++;
            }

            if (bean.isKnowngeneStartModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("knowngene_start");
                _dirtyCount++;
            }

            if (bean.isKnowngeneRefModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("knowngene_ref");
                _dirtyCount++;
            }

            if (bean.isMirnaRefModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("mirna_ref");
                _dirtyCount++;
            }

            if (bean.isMreIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("mre_id");
                _dirtyCount++;
            }

            sql.append(") values (");
            if(_dirtyCount > 0) {
                sql.append("?");
                for(int i = 1; i < _dirtyCount; i++) {
                    sql.append(",?");
                }
            }
            sql.append(")");


            // System.out.println("insert : " + sql.toString());

            ps = c.prepareStatement(sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            ps.executeUpdate();

            bean.isNew(false);
            bean.resetIsModified();
            this.afterInsert(bean); // listener callback
            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Update the MreBean bean record in the database according to the changes.
     *
     * @param bean the MreBean bean to be updated
     * @return the updated bean
     * @throws DAOException
     */
    //14
    public MreBean update(MreBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (bean.isNew()){
            return this.insert(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = null;

        try
        {
            c = this.getConnection();

            this.beforeUpdate(bean); // listener callback
            sql = new StringBuilder("UPDATE mre SET ");
            boolean useComma=false;

            if (bean.isCodon3FrequencyAaModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("codon3_frequency_aa=?");
            }

            if (bean.isCodon2FrequencyAaModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("codon2_frequency_aa=?");
            }

            if (bean.isCodon1FrequencyAaModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("codon1_frequency_aa=?");
            }

            if (bean.isCodon3FrequencyModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("codon3_frequency=?");
            }

            if (bean.isCodon2FrequencyModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("codon2_frequency=?");
            }

            if (bean.isCodon1FrequencyModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("codon1_frequency=?");
            }

            if (bean.isMreConservationLocalScoreModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("mre_conservation_local_score=?");
            }

            if (bean.isMreFreeEnergyScoreModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("mre_free_energy_score=?");
            }

            if (bean.isMreConservationScoreModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("mre_conservation_score=?");
            }

            if (bean.isChrEndModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("chr_end=?");
            }

            if (bean.isChrStartModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("chr_start=?");
            }

            if (bean.isStrandModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("strand=?");
            }

            if (bean.isChromosomModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("chromosom=?");
            }

            if (bean.isMirnaEndModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("mirna_end=?");
            }

            if (bean.isMirnaStartModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("mirna_start=?");
            }

            if (bean.isMreSourceModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("mre_source=?");
            }

            if (bean.isMreTypeRefModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("mre_type_ref=?");
            }

            if (bean.isKnowngeneEndModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("knowngene_end=?");
            }

            if (bean.isKnowngeneStartModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("knowngene_start=?");
            }

            if (bean.isKnowngeneRefModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("knowngene_ref=?");
            }

            if (bean.isMirnaRefModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("mirna_ref=?");
            }

            if (bean.isMreIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("mre_id=?");
            }
            sql.append(" WHERE ");
            sql.append("mre_id=?");
            // System.out.println("update : " + sql.toString());
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);

            int _dirtyCount = this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            if (_dirtyCount == 0) {
                // System.out.println("The bean to look is not initialized... do not update.");
                return bean;
            }

            if (bean.getMreId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getMreId()); }
            ps.executeUpdate();
            bean.resetIsModified();
            this.afterUpdate(bean); // listener callback

            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Saves an array of MreBean beans into the database.
     *
     * @param beans the MreBean bean table to be saved
     * @return the saved MreBean array.
     * @throws DAOException
     */
    //15
    public MreBean[] save(MreBean[] beans) throws DAOException
    {
        for (MreBean bean : beans) 
        {
            this.save(bean);
        }
        return beans;
    }

    /**
     * Saves a list of MreBean beans into the database.
     *
     * @param beans the MreBean bean table to be saved
     * @return the saved MreBean array.
     * @throws DAOException
     */
    //15
    public List<MreBean> save(List<MreBean> beans) throws DAOException
    {
        for (MreBean bean : beans) 
        {
            this.save(bean);
        }
        return beans;
    }

    /**
     * Insert an array of MreBean beans into the database.
     *
     * @param beans the MreBean bean table to be inserted
     * @return the saved MreBean array.
     * @throws DAOException
     */
    //16
    public MreBean[] insert(MreBean[] beans) throws DAOException
    {
        return this.save(beans);
    }

    /**
     * Insert a list of MreBean beans into the database.
     *
     * @param beans the MreBean bean table to be inserted
     * @return the saved MreBean array.
     * @throws DAOException
     */
    //16
    public List<MreBean> insert(List<MreBean> beans) throws DAOException
    {
        return this.save(beans);
    }

    /**
     * Updates an array of MreBean beans into the database.
     *
     * @param beans the MreBean bean table to be inserted
     * @return the saved MreBean array.
     * @throws DAOException
     */
    //17
    public MreBean[] update(MreBean[] beans) throws DAOException
    {
        return this.save(beans);
    }

    /**
     * Updates a list of MreBean beans into the database.
     *
     * @param beans the MreBean bean table to be inserted
     * @return the saved MreBean array.
     * @throws DAOException
     */
    //17
    public List<MreBean> update(List<MreBean> beans) throws DAOException
    {
        return this.save(beans);
    }
    

    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    /**
     * Loads a unique MreBean bean from a template one giving a c
     *
     * @param bean the MreBean bean to look for
     * @return the bean matching the template
     * @throws DAOException
     */
    //18
    public MreBean loadUniqueUsingTemplate(MreBean bean) throws DAOException
    {
         MreBean[] beans = this.loadUsingTemplate(bean);
         if (beans.length == 0) {
             return null;
         }
         if (beans.length > 1) {
             throw new ObjectRetrievalException("More than one element !!");
         }
         return beans[0];
     }

    /**
     * Loads an array of MreBean from a template one.
     *
     * @param bean the MreBean template to look for
     * @return all the MreBean matching the template
     * @throws DAOException
     */
    //19
    public MreBean[] loadUsingTemplate(MreBean bean) throws DAOException
    {
        return this.loadUsingTemplate(bean, 1, -1);
    }

    /**
     * Loads a list of MreBean from a template one.
     *
     * @param bean the MreBean template to look for
     * @return all the MreBean matching the template
     * @throws DAOException
     */
    //19
    public List<MreBean> loadUsingTemplateAsList(MreBean bean) throws DAOException
    {
        return this.loadUsingTemplateAsList(bean, 1, -1);
    }

    /**
     * Loads an array of MreBean from a template one, given the start row and number of rows.
     *
     * @param bean the MreBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the MreBean matching the template
     * @throws DAOException
     */
    //20
    public MreBean[] loadUsingTemplate(MreBean bean, int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * Loads a list of MreBean from a template one, given the start row and number of rows.
     *
     * @param bean the MreBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the MreBean matching the template
     * @throws DAOException
     */
    //20
    public List<MreBean> loadUsingTemplateAsList(MreBean bean, int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplateAsList(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * Loads an array of MreBean from a template one, given the start row and number of rows.
     *
     * @param bean the MreBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return all the MreBean matching the template
     * @throws DAOException
     */
    //20
    public MreBean[] loadUsingTemplate(MreBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
    	return (MreBean[])this.loadUsingTemplateAsList(bean, startRow, numRows, searchType).toArray(new MreBean[0]);
    }

    /**
     * Loads a list of MreBean from a template one, given the start row and number of rows.
     *
     * @param bean the MreBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return all the MreBean matching the template
     * @throws DAOException
     */
    //20
    public List<MreBean> loadUsingTemplateAsList(MreBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
        // System.out.println("loadUsingTemplate startRow:" + startRow + ", numRows:" + numRows + ", searchType:" + searchType);
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer(128);
        sql.append("SELECT ").append(ALL_FIELDS).append(" FROM mre ");
        StringBuilder sqlWhere = new StringBuilder("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, searchType) > 0)
            {
                sql.append(" WHERE ").append(sqlWhere);
            }
            else
            {
                // System.out.println("The bean to look is not initialized... loading all");
            }
            // System.out.println("loadUsingTemplate: " + sql.toString());

            c = this.getConnection();
            int scrollType = ResultSet.TYPE_SCROLL_INSENSITIVE;
            if (startRow != 1) {
                scrollType = ResultSet.TYPE_SCROLL_SENSITIVE;
            }
            ps = c.prepareStatement(sql.toString(),
                                    scrollType,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            ps.executeQuery();
            return this.loadByPreparedStatementAsList(ps, null, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    /**
     * Deletes rows using a MreBean template.
     *
     * @param bean the MreBean object(s) to be deleted
     * @return the number of deleted objects
     * @throws DAOException
     */
    //21
    public int deleteUsingTemplate(MreBean bean) throws DAOException
    {
        if (bean.isMreIdInitialized()) {
            return this.deleteByPrimaryKey(bean.getMreId());
        }
        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = new StringBuilder("DELETE FROM mre ");
        StringBuilder sqlWhere = new StringBuilder("");

        try
        {
            this.beforeDelete(bean); // listener callback
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0)
            {
                sql.append(" WHERE ").append(sqlWhere);
            }
            else
            {
                // System.out.println("The bean to look is not initialized... deleting all");
            }
            // System.out.println("deleteUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            int _rows = ps.executeUpdate();
            this.afterDelete(bean); // listener callback
            return _rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }



    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________

    /**
     * Retrieves the number of rows of the table mre.
     *
     * @return the number of rows returned
     * @throws DAOException
     */
    //24
    public int countAll() throws DAOException
    {
        return this.countWhere("");
    }

    /**
     * Retrieves the number of rows of the table mre with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     * @throws DAOException
     */
    //25
    public int countWhere(String where) throws DAOException
    {
        String sql = "SELECT COUNT(*) AS MCOUNT FROM mre " + where;
        // System.out.println("countWhere: " + sql);
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            c = this.getConnection();
            st = c.createStatement();
            rs =  st.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(st, rs);
            this.freeConnection(c);
            sql = null;
        }
        throw new DataAccessException("Error in countWhere where=[" + where + "]");
    }

    /**
     * Retrieves the number of rows of the table mre with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     * @throws DAOException
     */
    //26
    private int countByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next()) {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
       throw new DataAccessException("Error in countByPreparedStatement");
    }

    /**
     * count the number of elements of a specific MreBean bean
     *
     * @param bean the MreBean bean to look for ant count
     * @return the number of rows returned
     * @throws DAOException
     */
    //27
    public int countUsingTemplate(MreBean bean) throws DAOException
    {
        return this.countUsingTemplate(bean, -1, -1);
    }

    /**
     * count the number of elements of a specific MreBean bean , given the start row and number of rows.
     *
     * @param bean the MreBean template to look for and count
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(MreBean bean, int startRow, int numRows) throws DAOException
    {
        return this.countUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * count the number of elements of a specific MreBean bean given the start row and number of rows and the search type
     *
     * @param bean the MreBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(MreBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = new StringBuilder("SELECT COUNT(*) AS MCOUNT FROM mre");
        StringBuilder sqlWhere = new StringBuilder("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0)
            {
                sql.append(" WHERE ").append(sqlWhere);
            }
            else
            {
                // System.out.println("The bean to look is not initialized... counting all...");
            }
            // System.out.println("countUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            return this.countByPreparedStatement(ps);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    //


    /**
     * fills the given StringBuilder with the sql where clausis constructed using the bean and the search type
     * @param sqlWhere the StringBuilder that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     */
    protected int fillWhere(StringBuilder sqlWhere, MreBean bean, int searchType)
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        String sqlEqualsOperation = "=";
        if (searchType != SEARCH_EXACT) {
            sqlEqualsOperation = " like ";
        }
        try
        {
            if (bean.isCodon3FrequencyAaModified()) {
                _dirtyCount ++;
                if (bean.getCodon3FrequencyAa() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("codon3_frequency_aa IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("codon3_frequency_aa = ?");
                }
            }
            if (bean.isCodon2FrequencyAaModified()) {
                _dirtyCount ++;
                if (bean.getCodon2FrequencyAa() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("codon2_frequency_aa IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("codon2_frequency_aa = ?");
                }
            }
            if (bean.isCodon1FrequencyAaModified()) {
                _dirtyCount ++;
                if (bean.getCodon1FrequencyAa() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("codon1_frequency_aa IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("codon1_frequency_aa = ?");
                }
            }
            if (bean.isCodon3FrequencyModified()) {
                _dirtyCount ++;
                if (bean.getCodon3Frequency() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("codon3_frequency IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("codon3_frequency = ?");
                }
            }
            if (bean.isCodon2FrequencyModified()) {
                _dirtyCount ++;
                if (bean.getCodon2Frequency() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("codon2_frequency IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("codon2_frequency = ?");
                }
            }
            if (bean.isCodon1FrequencyModified()) {
                _dirtyCount ++;
                if (bean.getCodon1Frequency() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("codon1_frequency IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("codon1_frequency = ?");
                }
            }
            if (bean.isMreConservationLocalScoreModified()) {
                _dirtyCount ++;
                if (bean.getMreConservationLocalScore() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("mre_conservation_local_score IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("mre_conservation_local_score = ?");
                }
            }
            if (bean.isMreFreeEnergyScoreModified()) {
                _dirtyCount ++;
                if (bean.getMreFreeEnergyScore() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("mre_free_energy_score IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("mre_free_energy_score = ?");
                }
            }
            if (bean.isMreConservationScoreModified()) {
                _dirtyCount ++;
                if (bean.getMreConservationScore() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("mre_conservation_score IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("mre_conservation_score = ?");
                }
            }
            if (bean.isChrEndModified()) {
                _dirtyCount ++;
                if (bean.getChrEnd() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("chr_end IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("chr_end = ?");
                }
            }
            if (bean.isChrStartModified()) {
                _dirtyCount ++;
                if (bean.getChrStart() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("chr_start IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("chr_start = ?");
                }
            }
            if (bean.isStrandModified()) {
                _dirtyCount ++;
                if (bean.getStrand() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("strand IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("strand = ?");
                }
            }
            if (bean.isChromosomModified()) {
                _dirtyCount ++;
                if (bean.getChromosom() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("chromosom IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("chromosom ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isMirnaEndModified()) {
                _dirtyCount ++;
                if (bean.getMirnaEnd() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("mirna_end IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("mirna_end = ?");
                }
            }
            if (bean.isMirnaStartModified()) {
                _dirtyCount ++;
                if (bean.getMirnaStart() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("mirna_start IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("mirna_start = ?");
                }
            }
            if (bean.isMreSourceModified()) {
                _dirtyCount ++;
                if (bean.getMreSource() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("mre_source IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("mre_source = ?");
                }
            }
            if (bean.isMreTypeRefModified()) {
                _dirtyCount ++;
                if (bean.getMreTypeRef() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("mre_type_ref IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("mre_type_ref = ?");
                }
            }
            if (bean.isKnowngeneEndModified()) {
                _dirtyCount ++;
                if (bean.getKnowngeneEnd() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("knowngene_end IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("knowngene_end = ?");
                }
            }
            if (bean.isKnowngeneStartModified()) {
                _dirtyCount ++;
                if (bean.getKnowngeneStart() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("knowngene_start IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("knowngene_start = ?");
                }
            }
            if (bean.isKnowngeneRefModified()) {
                _dirtyCount ++;
                if (bean.getKnowngeneRef() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("knowngene_ref IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("knowngene_ref = ?");
                }
            }
            if (bean.isMirnaRefModified()) {
                _dirtyCount ++;
                if (bean.getMirnaRef() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("mirna_ref IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("mirna_ref = ?");
                }
            }
            if (bean.isMreIdModified()) {
                _dirtyCount ++;
                if (bean.getMreId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("mre_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("mre_id = ?");
                }
            }
        }
        finally
        {
            sqlEqualsOperation = null;
        }
        return _dirtyCount;
    }

    /**
     * fill the given prepared statement with the bean values and a search type
     * @param ps the PreparedStatement that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     * @throws DAOException
     */
    protected int fillPreparedStatement(PreparedStatement ps, MreBean bean, int searchType) throws DAOException
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        try
        {
            if (bean.isCodon3FrequencyAaModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getCodon3FrequencyAa() + "]");
                if (bean.getCodon3FrequencyAa() == null) { ps.setNull(++_dirtyCount, Types.REAL); } else { Manager.setFloat(ps, ++_dirtyCount, bean.getCodon3FrequencyAa()); }
            }
            if (bean.isCodon2FrequencyAaModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getCodon2FrequencyAa() + "]");
                if (bean.getCodon2FrequencyAa() == null) { ps.setNull(++_dirtyCount, Types.REAL); } else { Manager.setFloat(ps, ++_dirtyCount, bean.getCodon2FrequencyAa()); }
            }
            if (bean.isCodon1FrequencyAaModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getCodon1FrequencyAa() + "]");
                if (bean.getCodon1FrequencyAa() == null) { ps.setNull(++_dirtyCount, Types.REAL); } else { Manager.setFloat(ps, ++_dirtyCount, bean.getCodon1FrequencyAa()); }
            }
            if (bean.isCodon3FrequencyModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getCodon3Frequency() + "]");
                if (bean.getCodon3Frequency() == null) { ps.setNull(++_dirtyCount, Types.REAL); } else { Manager.setFloat(ps, ++_dirtyCount, bean.getCodon3Frequency()); }
            }
            if (bean.isCodon2FrequencyModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getCodon2Frequency() + "]");
                if (bean.getCodon2Frequency() == null) { ps.setNull(++_dirtyCount, Types.REAL); } else { Manager.setFloat(ps, ++_dirtyCount, bean.getCodon2Frequency()); }
            }
            if (bean.isCodon1FrequencyModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getCodon1Frequency() + "]");
                if (bean.getCodon1Frequency() == null) { ps.setNull(++_dirtyCount, Types.REAL); } else { Manager.setFloat(ps, ++_dirtyCount, bean.getCodon1Frequency()); }
            }
            if (bean.isMreConservationLocalScoreModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getMreConservationLocalScore() + "]");
                if (bean.getMreConservationLocalScore() == null) { ps.setNull(++_dirtyCount, Types.REAL); } else { Manager.setFloat(ps, ++_dirtyCount, bean.getMreConservationLocalScore()); }
            }
            if (bean.isMreFreeEnergyScoreModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getMreFreeEnergyScore() + "]");
                if (bean.getMreFreeEnergyScore() == null) { ps.setNull(++_dirtyCount, Types.REAL); } else { Manager.setFloat(ps, ++_dirtyCount, bean.getMreFreeEnergyScore()); }
            }
            if (bean.isMreConservationScoreModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getMreConservationScore() + "]");
                if (bean.getMreConservationScore() == null) { ps.setNull(++_dirtyCount, Types.REAL); } else { Manager.setFloat(ps, ++_dirtyCount, bean.getMreConservationScore()); }
            }
            if (bean.isChrEndModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getChrEnd() + "]");
                if (bean.getChrEnd() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getChrEnd()); }
            }
            if (bean.isChrStartModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getChrStart() + "]");
                if (bean.getChrStart() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getChrStart()); }
            }
            if (bean.isStrandModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getStrand() + "]");
                if (bean.getStrand() == null) { ps.setNull(++_dirtyCount, Types.BIT); } else { Manager.setBoolean(ps, ++_dirtyCount, bean.getStrand()); }
            }
            if (bean.isChromosomModified()) {
                switch (searchType) {
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getChromosom() + "]");
                        if (bean.getChromosom() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getChromosom()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getChromosom() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getChromosom() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getChromosom() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getChromosom());
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getChromosom() + "]");
                        if (bean.getChromosom() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getChromosom() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isMirnaEndModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getMirnaEnd() + "]");
                if (bean.getMirnaEnd() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getMirnaEnd()); }
            }
            if (bean.isMirnaStartModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getMirnaStart() + "]");
                if (bean.getMirnaStart() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getMirnaStart()); }
            }
            if (bean.isMreSourceModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getMreSource() + "]");
                if (bean.getMreSource() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getMreSource()); }
            }
            if (bean.isMreTypeRefModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getMreTypeRef() + "]");
                if (bean.getMreTypeRef() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getMreTypeRef()); }
            }
            if (bean.isKnowngeneEndModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getKnowngeneEnd() + "]");
                if (bean.getKnowngeneEnd() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getKnowngeneEnd()); }
            }
            if (bean.isKnowngeneStartModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getKnowngeneStart() + "]");
                if (bean.getKnowngeneStart() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getKnowngeneStart()); }
            }
            if (bean.isKnowngeneRefModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getKnowngeneRef() + "]");
                if (bean.getKnowngeneRef() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getKnowngeneRef()); }
            }
            if (bean.isMirnaRefModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getMirnaRef() + "]");
                if (bean.getMirnaRef() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getMirnaRef()); }
            }
            if (bean.isMreIdModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getMreId() + "]");
                if (bean.getMreId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getMreId()); }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        return _dirtyCount;
    }


    //_____________________________________________________________________
    //
    // DECODE RESULT SET
    //_____________________________________________________________________

    /**
     * decode a resultset in an array of MreBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting MreBean table
     * @throws DAOException
     */
    //28
    public MreBean[] decodeResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
    	return (MreBean[])this.decodeResultSetAsList(rs, fieldList, startRow, numRows).toArray(new MreBean[0]);
    }

    /**
     * decode a resultset in a list of MreBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting MreBean table
     * @throws DAOException
     */
    //28
    public List<MreBean> decodeResultSetAsList(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        List<MreBean> v = new ArrayList<MreBean>();
        try
        {
            if (rs.absolute(startRow) && numRows!=0)
            {
                int count = 0;
                if(fieldList == null) {
                    do
                    {
                        v.add(decodeRow(rs));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
                else {
                    do
                    {
                        v.add(decodeRow(rs, fieldList));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
            }
            return v;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
    }

    /**
     * Transforms a ResultSet iterating on the mre on a MreBean bean.
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting MreBean bean
     * @throws DAOException
     */
    //29
    public MreBean decodeRow(ResultSet rs) throws DAOException
    {
        MreBean bean = this.createMreBean();
        try
        {
            bean.setCodon3FrequencyAa(Manager.getFloat(rs, 1));
            bean.setCodon2FrequencyAa(Manager.getFloat(rs, 2));
            bean.setCodon1FrequencyAa(Manager.getFloat(rs, 3));
            bean.setCodon3Frequency(Manager.getFloat(rs, 4));
            bean.setCodon2Frequency(Manager.getFloat(rs, 5));
            bean.setCodon1Frequency(Manager.getFloat(rs, 6));
            bean.setMreConservationLocalScore(Manager.getFloat(rs, 7));
            bean.setMreFreeEnergyScore(Manager.getFloat(rs, 8));
            bean.setMreConservationScore(Manager.getFloat(rs, 9));
            bean.setChrEnd(Manager.getInteger(rs, 10));
            bean.setChrStart(Manager.getInteger(rs, 11));
            bean.setStrand(Manager.getBoolean(rs, 12));
            bean.setChromosom(rs.getString(13));
            bean.setMirnaEnd(Manager.getInteger(rs, 14));
            bean.setMirnaStart(Manager.getInteger(rs, 15));
            bean.setMreSource(Manager.getInteger(rs, 16));
            bean.setMreTypeRef(Manager.getInteger(rs, 17));
            bean.setKnowngeneEnd(Manager.getInteger(rs, 18));
            bean.setKnowngeneStart(Manager.getInteger(rs, 19));
            bean.setKnowngeneRef(Manager.getInteger(rs, 20));
            bean.setMirnaRef(Manager.getInteger(rs, 21));
            bean.setMreId(Manager.getInteger(rs, 22));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the mre table on a MreBean bean according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return bean resulting MreBean bean
     * @throws DAOException
     */
    //30
    public MreBean decodeRow(ResultSet rs, int[] fieldList) throws DAOException
    {
        MreBean bean = this.createMreBean();
        int pos = 0;
        try
        {
            for(int i = 0; i < fieldList.length; i++)
            {
                switch(fieldList[i])
                {
                    case ID_CODON3_FREQUENCY_AA:
                        ++pos;
                        bean.setCodon3FrequencyAa(Manager.getFloat(rs, pos));
                        break;
                    case ID_CODON2_FREQUENCY_AA:
                        ++pos;
                        bean.setCodon2FrequencyAa(Manager.getFloat(rs, pos));
                        break;
                    case ID_CODON1_FREQUENCY_AA:
                        ++pos;
                        bean.setCodon1FrequencyAa(Manager.getFloat(rs, pos));
                        break;
                    case ID_CODON3_FREQUENCY:
                        ++pos;
                        bean.setCodon3Frequency(Manager.getFloat(rs, pos));
                        break;
                    case ID_CODON2_FREQUENCY:
                        ++pos;
                        bean.setCodon2Frequency(Manager.getFloat(rs, pos));
                        break;
                    case ID_CODON1_FREQUENCY:
                        ++pos;
                        bean.setCodon1Frequency(Manager.getFloat(rs, pos));
                        break;
                    case ID_MRE_CONSERVATION_LOCAL_SCORE:
                        ++pos;
                        bean.setMreConservationLocalScore(Manager.getFloat(rs, pos));
                        break;
                    case ID_MRE_FREE_ENERGY_SCORE:
                        ++pos;
                        bean.setMreFreeEnergyScore(Manager.getFloat(rs, pos));
                        break;
                    case ID_MRE_CONSERVATION_SCORE:
                        ++pos;
                        bean.setMreConservationScore(Manager.getFloat(rs, pos));
                        break;
                    case ID_CHR_END:
                        ++pos;
                        bean.setChrEnd(Manager.getInteger(rs, pos));
                        break;
                    case ID_CHR_START:
                        ++pos;
                        bean.setChrStart(Manager.getInteger(rs, pos));
                        break;
                    case ID_STRAND:
                        ++pos;
                        bean.setStrand(Manager.getBoolean(rs, pos));
                        break;
                    case ID_CHROMOSOM:
                        ++pos;
                        bean.setChromosom(rs.getString(pos));
                        break;
                    case ID_MIRNA_END:
                        ++pos;
                        bean.setMirnaEnd(Manager.getInteger(rs, pos));
                        break;
                    case ID_MIRNA_START:
                        ++pos;
                        bean.setMirnaStart(Manager.getInteger(rs, pos));
                        break;
                    case ID_MRE_SOURCE:
                        ++pos;
                        bean.setMreSource(Manager.getInteger(rs, pos));
                        break;
                    case ID_MRE_TYPE_REF:
                        ++pos;
                        bean.setMreTypeRef(Manager.getInteger(rs, pos));
                        break;
                    case ID_KNOWNGENE_END:
                        ++pos;
                        bean.setKnowngeneEnd(Manager.getInteger(rs, pos));
                        break;
                    case ID_KNOWNGENE_START:
                        ++pos;
                        bean.setKnowngeneStart(Manager.getInteger(rs, pos));
                        break;
                    case ID_KNOWNGENE_REF:
                        ++pos;
                        bean.setKnowngeneRef(Manager.getInteger(rs, pos));
                        break;
                    case ID_MIRNA_REF:
                        ++pos;
                        bean.setMirnaRef(Manager.getInteger(rs, pos));
                        break;
                    case ID_MRE_ID:
                        ++pos;
                        bean.setMreId(Manager.getInteger(rs, pos));
                        break;
                    default:
                        throw new DAOException("Unknown field id " + fieldList[i]);
                }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the mre on a MreBean bean using the names of the columns
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting MreBean bean
     * @throws DAOException
     */
    //31
    public MreBean metaDataDecodeRow(ResultSet rs) throws DAOException
    {
        MreBean bean = this.createMreBean();
        try
        {
            bean.setCodon3FrequencyAa(Manager.getFloat(rs, "codon3_frequency_aa"));
            bean.setCodon2FrequencyAa(Manager.getFloat(rs, "codon2_frequency_aa"));
            bean.setCodon1FrequencyAa(Manager.getFloat(rs, "codon1_frequency_aa"));
            bean.setCodon3Frequency(Manager.getFloat(rs, "codon3_frequency"));
            bean.setCodon2Frequency(Manager.getFloat(rs, "codon2_frequency"));
            bean.setCodon1Frequency(Manager.getFloat(rs, "codon1_frequency"));
            bean.setMreConservationLocalScore(Manager.getFloat(rs, "mre_conservation_local_score"));
            bean.setMreFreeEnergyScore(Manager.getFloat(rs, "mre_free_energy_score"));
            bean.setMreConservationScore(Manager.getFloat(rs, "mre_conservation_score"));
            bean.setChrEnd(Manager.getInteger(rs, "chr_end"));
            bean.setChrStart(Manager.getInteger(rs, "chr_start"));
            bean.setStrand(Manager.getBoolean(rs, "strand"));
            bean.setChromosom(rs.getString("chromosom"));
            bean.setMirnaEnd(Manager.getInteger(rs, "mirna_end"));
            bean.setMirnaStart(Manager.getInteger(rs, "mirna_start"));
            bean.setMreSource(Manager.getInteger(rs, "mre_source"));
            bean.setMreTypeRef(Manager.getInteger(rs, "mre_type_ref"));
            bean.setKnowngeneEnd(Manager.getInteger(rs, "knowngene_end"));
            bean.setKnowngeneStart(Manager.getInteger(rs, "knowngene_start"));
            bean.setKnowngeneRef(Manager.getInteger(rs, "knowngene_ref"));
            bean.setMirnaRef(Manager.getInteger(rs, "mirna_ref"));
            bean.setMreId(Manager.getInteger(rs, "mre_id"));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }

        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of MreBean
     * @throws DAOException
     */
    //32
    public MreBean[] loadByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of MreBean
     * @throws DAOException
     */
    //32
    public List<MreBean> loadByPreparedStatementAsList(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatementAsList(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of MreBean
     * @throws DAOException
     */
    //33
    public MreBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws DAOException
    {
        return (MreBean[])this.loadByPreparedStatementAsList(ps, fieldList).toArray(new MreBean[0]);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of MreBean
     * @throws DAOException
     */
    //33
    public List<MreBean> loadByPreparedStatementAsList(PreparedStatement ps, int[] fieldList) throws DAOException
    {		        
        ResultSet rs =  null;
		List<MreBean> v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new ArrayList<MreBean>();
			if(fieldList == null) {
				while(rs.next()) {
					v.add(decodeRow(rs));
				}
			}
			else {
				while(rs.next()) {
					v.add(decodeRow(rs, fieldList));
				}
			}

			return v;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            getManager().close(rs);
        }
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of MreBean
     * @throws DAOException
     */
    //34
    public MreBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            rs = ps.executeQuery();
            return this.decodeResultSet(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of MreBean
     * @throws DAOException
     */
    //34
    public List<MreBean> loadByPreparedStatementAsList(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            rs = ps.executeQuery();
            return this.decodeResultSetAsList(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
    }

    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________
    private MreListener listener = null;

    /**
     * Registers a unique MreListener listener.
     */
    //35
    public void registerListener(MreListener listener)
    {
        this.listener = listener;
    }

    /**
     * Before the save of the MreBean bean.
     *
     * @param bean the MreBean bean to be saved
     */
    //36
    private void beforeInsert(MreBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeInsert(bean);
        }
    }

    /**
     * After the save of the MreBean bean.
     *
     * @param bean the MreBean bean to be saved
     */
    //37
    private void afterInsert(MreBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterInsert(bean);
        }
    }

    /**
     * Before the update of the MreBean bean.
     *
     * @param bean the MreBean bean to be updated
     */
    //38
    private void beforeUpdate(MreBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeUpdate(bean);
        }
    }

    /**
     * After the update of the MreBean bean.
     *
     * @param bean the MreBean bean to be updated
     */
    //39
    private void afterUpdate(MreBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterUpdate(bean);
        }
    }

    /**
     * Before the delete of the MreBean bean.
     *
     * @param bean the MreBean bean to be deleted
     */
    private void beforeDelete(MreBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeDelete(bean);
        }
    }

    /**
     * After the delete of the MreBean bean.
     *
     * @param bean the MreBean bean to be deleted
     */
    private void afterDelete(MreBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterDelete(bean);
        }
    }

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //40
    private Manager getManager()
    {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    //41
    private void freeConnection(Connection c)
    {
        this.getManager().releaseConnection(c); // back to pool
    }

    /**
     * Gets the connection.
     */
    //42
    private Connection getConnection() throws DAOException
    {
        try
        {
            return this.getManager().getConnection();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
    }
   /****************************************************************************************************/
    /******************** own methods *************************/
    
    /**
     * This method calculates the chromosomal position for the given local position on the given {@link KnowngeneBean}.
     * @param kgBean - the {@link KnowngeneBean}
     * @param pos - the position on the {@link KnowngeneBean}
     * @return the chromosomal position
     */
    public int calcChromosomalLocation(KnowngeneBean kgBean, int pos){
	int chrom_pos	= -1;
	int[] starts	= getInts(kgBean.getExonStarts());
	int[] ends	= getInts(kgBean.getExonEnds());
	int sum		= 0;
	int sum_old	= 0;
	
	if(starts.length != ends.length){
	    System.err.println("Invalid KnowngeneBean: "+kgBean.toString());
	    return chrom_pos;
	}
	
	if(kgBean.getStrand()){
	    for(int i=0;i<starts.length;i++){
		sum_old	= sum;
		sum += ends[i]-starts[i];
		if(sum >= pos){
		    chrom_pos	= pos - sum_old + starts[i];
		    break;
		}
	    }
	}
	else{
	    for(int i=starts.length-1;i>=0;i--){
		sum_old	= sum;
		sum += ends[i]-starts[i];
		if(sum >= pos){
		    chrom_pos	= ends[i] - (pos - sum_old) -1;
		    break;
		}
	    }
	}
	
	// Bedenke die knownGenes on the - strand !!!
	
	return chrom_pos;
    }


    private int[] getInts(String positions) {
//	ArrayList<Integer> pos_as_int = new ArrayList<Integer>();
	String[] pos	= positions.split(",");
	int[] pos_as_int = new int[pos.length];
	for (int i=0; i<pos.length;i++) {
	    pos_as_int[i]	= Integer.parseInt(pos[i]);
	}
	return pos_as_int;
    }
    
    
}
