// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package mirnator.sql2java;

import java.util.Comparator;


/**
 * Comparator class is used to sort the KnowngeneBean objects.
 * @author sql2java
 */
@SuppressWarnings("rawtypes")
public class KnowngeneComparator implements Comparator
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for KnowngeneComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new KnowngeneComparator(KnowngeneManager.ID_CHROMOSOM, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>KnowngeneManager.ID_CHROMOSOM
     *   <li>KnowngeneManager.ID_EXON_ENDS
     *   <li>KnowngeneManager.ID_EXON_STARTS
     *   <li>KnowngeneManager.ID_EXON_COUNT
     *   <li>KnowngeneManager.ID_CDS_END
     *   <li>KnowngeneManager.ID_CDS_START
     *   <li>KnowngeneManager.ID_TX_START
     *   <li>KnowngeneManager.ID_TX_END
     *   <li>KnowngeneManager.ID_UCSC_ID
     *   <li>KnowngeneManager.ID_GENE_ID
     * </ul>
     */
    public KnowngeneComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for KnowngeneComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new KnowngeneComparator(KnowngeneManager.ID_CHROMOSOM, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>KnowngeneManager.ID_CHROMOSOM
     *   <li>KnowngeneManager.ID_EXON_ENDS
     *   <li>KnowngeneManager.ID_EXON_STARTS
     *   <li>KnowngeneManager.ID_EXON_COUNT
     *   <li>KnowngeneManager.ID_CDS_END
     *   <li>KnowngeneManager.ID_CDS_START
     *   <li>KnowngeneManager.ID_TX_START
     *   <li>KnowngeneManager.ID_TX_END
     *   <li>KnowngeneManager.ID_STRAND
     *   <li>KnowngeneManager.ID_UCSC_ID
     *   <li>KnowngeneManager.ID_GENE_ID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public KnowngeneComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        KnowngeneBean b1 = (KnowngeneBean)pObj1;
        KnowngeneBean b2 = (KnowngeneBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case KnowngeneManager.ID_CHROMOSOM:
                if (b1.getChromosom() == null && b2.getChromosom() != null) {
                    iReturn = -1;
                } else if (b1.getChromosom() == null && b2.getChromosom() == null) {
                    iReturn = 0;
                } else if (b1.getChromosom() != null && b2.getChromosom() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getChromosom().compareTo(b2.getChromosom());
                }
                break;
            case KnowngeneManager.ID_EXON_ENDS:
                if (b1.getExonEnds() == null && b2.getExonEnds() != null) {
                    iReturn = -1;
                } else if (b1.getExonEnds() == null && b2.getExonEnds() == null) {
                    iReturn = 0;
                } else if (b1.getExonEnds() != null && b2.getExonEnds() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getExonEnds().compareTo(b2.getExonEnds());
                }
                break;
            case KnowngeneManager.ID_EXON_STARTS:
                if (b1.getExonStarts() == null && b2.getExonStarts() != null) {
                    iReturn = -1;
                } else if (b1.getExonStarts() == null && b2.getExonStarts() == null) {
                    iReturn = 0;
                } else if (b1.getExonStarts() != null && b2.getExonStarts() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getExonStarts().compareTo(b2.getExonStarts());
                }
                break;
            case KnowngeneManager.ID_EXON_COUNT:
                if (b1.getExonCount() == null && b2.getExonCount() != null) {
                    iReturn = -1;
                } else if (b1.getExonCount() == null && b2.getExonCount() == null) {
                    iReturn = 0;
                } else if (b1.getExonCount() != null && b2.getExonCount() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getExonCount().compareTo(b2.getExonCount());
                }
                break;
            case KnowngeneManager.ID_CDS_END:
                if (b1.getCdsEnd() == null && b2.getCdsEnd() != null) {
                    iReturn = -1;
                } else if (b1.getCdsEnd() == null && b2.getCdsEnd() == null) {
                    iReturn = 0;
                } else if (b1.getCdsEnd() != null && b2.getCdsEnd() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getCdsEnd().compareTo(b2.getCdsEnd());
                }
                break;
            case KnowngeneManager.ID_CDS_START:
                if (b1.getCdsStart() == null && b2.getCdsStart() != null) {
                    iReturn = -1;
                } else if (b1.getCdsStart() == null && b2.getCdsStart() == null) {
                    iReturn = 0;
                } else if (b1.getCdsStart() != null && b2.getCdsStart() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getCdsStart().compareTo(b2.getCdsStart());
                }
                break;
            case KnowngeneManager.ID_TX_START:
                if (b1.getTxStart() == null && b2.getTxStart() != null) {
                    iReturn = -1;
                } else if (b1.getTxStart() == null && b2.getTxStart() == null) {
                    iReturn = 0;
                } else if (b1.getTxStart() != null && b2.getTxStart() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTxStart().compareTo(b2.getTxStart());
                }
                break;
            case KnowngeneManager.ID_TX_END:
                if (b1.getTxEnd() == null && b2.getTxEnd() != null) {
                    iReturn = -1;
                } else if (b1.getTxEnd() == null && b2.getTxEnd() == null) {
                    iReturn = 0;
                } else if (b1.getTxEnd() != null && b2.getTxEnd() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTxEnd().compareTo(b2.getTxEnd());
                }
                break;
            case KnowngeneManager.ID_UCSC_ID:
                if (b1.getUcscId() == null && b2.getUcscId() != null) {
                    iReturn = -1;
                } else if (b1.getUcscId() == null && b2.getUcscId() == null) {
                    iReturn = 0;
                } else if (b1.getUcscId() != null && b2.getUcscId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getUcscId().compareTo(b2.getUcscId());
                }
                break;
            case KnowngeneManager.ID_GENE_ID:
                if (b1.getGeneId() == null && b2.getGeneId() != null) {
                    iReturn = -1;
                } else if (b1.getGeneId() == null && b2.getGeneId() == null) {
                    iReturn = 0;
                } else if (b1.getGeneId() != null && b2.getGeneId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getGeneId().compareTo(b2.getGeneId());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }}
