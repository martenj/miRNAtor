// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package mirnator.sql2java;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import mirnator.sql2java.GeneratedBean;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * KnowngeneBean is a mapping of knowngene Table.
 * @author sql2java
*/
public class KnowngeneBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = 3736261984140348523L;
	
    private String chromosom;
    private boolean chromosomIsModified = false;
    private boolean chromosomIsInitialized = false;

    private String exonEnds;
    private boolean exonEndsIsModified = false;
    private boolean exonEndsIsInitialized = false;

    private String exonStarts;
    private boolean exonStartsIsModified = false;
    private boolean exonStartsIsInitialized = false;

    private Integer exonCount;
    private boolean exonCountIsModified = false;
    private boolean exonCountIsInitialized = false;

    private Integer cdsEnd;
    private boolean cdsEndIsModified = false;
    private boolean cdsEndIsInitialized = false;

    private Integer cdsStart;
    private boolean cdsStartIsModified = false;
    private boolean cdsStartIsInitialized = false;

    private Integer txStart;
    private boolean txStartIsModified = false;
    private boolean txStartIsInitialized = false;

    private Integer txEnd;
    private boolean txEndIsModified = false;
    private boolean txEndIsInitialized = false;

    private Boolean strand;
    private boolean strandIsModified = false;
    private boolean strandIsInitialized = false;

    private String ucscId;
    private boolean ucscIdIsModified = false;
    private boolean ucscIdIsInitialized = false;

    private Integer geneId;
    private boolean geneIdIsModified = false;
    private boolean geneIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a KnowngeneBean is via the createKnowngeneBean method in KnowngeneManager or
     * via the factory class KnowngeneFactory create method
     */
    protected KnowngeneBean()
    {
    }

    /**
     * Getter method for chromosom.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: knowngene.chromosom</li>
     * <li>column size: 2147483647</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of chromosom
     */
    public String getChromosom()
    {
        return chromosom;
    }

    /**
     * Setter method for chromosom.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to chromosom
     */
    public void setChromosom(String newVal)
    {
        if ((newVal != null && chromosom != null && (newVal.compareTo(chromosom) == 0)) ||
            (newVal == null && chromosom == null && chromosomIsInitialized)) {
            return;
        }
        chromosom = newVal;
        chromosomIsModified = true;
        chromosomIsInitialized = true;
    }

    /**
     * Determines if the chromosom has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isChromosomModified()
    {
        return chromosomIsModified;
    }

    /**
     * Determines if the chromosom has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isChromosomInitialized()
    {
        return chromosomIsInitialized;
    }

    /**
     * Getter method for exonEnds.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: knowngene.exon_ends</li>
     * <li>column size: 2147483647</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of exonEnds
     */
    public String getExonEnds()
    {
        return exonEnds;
    }

    /**
     * Setter method for exonEnds.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to exonEnds
     */
    public void setExonEnds(String newVal)
    {
        if ((newVal != null && exonEnds != null && (newVal.compareTo(exonEnds) == 0)) ||
            (newVal == null && exonEnds == null && exonEndsIsInitialized)) {
            return;
        }
        exonEnds = newVal;
        exonEndsIsModified = true;
        exonEndsIsInitialized = true;
    }

    /**
     * Determines if the exonEnds has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isExonEndsModified()
    {
        return exonEndsIsModified;
    }

    /**
     * Determines if the exonEnds has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isExonEndsInitialized()
    {
        return exonEndsIsInitialized;
    }

    /**
     * Getter method for exonStarts.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: knowngene.exon_starts</li>
     * <li>column size: 2147483647</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of exonStarts
     */
    public String getExonStarts()
    {
        return exonStarts;
    }

    /**
     * Setter method for exonStarts.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to exonStarts
     */
    public void setExonStarts(String newVal)
    {
        if ((newVal != null && exonStarts != null && (newVal.compareTo(exonStarts) == 0)) ||
            (newVal == null && exonStarts == null && exonStartsIsInitialized)) {
            return;
        }
        exonStarts = newVal;
        exonStartsIsModified = true;
        exonStartsIsInitialized = true;
    }

    /**
     * Determines if the exonStarts has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isExonStartsModified()
    {
        return exonStartsIsModified;
    }

    /**
     * Determines if the exonStarts has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isExonStartsInitialized()
    {
        return exonStartsIsInitialized;
    }

    /**
     * Getter method for exonCount.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: knowngene.exon_count</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of exonCount
     */
    public Integer getExonCount()
    {
        return exonCount;
    }

    /**
     * Setter method for exonCount.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to exonCount
     */
    public void setExonCount(Integer newVal)
    {
        if ((newVal != null && exonCount != null && (newVal.compareTo(exonCount) == 0)) ||
            (newVal == null && exonCount == null && exonCountIsInitialized)) {
            return;
        }
        exonCount = newVal;
        exonCountIsModified = true;
        exonCountIsInitialized = true;
    }

    /**
     * Setter method for exonCount.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to exonCount
     */
    public void setExonCount(int newVal)
    {
        setExonCount(new Integer(newVal));
    }

    /**
     * Determines if the exonCount has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isExonCountModified()
    {
        return exonCountIsModified;
    }

    /**
     * Determines if the exonCount has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isExonCountInitialized()
    {
        return exonCountIsInitialized;
    }

    /**
     * Getter method for cdsEnd.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: knowngene.cds_end</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of cdsEnd
     */
    public Integer getCdsEnd()
    {
        return cdsEnd;
    }

    /**
     * Setter method for cdsEnd.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to cdsEnd
     */
    public void setCdsEnd(Integer newVal)
    {
        if ((newVal != null && cdsEnd != null && (newVal.compareTo(cdsEnd) == 0)) ||
            (newVal == null && cdsEnd == null && cdsEndIsInitialized)) {
            return;
        }
        cdsEnd = newVal;
        cdsEndIsModified = true;
        cdsEndIsInitialized = true;
    }

    /**
     * Setter method for cdsEnd.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to cdsEnd
     */
    public void setCdsEnd(int newVal)
    {
        setCdsEnd(new Integer(newVal));
    }

    /**
     * Determines if the cdsEnd has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCdsEndModified()
    {
        return cdsEndIsModified;
    }

    /**
     * Determines if the cdsEnd has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCdsEndInitialized()
    {
        return cdsEndIsInitialized;
    }

    /**
     * Getter method for cdsStart.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: knowngene.cds_start</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of cdsStart
     */
    public Integer getCdsStart()
    {
        return cdsStart;
    }

    /**
     * Setter method for cdsStart.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to cdsStart
     */
    public void setCdsStart(Integer newVal)
    {
        if ((newVal != null && cdsStart != null && (newVal.compareTo(cdsStart) == 0)) ||
            (newVal == null && cdsStart == null && cdsStartIsInitialized)) {
            return;
        }
        cdsStart = newVal;
        cdsStartIsModified = true;
        cdsStartIsInitialized = true;
    }

    /**
     * Setter method for cdsStart.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to cdsStart
     */
    public void setCdsStart(int newVal)
    {
        setCdsStart(new Integer(newVal));
    }

    /**
     * Determines if the cdsStart has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCdsStartModified()
    {
        return cdsStartIsModified;
    }

    /**
     * Determines if the cdsStart has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCdsStartInitialized()
    {
        return cdsStartIsInitialized;
    }

    /**
     * Getter method for txStart.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: knowngene.tx_start</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of txStart
     */
    public Integer getTxStart()
    {
        return txStart;
    }

    /**
     * Setter method for txStart.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to txStart
     */
    public void setTxStart(Integer newVal)
    {
        if ((newVal != null && txStart != null && (newVal.compareTo(txStart) == 0)) ||
            (newVal == null && txStart == null && txStartIsInitialized)) {
            return;
        }
        txStart = newVal;
        txStartIsModified = true;
        txStartIsInitialized = true;
    }

    /**
     * Setter method for txStart.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to txStart
     */
    public void setTxStart(int newVal)
    {
        setTxStart(new Integer(newVal));
    }

    /**
     * Determines if the txStart has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTxStartModified()
    {
        return txStartIsModified;
    }

    /**
     * Determines if the txStart has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTxStartInitialized()
    {
        return txStartIsInitialized;
    }

    /**
     * Getter method for txEnd.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: knowngene.tx_end</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of txEnd
     */
    public Integer getTxEnd()
    {
        return txEnd;
    }

    /**
     * Setter method for txEnd.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to txEnd
     */
    public void setTxEnd(Integer newVal)
    {
        if ((newVal != null && txEnd != null && (newVal.compareTo(txEnd) == 0)) ||
            (newVal == null && txEnd == null && txEndIsInitialized)) {
            return;
        }
        txEnd = newVal;
        txEndIsModified = true;
        txEndIsInitialized = true;
    }

    /**
     * Setter method for txEnd.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to txEnd
     */
    public void setTxEnd(int newVal)
    {
        setTxEnd(new Integer(newVal));
    }

    /**
     * Determines if the txEnd has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTxEndModified()
    {
        return txEndIsModified;
    }

    /**
     * Determines if the txEnd has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTxEndInitialized()
    {
        return txEndIsInitialized;
    }

    /**
     * Getter method for strand.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: knowngene.strand</li>
     * <li>column size: 1</li>
     * <li>jdbc type returned by the driver: Types.BIT</li>
     * </ul>
     *
     * @return the value of strand
     */
    public Boolean getStrand()
    {
        return strand;
    }

    /**
     * Setter method for strand.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to strand
     */
    public void setStrand(Boolean newVal)
    {
        if ((newVal != null && strand != null && newVal.equals(strand)) ||
            (newVal == null && strand == null && strandIsInitialized)) {
            return;
        }
        strand = newVal;
        strandIsModified = true;
        strandIsInitialized = true;
    }

    /**
     * Setter method for strand.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to strand
     */
    public void setStrand(boolean newVal)
    {
        setStrand(new Boolean(newVal));
    }

    /**
     * Determines if the strand has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isStrandModified()
    {
        return strandIsModified;
    }

    /**
     * Determines if the strand has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isStrandInitialized()
    {
        return strandIsInitialized;
    }

    /**
     * Getter method for ucscId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: knowngene.ucsc_id</li>
     * <li>column size: 2147483647</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of ucscId
     */
    public String getUcscId()
    {
        return ucscId;
    }

    /**
     * Setter method for ucscId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to ucscId
     */
    public void setUcscId(String newVal)
    {
        if ((newVal != null && ucscId != null && (newVal.compareTo(ucscId) == 0)) ||
            (newVal == null && ucscId == null && ucscIdIsInitialized)) {
            return;
        }
        ucscId = newVal;
        ucscIdIsModified = true;
        ucscIdIsInitialized = true;
    }

    /**
     * Determines if the ucscId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isUcscIdModified()
    {
        return ucscIdIsModified;
    }

    /**
     * Determines if the ucscId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isUcscIdInitialized()
    {
        return ucscIdIsInitialized;
    }

    /**
     * Getter method for geneId.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: knowngene.gene_id</li>
     * <li> imported key: kgsequence.knowngene_ref</li>
     * <li> imported key: mre.knowngene_ref</li>
     * <li> imported key: xref.knowngene_ref</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of geneId
     */
    public Integer getGeneId()
    {
        return geneId;
    }

    /**
     * Setter method for geneId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to geneId
     */
    public void setGeneId(Integer newVal)
    {
        if ((newVal != null && geneId != null && (newVal.compareTo(geneId) == 0)) ||
            (newVal == null && geneId == null && geneIdIsInitialized)) {
            return;
        }
        geneId = newVal;
        geneIdIsModified = true;
        geneIdIsInitialized = true;
    }

    /**
     * Setter method for geneId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to geneId
     */
    public void setGeneId(int newVal)
    {
        setGeneId(new Integer(newVal));
    }

    /**
     * Determines if the geneId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isGeneIdModified()
    {
        return geneIdIsModified;
    }

    /**
     * Determines if the geneId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isGeneIdInitialized()
    {
        return geneIdIsInitialized;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return chromosomIsModified 		|| exonEndsIsModified  		|| exonStartsIsModified  		|| exonCountIsModified  		|| cdsEndIsModified  		|| cdsStartIsModified  		|| txStartIsModified  		|| txEndIsModified  		|| strandIsModified  		|| ucscIdIsModified  		|| geneIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        chromosomIsModified = false;
        exonEndsIsModified = false;
        exonStartsIsModified = false;
        exonCountIsModified = false;
        cdsEndIsModified = false;
        cdsStartIsModified = false;
        txStartIsModified = false;
        txEndIsModified = false;
        strandIsModified = false;
        ucscIdIsModified = false;
        geneIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(KnowngeneBean bean)
    {
        setChromosom(bean.getChromosom());
        setExonEnds(bean.getExonEnds());
        setExonStarts(bean.getExonStarts());
        setExonCount(bean.getExonCount());
        setCdsEnd(bean.getCdsEnd());
        setCdsStart(bean.getCdsStart());
        setTxStart(bean.getTxStart());
        setTxEnd(bean.getTxEnd());
        setStrand(bean.getStrand());
        setUcscId(bean.getUcscId());
        setGeneId(bean.getGeneId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map<String,String> getDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("chromosom", getChromosom() == null ? "" : getChromosom().toString());
        dictionnary.put("exon_ends", getExonEnds() == null ? "" : getExonEnds().toString());
        dictionnary.put("exon_starts", getExonStarts() == null ? "" : getExonStarts().toString());
        dictionnary.put("exon_count", getExonCount() == null ? "" : getExonCount().toString());
        dictionnary.put("cds_end", getCdsEnd() == null ? "" : getCdsEnd().toString());
        dictionnary.put("cds_start", getCdsStart() == null ? "" : getCdsStart().toString());
        dictionnary.put("tx_start", getTxStart() == null ? "" : getTxStart().toString());
        dictionnary.put("tx_end", getTxEnd() == null ? "" : getTxEnd().toString());
        dictionnary.put("strand", getStrand() == null ? "" : getStrand().toString());
        dictionnary.put("ucsc_id", getUcscId() == null ? "" : getUcscId().toString());
        dictionnary.put("gene_id", getGeneId() == null ? "" : getGeneId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map<String,String> getPkDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("gene_id", getGeneId() == null ? "" : getGeneId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("chromosom".equalsIgnoreCase(column) || "chromosom".equalsIgnoreCase(column)) {
            return getChromosom() == null ? "" : getChromosom().toString();
        } else if ("exon_ends".equalsIgnoreCase(column) || "exonEnds".equalsIgnoreCase(column)) {
            return getExonEnds() == null ? "" : getExonEnds().toString();
        } else if ("exon_starts".equalsIgnoreCase(column) || "exonStarts".equalsIgnoreCase(column)) {
            return getExonStarts() == null ? "" : getExonStarts().toString();
        } else if ("exon_count".equalsIgnoreCase(column) || "exonCount".equalsIgnoreCase(column)) {
            return getExonCount() == null ? "" : getExonCount().toString();
        } else if ("cds_end".equalsIgnoreCase(column) || "cdsEnd".equalsIgnoreCase(column)) {
            return getCdsEnd() == null ? "" : getCdsEnd().toString();
        } else if ("cds_start".equalsIgnoreCase(column) || "cdsStart".equalsIgnoreCase(column)) {
            return getCdsStart() == null ? "" : getCdsStart().toString();
        } else if ("tx_start".equalsIgnoreCase(column) || "txStart".equalsIgnoreCase(column)) {
            return getTxStart() == null ? "" : getTxStart().toString();
        } else if ("tx_end".equalsIgnoreCase(column) || "txEnd".equalsIgnoreCase(column)) {
            return getTxEnd() == null ? "" : getTxEnd().toString();
        } else if ("strand".equalsIgnoreCase(column) || "strand".equalsIgnoreCase(column)) {
            return getStrand() == null ? "" : getStrand().toString();
        } else if ("ucsc_id".equalsIgnoreCase(column) || "ucscId".equalsIgnoreCase(column)) {
            return getUcscId() == null ? "" : getUcscId().toString();
        } else if ("gene_id".equalsIgnoreCase(column) || "geneId".equalsIgnoreCase(column)) {
            return getGeneId() == null ? "" : getGeneId().toString();
        }
        return "";
    }

    /**
	 * @see java.lang.Object#equals(Object)
	 */
	public boolean equals(Object object)
	{
		if (!(object instanceof KnowngeneBean)) {
			return false;
		}

		KnowngeneBean obj = (KnowngeneBean) object;
		return new EqualsBuilder()
            .append(getChromosom(), obj.getChromosom())
            .append(getExonEnds(), obj.getExonEnds())
            .append(getExonStarts(), obj.getExonStarts())
            .append(getExonCount(), obj.getExonCount())
            .append(getCdsEnd(), obj.getCdsEnd())
            .append(getCdsStart(), obj.getCdsStart())
            .append(getTxStart(), obj.getTxStart())
            .append(getTxEnd(), obj.getTxEnd())
            .append(getStrand(), obj.getStrand())
            .append(getUcscId(), obj.getUcscId())
            .append(getGeneId(), obj.getGeneId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getChromosom())
            .append(getExonEnds())
            .append(getExonStarts())
            .append(getExonCount())
            .append(getCdsEnd())
            .append(getCdsStart())
            .append(getTxStart())
            .append(getTxEnd())
            .append(getStrand())
            .append(getUcscId())
            .append(getGeneId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("chromosom", getChromosom())
            .append("exon_ends", getExonEnds())
            .append("exon_starts", getExonStarts())
            .append("exon_count", getExonCount())
            .append("cds_end", getCdsEnd())
            .append("cds_start", getCdsStart())
            .append("tx_start", getTxStart())
            .append("tx_end", getTxEnd())
            .append("strand", getStrand())
            .append("ucsc_id", getUcscId())
            .append("gene_id", getGeneId())
            .toString();
	}


    public int compareTo(Object object)
    {
        KnowngeneBean obj = (KnowngeneBean) object;
        return new CompareToBuilder()
            .append(getChromosom(), obj.getChromosom())
            .append(getExonEnds(), obj.getExonEnds())
            .append(getExonStarts(), obj.getExonStarts())
            .append(getExonCount(), obj.getExonCount())
            .append(getCdsEnd(), obj.getCdsEnd())
            .append(getCdsStart(), obj.getCdsStart())
            .append(getTxStart(), obj.getTxStart())
            .append(getTxEnd(), obj.getTxEnd())
            .append(getStrand(), obj.getStrand())
            .append(getUcscId(), obj.getUcscId())
            .append(getGeneId(), obj.getGeneId())
            .toComparison();
   }
    
    
    //
    // Own methods to improve handling
    //
    
    public int getCdsStartmRNA() {
	// first check if #start == #end
	int[] start	= parseExonPositions(this.exonStarts);
	int[] end	= parseExonPositions(this.exonEnds);
	if (start.length != end.length)
	    return -1;

	int cdsStart	= 0;
//	System.out.print("CDSstart:");
	if (strand) {
//	    System.out.print("+");
	    for (int i = 0; i < start.length; i++) {
//		System.out.print(" "+i);
		if(this.cdsStart >= end[i])
		    cdsStart += end[i] - start[i];
		else{
		    if(this.cdsStart >= start[i])
			cdsStart += this.cdsStart - start[i];
		    break;
		}
	    }
	} else {
//	    System.out.print("-");
	    for (int i = start.length - 1; i > -1; i--) {
//		System.out.print(" "+i);
		if(this.cdsEnd <= start[i])
		    cdsStart +=  end[i] - start[i];
		else{
		    if(this.cdsEnd <= end[i])
			cdsStart += end[i] -this.cdsEnd;
		    break;
		}
	    }
	}
//	System.out.println();
	return cdsStart;
    }
    
    
    public int getCdsEndmRNA() {
	// first check if #start == #end
	int[] start	= parseExonPositions(this.exonStarts);
	int[] end	= parseExonPositions(this.exonEnds);
	if (start.length != end.length)
	    return -1;

	int cdsEnd	= 0;
//	System.out.print("CDSend:");
	if (strand) {
//	    System.out.print("+");
	    for (int i = 0; i < start.length; i++) {
//		System.out.print(" "+i);
		if(this.cdsEnd >= end[i])
		    cdsEnd += end[i] - start[i];
		else{
		    if(this.cdsEnd >= start[i])
			cdsEnd += this.cdsEnd - start[i];
		    break;
		}
	    }
	} else {
//	    System.out.print("-");

	    for (int i = start.length - 1; i > -1; i--) {
//		System.out.print(" "+i);
		if(this.cdsStart <= start[i])
		    cdsEnd +=  end[i] - start[i];
		else{
		    if(this.cdsStart <= end[i])
			cdsEnd += end[i] -this.cdsStart;
		    break;
		}
	    }
	}
//	System.out.println();
	return cdsEnd;
    }
    
    /**
     * Splits and parses the Exon start/end positions from databasefile.<br>
     * e.g. 1234,1267,1468
     * @param string
     * @return positions as integer
     */
    private int[] parseExonPositions(String positionstring) throws NumberFormatException{
	String[] positions	= positionstring.split(",");
	int[] pos		= new int[positions.length];
	for(int i=0;i<positions.length;i++){
	    pos[i]	= Integer.parseInt(positions[i]);
	}
	return pos;
    }
}
