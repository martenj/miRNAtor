// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package mirnator.sql2java;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import mirnator.sql2java.GeneratedBean;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * TestDesignBean is a mapping of test_design Table.
 * @author sql2java
*/
public class TestDesignBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = -7228956082286765927L;
	
    private String testDesign;
    private boolean testDesignIsModified = false;
    private boolean testDesignIsInitialized = false;

    private Integer testId;
    private boolean testIdIsModified = false;
    private boolean testIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a TestDesignBean is via the createTestDesignBean method in TestDesignManager or
     * via the factory class TestDesignFactory create method
     */
    protected TestDesignBean()
    {
    }

    /**
     * Getter method for testDesign.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: test_design.test_design</li>
     * <li>column size: 2147483647</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of testDesign
     */
    public String getTestDesign()
    {
        return testDesign;
    }

    /**
     * Setter method for testDesign.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to testDesign
     */
    public void setTestDesign(String newVal)
    {
        if ((newVal != null && testDesign != null && (newVal.compareTo(testDesign) == 0)) ||
            (newVal == null && testDesign == null && testDesignIsInitialized)) {
            return;
        }
        testDesign = newVal;
        testDesignIsModified = true;
        testDesignIsInitialized = true;
    }

    /**
     * Determines if the testDesign has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTestDesignModified()
    {
        return testDesignIsModified;
    }

    /**
     * Determines if the testDesign has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTestDesignInitialized()
    {
        return testDesignIsInitialized;
    }

    /**
     * Getter method for testId.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: test_design.test_id</li>
     * <li> imported key: mirnator_statistic.statistic_test_design</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of testId
     */
    public Integer getTestId()
    {
        return testId;
    }

    /**
     * Setter method for testId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to testId
     */
    public void setTestId(Integer newVal)
    {
        if ((newVal != null && testId != null && (newVal.compareTo(testId) == 0)) ||
            (newVal == null && testId == null && testIdIsInitialized)) {
            return;
        }
        testId = newVal;
        testIdIsModified = true;
        testIdIsInitialized = true;
    }

    /**
     * Setter method for testId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to testId
     */
    public void setTestId(int newVal)
    {
        setTestId(new Integer(newVal));
    }

    /**
     * Determines if the testId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTestIdModified()
    {
        return testIdIsModified;
    }

    /**
     * Determines if the testId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTestIdInitialized()
    {
        return testIdIsInitialized;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return testDesignIsModified 		|| testIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        testDesignIsModified = false;
        testIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(TestDesignBean bean)
    {
        setTestDesign(bean.getTestDesign());
        setTestId(bean.getTestId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map<String,String> getDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("test_design", getTestDesign() == null ? "" : getTestDesign().toString());
        dictionnary.put("test_id", getTestId() == null ? "" : getTestId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map<String,String> getPkDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("test_id", getTestId() == null ? "" : getTestId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("test_design".equalsIgnoreCase(column) || "testDesign".equalsIgnoreCase(column)) {
            return getTestDesign() == null ? "" : getTestDesign().toString();
        } else if ("test_id".equalsIgnoreCase(column) || "testId".equalsIgnoreCase(column)) {
            return getTestId() == null ? "" : getTestId().toString();
        }
        return "";
    }

    /**
	 * @see java.lang.Object#equals(Object)
	 */
	public boolean equals(Object object)
	{
		if (!(object instanceof TestDesignBean)) {
			return false;
		}

		TestDesignBean obj = (TestDesignBean) object;
		return new EqualsBuilder()
            .append(getTestDesign(), obj.getTestDesign())
            .append(getTestId(), obj.getTestId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTestDesign())
            .append(getTestId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("test_design", getTestDesign())
            .append("test_id", getTestId())
            .toString();
	}


    public int compareTo(Object object)
    {
        TestDesignBean obj = (TestDesignBean) object;
        return new CompareToBuilder()
            .append(getTestDesign(), obj.getTestDesign())
            .append(getTestId(), obj.getTestId())
            .toComparison();
   }
}
