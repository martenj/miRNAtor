// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package mirnator.sql2java;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import mirnator.sql2java.GeneratedBean;
import mirnator.sql2java.KnowngeneBean;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * KgsequenceBean is a mapping of kgsequence Table.
 * @author sql2java
*/
public class KgsequenceBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = 3736261984140348523L;
	
    private String mrnaSequence;
    private boolean mrnaSequenceIsModified = false;
    private boolean mrnaSequenceIsInitialized = false;

    private Integer knowngeneRef;
    private boolean knowngeneRefIsModified = false;
    private boolean knowngeneRefIsInitialized = false;

    private Integer sequenceId;
    private boolean sequenceIdIsModified = false;
    private boolean sequenceIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a KgsequenceBean is via the createKgsequenceBean method in KgsequenceManager or
     * via the factory class KgsequenceFactory create method
     */
    protected KgsequenceBean()
    {
    }

    /**
     * Getter method for mrnaSequence.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: kgsequence.mrna_sequence</li>
     * <li>column size: 2147483647</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of mrnaSequence
     */
    public String getMrnaSequence()
    {
        return mrnaSequence;
    }

    /**
     * Setter method for mrnaSequence.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to mrnaSequence
     */
    public void setMrnaSequence(String newVal)
    {
        if ((newVal != null && mrnaSequence != null && (newVal.compareTo(mrnaSequence) == 0)) ||
            (newVal == null && mrnaSequence == null && mrnaSequenceIsInitialized)) {
            return;
        }
        mrnaSequence = newVal;
        mrnaSequenceIsModified = true;
        mrnaSequenceIsInitialized = true;
    }

    /**
     * Determines if the mrnaSequence has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMrnaSequenceModified()
    {
        return mrnaSequenceIsModified;
    }

    /**
     * Determines if the mrnaSequence has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMrnaSequenceInitialized()
    {
        return mrnaSequenceIsInitialized;
    }

    /**
     * Getter method for knowngeneRef.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: kgsequence.knowngene_ref</li>
     * <li> foreign key: knowngene.gene_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of knowngeneRef
     */
    public Integer getKnowngeneRef()
    {
        return knowngeneRef;
    }

    /**
     * Setter method for knowngeneRef.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to knowngeneRef
     */
    public void setKnowngeneRef(Integer newVal)
    {
        if ((newVal != null && knowngeneRef != null && (newVal.compareTo(knowngeneRef) == 0)) ||
            (newVal == null && knowngeneRef == null && knowngeneRefIsInitialized)) {
            return;
        }
        knowngeneRef = newVal;
        knowngeneRefIsModified = true;
        knowngeneRefIsInitialized = true;
    }

    /**
     * Setter method for knowngeneRef.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to knowngeneRef
     */
    public void setKnowngeneRef(int newVal)
    {
        setKnowngeneRef(new Integer(newVal));
    }

    /**
     * Determines if the knowngeneRef has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isKnowngeneRefModified()
    {
        return knowngeneRefIsModified;
    }

    /**
     * Determines if the knowngeneRef has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isKnowngeneRefInitialized()
    {
        return knowngeneRefIsInitialized;
    }

    /**
     * Getter method for sequenceId.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: kgsequence.sequence_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of sequenceId
     */
    public Integer getSequenceId()
    {
        return sequenceId;
    }

    /**
     * Setter method for sequenceId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to sequenceId
     */
    public void setSequenceId(Integer newVal)
    {
        if ((newVal != null && sequenceId != null && (newVal.compareTo(sequenceId) == 0)) ||
            (newVal == null && sequenceId == null && sequenceIdIsInitialized)) {
            return;
        }
        sequenceId = newVal;
        sequenceIdIsModified = true;
        sequenceIdIsInitialized = true;
    }

    /**
     * Setter method for sequenceId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to sequenceId
     */
    public void setSequenceId(int newVal)
    {
        setSequenceId(new Integer(newVal));
    }

    /**
     * Determines if the sequenceId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSequenceIdModified()
    {
        return sequenceIdIsModified;
    }

    /**
     * Determines if the sequenceId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSequenceIdInitialized()
    {
        return sequenceIdIsInitialized;
    }

    /** The Knowngene referenced by this bean. */
    private KnowngeneBean referencedKnowngene;
    /** Getter method for KnowngeneBean. */
    public KnowngeneBean getKnowngeneBean() {
        return this.referencedKnowngene;
    }
    /** Setter method for KnowngeneBean. */
    public void setKnowngeneBean(KnowngeneBean reference) {
        this.referencedKnowngene = reference;
    }
    
    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return mrnaSequenceIsModified 		|| knowngeneRefIsModified  		|| sequenceIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        mrnaSequenceIsModified = false;
        knowngeneRefIsModified = false;
        sequenceIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(KgsequenceBean bean)
    {
        setMrnaSequence(bean.getMrnaSequence());
        setKnowngeneRef(bean.getKnowngeneRef());
        setSequenceId(bean.getSequenceId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map<String,String> getDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("mrna_sequence", getMrnaSequence() == null ? "" : getMrnaSequence().toString());
        dictionnary.put("knowngene_ref", getKnowngeneRef() == null ? "" : getKnowngeneRef().toString());
        dictionnary.put("sequence_id", getSequenceId() == null ? "" : getSequenceId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map<String,String> getPkDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("sequence_id", getSequenceId() == null ? "" : getSequenceId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("mrna_sequence".equalsIgnoreCase(column) || "mrnaSequence".equalsIgnoreCase(column)) {
            return getMrnaSequence() == null ? "" : getMrnaSequence().toString();
        } else if ("knowngene_ref".equalsIgnoreCase(column) || "knowngeneRef".equalsIgnoreCase(column)) {
            return getKnowngeneRef() == null ? "" : getKnowngeneRef().toString();
        } else if ("sequence_id".equalsIgnoreCase(column) || "sequenceId".equalsIgnoreCase(column)) {
            return getSequenceId() == null ? "" : getSequenceId().toString();
        }
        return "";
    }

    /**
	 * @see java.lang.Object#equals(Object)
	 */
	public boolean equals(Object object)
	{
		if (!(object instanceof KgsequenceBean)) {
			return false;
		}

		KgsequenceBean obj = (KgsequenceBean) object;
		return new EqualsBuilder()
            .append(getMrnaSequence(), obj.getMrnaSequence())
            .append(getKnowngeneRef(), obj.getKnowngeneRef())
            .append(getSequenceId(), obj.getSequenceId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getMrnaSequence())
            .append(getKnowngeneRef())
            .append(getSequenceId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("mrna_sequence", getMrnaSequence())
            .append("knowngene_ref", getKnowngeneRef())
            .append("sequence_id", getSequenceId())
            .toString();
	}


    public int compareTo(Object object)
    {
        KgsequenceBean obj = (KgsequenceBean) object;
        return new CompareToBuilder()
            .append(getMrnaSequence(), obj.getMrnaSequence())
            .append(getKnowngeneRef(), obj.getKnowngeneRef())
            .append(getSequenceId(), obj.getSequenceId())
            .toComparison();
   }
}
