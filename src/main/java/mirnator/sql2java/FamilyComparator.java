// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package mirnator.sql2java;

import java.util.Comparator;

/**
 * Comparator class is used to sort the FamilyBean objects.
 * 
 * @author sql2java
 */
@SuppressWarnings("rawtypes")
public class FamilyComparator implements Comparator {
	/**
	 * Holds the field on which the comparison is performed.
	 */
	private int iType;
	/**
	 * Value that will contain the information about the order of the sort: normal or reversal.
	 */
	private boolean bReverse;

	/**
	 * Constructor class for FamilyComparator. <br>
	 * Example: <br>
	 * <code>Arrays.sort(pArray, new FamilyComparator(FamilyManager.ID_FAMILY_SEQUENCE, bReverse));<code>
	 *
	 * @param iType
	 *            the field from which you want to sort <br> Possible values are: <ul>
	 *            <li>FamilyManager.ID_FAMILY_SEQUENCE <li>FamilyManager.ID_FAMILY <li>FamilyManager.ID_FAMILY_ACCESSION
	 *            <li>FamilyManager.ID_FAMILY_ID </ul>
	 */
	public FamilyComparator(int iType) {
		this(iType, false);
	}

	/**
	 * Constructor class for FamilyComparator. <br>
	 * Example: <br>
	 * <code>Arrays.sort(pArray, new FamilyComparator(FamilyManager.ID_FAMILY_SEQUENCE, bReverse));<code>
	 *
	 * @param iType
	 *            the field from which you want to sort. <br> Possible values are: <ul>
	 *            <li>FamilyManager.ID_FAMILY_SEQUENCE <li>FamilyManager.ID_FAMILY <li>FamilyManager.ID_FAMILY_ACCESSION
	 *            <li>FamilyManager.ID_FAMILY_ID </ul>
	 *
	 * @param bReverse
	 *            set this value to true, if you want to reverse the sorting results
	 */
	public FamilyComparator(int iType, boolean bReverse) {
		this.iType = iType;
		this.bReverse = bReverse;
	}

	/**
	 * Implementation of the compare method.
	 */
	public int compare(Object pObj1, Object pObj2) {
		FamilyBean b1 = (FamilyBean) pObj1;
		FamilyBean b2 = (FamilyBean) pObj2;
		int iReturn = 0;
		switch (iType) {
		case FamilyManager.ID_FAMILY_SEQUENCE:
			if (b1.getFamilySequence() == null && b2.getFamilySequence() != null) {
				iReturn = -1;
			} else if (b1.getFamilySequence() == null && b2.getFamilySequence() == null) {
				iReturn = 0;
			} else if (b1.getFamilySequence() != null && b2.getFamilySequence() == null) {
				iReturn = 1;
			} else {
				iReturn = b1.getFamilySequence().compareTo(b2.getFamilySequence());
			}
			break;
		case FamilyManager.ID_FAMILY:
			if (b1.getFamily() == null && b2.getFamily() != null) {
				iReturn = -1;
			} else if (b1.getFamily() == null && b2.getFamily() == null) {
				iReturn = 0;
			} else if (b1.getFamily() != null && b2.getFamily() == null) {
				iReturn = 1;
			} else {
				iReturn = b1.getFamily().compareTo(b2.getFamily());
			}
			break;
		case FamilyManager.ID_FAMILY_ACCESSION:
			if (b1.getFamilyAccession() == null && b2.getFamilyAccession() != null) {
				iReturn = -1;
			} else if (b1.getFamilyAccession() == null && b2.getFamilyAccession() == null) {
				iReturn = 0;
			} else if (b1.getFamilyAccession() != null && b2.getFamilyAccession() == null) {
				iReturn = 1;
			} else {
				iReturn = b1.getFamilyAccession().compareTo(b2.getFamilyAccession());
			}
			break;
		case FamilyManager.ID_FAMILY_ID:
			if (b1.getFamilyId() == null && b2.getFamilyId() != null) {
				iReturn = -1;
			} else if (b1.getFamilyId() == null && b2.getFamilyId() == null) {
				iReturn = 0;
			} else if (b1.getFamilyId() != null && b2.getFamilyId() == null) {
				iReturn = 1;
			} else {
				iReturn = b1.getFamilyId().compareTo(b2.getFamilyId());
			}
			break;
		default:
			throw new IllegalArgumentException("Type passed for the field is not supported");
		}

		return bReverse ? (-1 * iReturn) : iReturn;
	}
}
