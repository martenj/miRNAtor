// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package mirnator.sql2java;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import mirnator.sql2java.GeneratedBean;
import mirnator.sql2java.KnowngeneBean;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * XrefBean is a mapping of xref Table.
 * @author sql2java
*/
public class XrefBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = 3727999563761960587L;
	
    private String description;
    private boolean descriptionIsModified = false;
    private boolean descriptionIsInitialized = false;

    private String protacc;
    private boolean protaccIsModified = false;
    private boolean protaccIsInitialized = false;

    private String refseq;
    private boolean refseqIsModified = false;
    private boolean refseqIsInitialized = false;

    private String genesymbol;
    private boolean genesymbolIsModified = false;
    private boolean genesymbolIsInitialized = false;

    private String spDisplayId;
    private boolean spDisplayIdIsModified = false;
    private boolean spDisplayIdIsInitialized = false;

    private String spId;
    private boolean spIdIsModified = false;
    private boolean spIdIsInitialized = false;

    private String mrna;
    private boolean mrnaIsModified = false;
    private boolean mrnaIsInitialized = false;

    private Integer knowngeneRef;
    private boolean knowngeneRefIsModified = false;
    private boolean knowngeneRefIsInitialized = false;

    private Integer xrefId;
    private boolean xrefIdIsModified = false;
    private boolean xrefIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a XrefBean is via the createXrefBean method in XrefManager or
     * via the factory class XrefFactory create method
     */
    protected XrefBean()
    {
    }

    /**
     * Getter method for description.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: xref.description</li>
     * <li>column size: 2147483647</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of description
     */
    public String getDescription()
    {
        return description;
    }

    /**
     * Setter method for description.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to description
     */
    public void setDescription(String newVal)
    {
        if ((newVal != null && description != null && (newVal.compareTo(description) == 0)) ||
            (newVal == null && description == null && descriptionIsInitialized)) {
            return;
        }
        description = newVal;
        descriptionIsModified = true;
        descriptionIsInitialized = true;
    }

    /**
     * Determines if the description has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDescriptionModified()
    {
        return descriptionIsModified;
    }

    /**
     * Determines if the description has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDescriptionInitialized()
    {
        return descriptionIsInitialized;
    }

    /**
     * Getter method for protacc.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: xref.protacc</li>
     * <li>column size: 2147483647</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of protacc
     */
    public String getProtacc()
    {
        return protacc;
    }

    /**
     * Setter method for protacc.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to protacc
     */
    public void setProtacc(String newVal)
    {
        if ((newVal != null && protacc != null && (newVal.compareTo(protacc) == 0)) ||
            (newVal == null && protacc == null && protaccIsInitialized)) {
            return;
        }
        protacc = newVal;
        protaccIsModified = true;
        protaccIsInitialized = true;
    }

    /**
     * Determines if the protacc has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isProtaccModified()
    {
        return protaccIsModified;
    }

    /**
     * Determines if the protacc has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isProtaccInitialized()
    {
        return protaccIsInitialized;
    }

    /**
     * Getter method for refseq.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: xref.refseq</li>
     * <li>column size: 2147483647</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of refseq
     */
    public String getRefseq()
    {
        return refseq;
    }

    /**
     * Setter method for refseq.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to refseq
     */
    public void setRefseq(String newVal)
    {
        if ((newVal != null && refseq != null && (newVal.compareTo(refseq) == 0)) ||
            (newVal == null && refseq == null && refseqIsInitialized)) {
            return;
        }
        refseq = newVal;
        refseqIsModified = true;
        refseqIsInitialized = true;
    }

    /**
     * Determines if the refseq has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRefseqModified()
    {
        return refseqIsModified;
    }

    /**
     * Determines if the refseq has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRefseqInitialized()
    {
        return refseqIsInitialized;
    }

    /**
     * Getter method for genesymbol.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: xref.genesymbol</li>
     * <li>column size: 2147483647</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of genesymbol
     */
    public String getGenesymbol()
    {
        return genesymbol;
    }

    /**
     * Setter method for genesymbol.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to genesymbol
     */
    public void setGenesymbol(String newVal)
    {
        if ((newVal != null && genesymbol != null && (newVal.compareTo(genesymbol) == 0)) ||
            (newVal == null && genesymbol == null && genesymbolIsInitialized)) {
            return;
        }
        genesymbol = newVal;
        genesymbolIsModified = true;
        genesymbolIsInitialized = true;
    }

    /**
     * Determines if the genesymbol has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isGenesymbolModified()
    {
        return genesymbolIsModified;
    }

    /**
     * Determines if the genesymbol has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isGenesymbolInitialized()
    {
        return genesymbolIsInitialized;
    }

    /**
     * Getter method for spDisplayId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: xref.sp_display_id</li>
     * <li>column size: 2147483647</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of spDisplayId
     */
    public String getSpDisplayId()
    {
        return spDisplayId;
    }

    /**
     * Setter method for spDisplayId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to spDisplayId
     */
    public void setSpDisplayId(String newVal)
    {
        if ((newVal != null && spDisplayId != null && (newVal.compareTo(spDisplayId) == 0)) ||
            (newVal == null && spDisplayId == null && spDisplayIdIsInitialized)) {
            return;
        }
        spDisplayId = newVal;
        spDisplayIdIsModified = true;
        spDisplayIdIsInitialized = true;
    }

    /**
     * Determines if the spDisplayId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSpDisplayIdModified()
    {
        return spDisplayIdIsModified;
    }

    /**
     * Determines if the spDisplayId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSpDisplayIdInitialized()
    {
        return spDisplayIdIsInitialized;
    }

    /**
     * Getter method for spId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: xref.sp_id</li>
     * <li>column size: 2147483647</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of spId
     */
    public String getSpId()
    {
        return spId;
    }

    /**
     * Setter method for spId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to spId
     */
    public void setSpId(String newVal)
    {
        if ((newVal != null && spId != null && (newVal.compareTo(spId) == 0)) ||
            (newVal == null && spId == null && spIdIsInitialized)) {
            return;
        }
        spId = newVal;
        spIdIsModified = true;
        spIdIsInitialized = true;
    }

    /**
     * Determines if the spId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSpIdModified()
    {
        return spIdIsModified;
    }

    /**
     * Determines if the spId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSpIdInitialized()
    {
        return spIdIsInitialized;
    }

    /**
     * Getter method for mrna.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: xref.mrna</li>
     * <li>column size: 2147483647</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of mrna
     */
    public String getMrna()
    {
        return mrna;
    }

    /**
     * Setter method for mrna.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to mrna
     */
    public void setMrna(String newVal)
    {
        if ((newVal != null && mrna != null && (newVal.compareTo(mrna) == 0)) ||
            (newVal == null && mrna == null && mrnaIsInitialized)) {
            return;
        }
        mrna = newVal;
        mrnaIsModified = true;
        mrnaIsInitialized = true;
    }

    /**
     * Determines if the mrna has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMrnaModified()
    {
        return mrnaIsModified;
    }

    /**
     * Determines if the mrna has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMrnaInitialized()
    {
        return mrnaIsInitialized;
    }

    /**
     * Getter method for knowngeneRef.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: xref.knowngene_ref</li>
     * <li> foreign key: knowngene.gene_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of knowngeneRef
     */
    public Integer getKnowngeneRef()
    {
        return knowngeneRef;
    }

    /**
     * Setter method for knowngeneRef.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to knowngeneRef
     */
    public void setKnowngeneRef(Integer newVal)
    {
        if ((newVal != null && knowngeneRef != null && (newVal.compareTo(knowngeneRef) == 0)) ||
            (newVal == null && knowngeneRef == null && knowngeneRefIsInitialized)) {
            return;
        }
        knowngeneRef = newVal;
        knowngeneRefIsModified = true;
        knowngeneRefIsInitialized = true;
    }

    /**
     * Setter method for knowngeneRef.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to knowngeneRef
     */
    public void setKnowngeneRef(int newVal)
    {
        setKnowngeneRef(new Integer(newVal));
    }

    /**
     * Determines if the knowngeneRef has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isKnowngeneRefModified()
    {
        return knowngeneRefIsModified;
    }

    /**
     * Determines if the knowngeneRef has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isKnowngeneRefInitialized()
    {
        return knowngeneRefIsInitialized;
    }

    /**
     * Getter method for xrefId.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: xref.xref_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of xrefId
     */
    public Integer getXrefId()
    {
        return xrefId;
    }

    /**
     * Setter method for xrefId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to xrefId
     */
    public void setXrefId(Integer newVal)
    {
        if ((newVal != null && xrefId != null && (newVal.compareTo(xrefId) == 0)) ||
            (newVal == null && xrefId == null && xrefIdIsInitialized)) {
            return;
        }
        xrefId = newVal;
        xrefIdIsModified = true;
        xrefIdIsInitialized = true;
    }

    /**
     * Setter method for xrefId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to xrefId
     */
    public void setXrefId(int newVal)
    {
        setXrefId(new Integer(newVal));
    }

    /**
     * Determines if the xrefId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isXrefIdModified()
    {
        return xrefIdIsModified;
    }

    /**
     * Determines if the xrefId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isXrefIdInitialized()
    {
        return xrefIdIsInitialized;
    }

    /** The Knowngene referenced by this bean. */
    private KnowngeneBean referencedKnowngene;
    /** Getter method for KnowngeneBean. */
    public KnowngeneBean getKnowngeneBean() {
        return this.referencedKnowngene;
    }
    /** Setter method for KnowngeneBean. */
    public void setKnowngeneBean(KnowngeneBean reference) {
        this.referencedKnowngene = reference;
    }
    
    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return descriptionIsModified 		|| protaccIsModified  		|| refseqIsModified  		|| genesymbolIsModified  		|| spDisplayIdIsModified  		|| spIdIsModified  		|| mrnaIsModified  		|| knowngeneRefIsModified  		|| xrefIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        descriptionIsModified = false;
        protaccIsModified = false;
        refseqIsModified = false;
        genesymbolIsModified = false;
        spDisplayIdIsModified = false;
        spIdIsModified = false;
        mrnaIsModified = false;
        knowngeneRefIsModified = false;
        xrefIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(XrefBean bean)
    {
        setDescription(bean.getDescription());
        setProtacc(bean.getProtacc());
        setRefseq(bean.getRefseq());
        setGenesymbol(bean.getGenesymbol());
        setSpDisplayId(bean.getSpDisplayId());
        setSpId(bean.getSpId());
        setMrna(bean.getMrna());
        setKnowngeneRef(bean.getKnowngeneRef());
        setXrefId(bean.getXrefId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map<String,String> getDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("description", getDescription() == null ? "" : getDescription().toString());
        dictionnary.put("protacc", getProtacc() == null ? "" : getProtacc().toString());
        dictionnary.put("refseq", getRefseq() == null ? "" : getRefseq().toString());
        dictionnary.put("genesymbol", getGenesymbol() == null ? "" : getGenesymbol().toString());
        dictionnary.put("sp_display_id", getSpDisplayId() == null ? "" : getSpDisplayId().toString());
        dictionnary.put("sp_id", getSpId() == null ? "" : getSpId().toString());
        dictionnary.put("mrna", getMrna() == null ? "" : getMrna().toString());
        dictionnary.put("knowngene_ref", getKnowngeneRef() == null ? "" : getKnowngeneRef().toString());
        dictionnary.put("xref_id", getXrefId() == null ? "" : getXrefId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map<String,String> getPkDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("xref_id", getXrefId() == null ? "" : getXrefId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("description".equalsIgnoreCase(column) || "description".equalsIgnoreCase(column)) {
            return getDescription() == null ? "" : getDescription().toString();
        } else if ("protacc".equalsIgnoreCase(column) || "protacc".equalsIgnoreCase(column)) {
            return getProtacc() == null ? "" : getProtacc().toString();
        } else if ("refseq".equalsIgnoreCase(column) || "refseq".equalsIgnoreCase(column)) {
            return getRefseq() == null ? "" : getRefseq().toString();
        } else if ("genesymbol".equalsIgnoreCase(column) || "genesymbol".equalsIgnoreCase(column)) {
            return getGenesymbol() == null ? "" : getGenesymbol().toString();
        } else if ("sp_display_id".equalsIgnoreCase(column) || "spDisplayId".equalsIgnoreCase(column)) {
            return getSpDisplayId() == null ? "" : getSpDisplayId().toString();
        } else if ("sp_id".equalsIgnoreCase(column) || "spId".equalsIgnoreCase(column)) {
            return getSpId() == null ? "" : getSpId().toString();
        } else if ("mrna".equalsIgnoreCase(column) || "mrna".equalsIgnoreCase(column)) {
            return getMrna() == null ? "" : getMrna().toString();
        } else if ("knowngene_ref".equalsIgnoreCase(column) || "knowngeneRef".equalsIgnoreCase(column)) {
            return getKnowngeneRef() == null ? "" : getKnowngeneRef().toString();
        } else if ("xref_id".equalsIgnoreCase(column) || "xrefId".equalsIgnoreCase(column)) {
            return getXrefId() == null ? "" : getXrefId().toString();
        }
        return "";
    }

    /**
	 * @see java.lang.Object#equals(Object)
	 */
	public boolean equals(Object object)
	{
		if (!(object instanceof XrefBean)) {
			return false;
		}

		XrefBean obj = (XrefBean) object;
		return new EqualsBuilder()
            .append(getDescription(), obj.getDescription())
            .append(getProtacc(), obj.getProtacc())
            .append(getRefseq(), obj.getRefseq())
            .append(getGenesymbol(), obj.getGenesymbol())
            .append(getSpDisplayId(), obj.getSpDisplayId())
            .append(getSpId(), obj.getSpId())
            .append(getMrna(), obj.getMrna())
            .append(getKnowngeneRef(), obj.getKnowngeneRef())
            .append(getXrefId(), obj.getXrefId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getDescription())
            .append(getProtacc())
            .append(getRefseq())
            .append(getGenesymbol())
            .append(getSpDisplayId())
            .append(getSpId())
            .append(getMrna())
            .append(getKnowngeneRef())
            .append(getXrefId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("description", getDescription())
            .append("protacc", getProtacc())
            .append("refseq", getRefseq())
            .append("genesymbol", getGenesymbol())
            .append("sp_display_id", getSpDisplayId())
            .append("sp_id", getSpId())
            .append("mrna", getMrna())
            .append("knowngene_ref", getKnowngeneRef())
            .append("xref_id", getXrefId())
            .toString();
	}


    public int compareTo(Object object)
    {
        XrefBean obj = (XrefBean) object;
        return new CompareToBuilder()
            .append(getDescription(), obj.getDescription())
            .append(getProtacc(), obj.getProtacc())
            .append(getRefseq(), obj.getRefseq())
            .append(getGenesymbol(), obj.getGenesymbol())
            .append(getSpDisplayId(), obj.getSpDisplayId())
            .append(getSpId(), obj.getSpId())
            .append(getMrna(), obj.getMrna())
            .append(getKnowngeneRef(), obj.getKnowngeneRef())
            .append(getXrefId(), obj.getXrefId())
            .toComparison();
   }
}
