// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package mirnator.sql2java;

import java.util.Comparator;


/**
 * Comparator class is used to sort the MirnaBean objects.
 * @author sql2java
 */
@SuppressWarnings("rawtypes")
public class MirnaComparator implements Comparator
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for MirnaComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new MirnaComparator(MirnaManager.ID_FAMILY_REF, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>MirnaManager.ID_FAMILY_REF
     *   <li>MirnaManager.ID_MIRNA_SPECIES
     *   <li>MirnaManager.ID_MIRBASE_ACCESSION
     *   <li>MirnaManager.ID_MIRNA_SEQUENCE
     *   <li>MirnaManager.ID_MIRNA_NAME
     *   <li>MirnaManager.ID_MIRNA_ID
     * </ul>
     */
    public MirnaComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for MirnaComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new MirnaComparator(MirnaManager.ID_FAMILY_REF, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>MirnaManager.ID_FAMILY_REF
     *   <li>MirnaManager.ID_MIRNA_SPECIES
     *   <li>MirnaManager.ID_MIRBASE_ACCESSION
     *   <li>MirnaManager.ID_MIRNA_SEQUENCE
     *   <li>MirnaManager.ID_MIRNA_NAME
     *   <li>MirnaManager.ID_MIRNA_ID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public MirnaComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        MirnaBean b1 = (MirnaBean)pObj1;
        MirnaBean b2 = (MirnaBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case MirnaManager.ID_FAMILY_REF:
                if (b1.getFamilyRef() == null && b2.getFamilyRef() != null) {
                    iReturn = -1;
                } else if (b1.getFamilyRef() == null && b2.getFamilyRef() == null) {
                    iReturn = 0;
                } else if (b1.getFamilyRef() != null && b2.getFamilyRef() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getFamilyRef().compareTo(b2.getFamilyRef());
                }
                break;
            case MirnaManager.ID_MIRNA_SPECIES:
                if (b1.getMirnaSpecies() == null && b2.getMirnaSpecies() != null) {
                    iReturn = -1;
                } else if (b1.getMirnaSpecies() == null && b2.getMirnaSpecies() == null) {
                    iReturn = 0;
                } else if (b1.getMirnaSpecies() != null && b2.getMirnaSpecies() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getMirnaSpecies().compareTo(b2.getMirnaSpecies());
                }
                break;
            case MirnaManager.ID_MIRBASE_ACCESSION:
                if (b1.getMirbaseAccession() == null && b2.getMirbaseAccession() != null) {
                    iReturn = -1;
                } else if (b1.getMirbaseAccession() == null && b2.getMirbaseAccession() == null) {
                    iReturn = 0;
                } else if (b1.getMirbaseAccession() != null && b2.getMirbaseAccession() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getMirbaseAccession().compareTo(b2.getMirbaseAccession());
                }
                break;
            case MirnaManager.ID_MIRNA_SEQUENCE:
                if (b1.getMirnaSequence() == null && b2.getMirnaSequence() != null) {
                    iReturn = -1;
                } else if (b1.getMirnaSequence() == null && b2.getMirnaSequence() == null) {
                    iReturn = 0;
                } else if (b1.getMirnaSequence() != null && b2.getMirnaSequence() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getMirnaSequence().compareTo(b2.getMirnaSequence());
                }
                break;
            case MirnaManager.ID_MIRNA_NAME:
                if (b1.getMirnaName() == null && b2.getMirnaName() != null) {
                    iReturn = -1;
                } else if (b1.getMirnaName() == null && b2.getMirnaName() == null) {
                    iReturn = 0;
                } else if (b1.getMirnaName() != null && b2.getMirnaName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getMirnaName().compareTo(b2.getMirnaName());
                }
                break;
            case MirnaManager.ID_MIRNA_ID:
                if (b1.getMirnaId() == null && b2.getMirnaId() != null) {
                    iReturn = -1;
                } else if (b1.getMirnaId() == null && b2.getMirnaId() == null) {
                    iReturn = 0;
                } else if (b1.getMirnaId() != null && b2.getMirnaId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getMirnaId().compareTo(b2.getMirnaId());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }}
