// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package mirnator.sql2java;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * ExpressionArrayBean is a mapping of expression_array Table.
 * 
 * @author sql2java
 */
public class ExpressionArrayBean implements Serializable, GeneratedBean {
	private static final long serialVersionUID = 2918343581235564416L;

	private String plattform;

	private boolean plattformIsModified = false;
	private boolean plattformIsInitialized = false;

	private String title;

	private boolean titleIsModified = false;
	private boolean titleIsInitialized = false;

	private String gsm;

	private boolean gsmIsModified = false;
	private boolean gsmIsInitialized = false;

	private String gse;

	private boolean gseIsModified = false;
	private boolean gseIsInitialized = false;

	private String tissue;
	private boolean tissueIsModified = false;
	private boolean tissueIsInitialized = false;

	private String arrayId;
	private boolean arrayIdIsModified = false;
	private boolean arrayIdIsInitialized = false;

	private boolean _isNew = true;

	/**
	 * Prefered methods to create a ExpressionArrayBean is via the createExpressionArrayBean method in
	 * ExpressionArrayManager or via the factory class ExpressionArrayFactory create method
	 */
	protected ExpressionArrayBean() {
	}

	/**
	 * Getter method for plattform. <br>
	 * Meta Data Information (in progress):
	 * <ul>
	 * <li>full name: expression_array.plattform</li>
	 * <li>column size: 2147483647</li>
	 * <li>jdbc type returned by the driver: Types.VARCHAR</li>
	 * </ul>
	 *
	 * @return the value of plattform
	 */
	public String getPlattform() {
		return plattform;
	}

	/**
	 * Setter method for plattform. <br>
	 * The new value is set only if compareTo() says it is different, or if one of either the new value or the current
	 * value is null. In case the new value is different, it is set and the field is marked as 'modified'.
	 *
	 * @param newVal
	 *            the new value to be assigned to plattform
	 */
	public void setPlattform(String newVal) {
		if ((newVal != null && plattform != null && (newVal.compareTo(plattform) == 0))
				|| (newVal == null && plattform == null && plattformIsInitialized)) {
			return;
		}
		plattform = newVal;
		plattformIsModified = true;
		plattformIsInitialized = true;
	}

	/**
	 * Determines if the plattform has been modified.
	 *
	 * @return true if the field has been modified, false if the field has not been modified
	 */
	public boolean isPlattformModified() {
		return plattformIsModified;
	}

	/**
	 * Determines if the plattform has been initialized. <br>
	 * It is useful to determine if a field is null on purpose or just because it has not been initialized.
	 *
	 * @return true if the field has been initialized, false otherwise
	 */
	public boolean isPlattformInitialized() {
		return plattformIsInitialized;
	}

	/**
	 * Getter method for title. <br>
	 * Meta Data Information (in progress):
	 * <ul>
	 * <li>full name: expression_array.title</li>
	 * <li>column size: 2147483647</li>
	 * <li>jdbc type returned by the driver: Types.VARCHAR</li>
	 * </ul>
	 *
	 * @return the value of title
	 */
	public String getTitle() {
		return title;
	}

	/**
	 * Setter method for title. <br>
	 * The new value is set only if compareTo() says it is different, or if one of either the new value or the current
	 * value is null. In case the new value is different, it is set and the field is marked as 'modified'.
	 *
	 * @param newVal
	 *            the new value to be assigned to title
	 */
	public void setTitle(String newVal) {
		if ((newVal != null && title != null && (newVal.compareTo(title) == 0))
				|| (newVal == null && title == null && titleIsInitialized)) {
			return;
		}
		title = newVal;
		titleIsModified = true;
		titleIsInitialized = true;
	}

	/**
	 * Determines if the title has been modified.
	 *
	 * @return true if the field has been modified, false if the field has not been modified
	 */
	public boolean isTitleModified() {
		return titleIsModified;
	}

	/**
	 * Determines if the title has been initialized. <br>
	 * It is useful to determine if a field is null on purpose or just because it has not been initialized.
	 *
	 * @return true if the field has been initialized, false otherwise
	 */
	public boolean isTitleInitialized() {
		return titleIsInitialized;
	}

	/**
	 * Getter method for gsm. <br>
	 * Meta Data Information (in progress):
	 * <ul>
	 * <li>full name: expression_array.gsm</li>
	 * <li>column size: 2147483647</li>
	 * <li>jdbc type returned by the driver: Types.VARCHAR</li>
	 * </ul>
	 *
	 * @return the value of gsm
	 */
	public String getGsm() {
		return gsm;
	}

	/**
	 * Setter method for gsm. <br>
	 * The new value is set only if compareTo() says it is different, or if one of either the new value or the current
	 * value is null. In case the new value is different, it is set and the field is marked as 'modified'.
	 *
	 * @param newVal
	 *            the new value to be assigned to gsm
	 */
	public void setGsm(String newVal) {
		if ((newVal != null && gsm != null && (newVal.compareTo(gsm) == 0))
				|| (newVal == null && gsm == null && gsmIsInitialized)) {
			return;
		}
		gsm = newVal;
		gsmIsModified = true;
		gsmIsInitialized = true;
	}

	/**
	 * Determines if the gsm has been modified.
	 *
	 * @return true if the field has been modified, false if the field has not been modified
	 */
	public boolean isGsmModified() {
		return gsmIsModified;
	}

	/**
	 * Determines if the gsm has been initialized. <br>
	 * It is useful to determine if a field is null on purpose or just because it has not been initialized.
	 *
	 * @return true if the field has been initialized, false otherwise
	 */
	public boolean isGsmInitialized() {
		return gsmIsInitialized;
	}

	/**
	 * Getter method for gse. <br>
	 * Meta Data Information (in progress):
	 * <ul>
	 * <li>full name: expression_array.gse</li>
	 * <li>column size: 2147483647</li>
	 * <li>jdbc type returned by the driver: Types.VARCHAR</li>
	 * </ul>
	 *
	 * @return the value of gse
	 */
	public String getGse() {
		return gse;
	}

	/**
	 * Setter method for gse. <br>
	 * The new value is set only if compareTo() says it is different, or if one of either the new value or the current
	 * value is null. In case the new value is different, it is set and the field is marked as 'modified'.
	 *
	 * @param newVal
	 *            the new value to be assigned to gse
	 */
	public void setGse(String newVal) {
		if ((newVal != null && gse != null && (newVal.compareTo(gse) == 0))
				|| (newVal == null && gse == null && gseIsInitialized)) {
			return;
		}
		gse = newVal;
		gseIsModified = true;
		gseIsInitialized = true;
	}

	/**
	 * Determines if the gse has been modified.
	 *
	 * @return true if the field has been modified, false if the field has not been modified
	 */
	public boolean isGseModified() {
		return gseIsModified;
	}

	/**
	 * Determines if the gse has been initialized. <br>
	 * It is useful to determine if a field is null on purpose or just because it has not been initialized.
	 *
	 * @return true if the field has been initialized, false otherwise
	 */
	public boolean isGseInitialized() {
		return gseIsInitialized;
	}

	/**
	 * Getter method for tissue. <br>
	 * Meta Data Information (in progress):
	 * <ul>
	 * <li>full name: expression_array.tissue</li>
	 * <li>column size: 2147483647</li>
	 * <li>jdbc type returned by the driver: Types.VARCHAR</li>
	 * </ul>
	 *
	 * @return the value of tissue
	 */
	public String getTissue() {
		return tissue;
	}

	/**
	 * Setter method for tissue. <br>
	 * The new value is set only if compareTo() says it is different, or if one of either the new value or the current
	 * value is null. In case the new value is different, it is set and the field is marked as 'modified'.
	 *
	 * @param newVal
	 *            the new value to be assigned to tissue
	 */
	public void setTissue(String newVal) {
		if ((newVal != null && tissue != null && (newVal.compareTo(tissue) == 0))
				|| (newVal == null && tissue == null && tissueIsInitialized)) {
			return;
		}
		tissue = newVal;
		tissueIsModified = true;
		tissueIsInitialized = true;
	}

	/**
	 * Determines if the tissue has been modified.
	 *
	 * @return true if the field has been modified, false if the field has not been modified
	 */
	public boolean isTissueModified() {
		return tissueIsModified;
	}

	/**
	 * Determines if the tissue has been initialized. <br>
	 * It is useful to determine if a field is null on purpose or just because it has not been initialized.
	 *
	 * @return true if the field has been initialized, false otherwise
	 */
	public boolean isTissueInitialized() {
		return tissueIsInitialized;
	}

	/**
	 * Getter method for arrayId. <br>
	 * PRIMARY KEY.<br>
	 * Meta Data Information (in progress):
	 * <ul>
	 * <li>full name: expression_array.array_id</li>
	 * <li>imported key: mirnator_statistic.statistic_array_id</li>
	 * <li>column size: 2147483647</li>
	 * <li>jdbc type returned by the driver: Types.VARCHAR</li>
	 * </ul>
	 *
	 * @return the value of arrayId
	 */
	public String getArrayId() {
		return arrayId;
	}

	/**
	 * Setter method for arrayId. <br>
	 * The new value is set only if compareTo() says it is different, or if one of either the new value or the current
	 * value is null. In case the new value is different, it is set and the field is marked as 'modified'.
	 *
	 * @param newVal
	 *            the new value to be assigned to arrayId
	 */
	public void setArrayId(String newVal) {
		if ((newVal != null && arrayId != null && (newVal.compareTo(arrayId) == 0))
				|| (newVal == null && arrayId == null && arrayIdIsInitialized)) {
			return;
		}
		arrayId = newVal;
		arrayIdIsModified = true;
		arrayIdIsInitialized = true;
	}

	/**
	 * Determines if the arrayId has been modified.
	 *
	 * @return true if the field has been modified, false if the field has not been modified
	 */
	public boolean isArrayIdModified() {
		return arrayIdIsModified;
	}

	/**
	 * Determines if the arrayId has been initialized. <br>
	 * It is useful to determine if a field is null on purpose or just because it has not been initialized.
	 *
	 * @return true if the field has been initialized, false otherwise
	 */
	public boolean isArrayIdInitialized() {
		return arrayIdIsInitialized;
	}

	/**
	 * Determines if the current object is new.
	 *
	 * @return true if the current object is new, false if the object is not new
	 */
	public boolean isNew() {
		return _isNew;
	}

	/**
	 * Specifies to the object if it has been set as new.
	 *
	 * @param isNew
	 *            the boolean value to be assigned to the isNew field
	 */
	public void isNew(boolean isNew) {
		this._isNew = isNew;
	}

	/**
	 * Determines if the object has been modified since the last time this method was called. <br>
	 * We can also determine if this object has ever been modified since its creation.
	 *
	 * @return true if the object has been modified, false if the object has not been modified
	 */
	public boolean isModified() {
		return tissueIsModified || arrayIdIsModified;
	}

	/**
	 * Resets the object modification status to 'not modified'.
	 */
	public void resetIsModified() {
		plattformIsModified = false;
		titleIsModified = false;
		gsmIsModified = false;
		gseIsModified = false;
		tissueIsModified = false;
		arrayIdIsModified = false;
	}

	/**
	 * Copies the passed bean into the current bean.
	 *
	 * @param bean
	 *            the bean to copy into the current bean
	 */
	public void copy(ExpressionArrayBean bean) {
		setPlattform(bean.getPlattform());
		setTitle(bean.getTitle());
		setGsm(bean.getGsm());
		setGse(bean.getGse());
		setTissue(bean.getTissue());
		setArrayId(bean.getArrayId());
	}

	/**
	 * return a dictionnary of the object
	 */
	public Map<String, String> getDictionnary() {
		Map<String, String> dictionnary = new HashMap<String, String>();
		dictionnary.put("plattform", getPlattform() == null ? "" : getPlattform().toString());
		dictionnary.put("title", getTitle() == null ? "" : getTitle().toString());
		dictionnary.put("gsm", getGsm() == null ? "" : getGsm().toString());
		dictionnary.put("gse", getGse() == null ? "" : getGse().toString());
		dictionnary.put("tissue", getTissue() == null ? "" : getTissue().toString());
		dictionnary.put("array_id", getArrayId() == null ? "" : getArrayId().toString());
		return dictionnary;
	}

	/**
	 * return a dictionnary of the pk columns
	 */
	public Map<String, String> getPkDictionnary() {
		Map<String, String> dictionnary = new HashMap<String, String>();
		dictionnary.put("array_id", getArrayId() == null ? "" : getArrayId().toString());
		return dictionnary;
	}

	/**
	 * return a the value string representation of the given field
	 */
	public String getValue(String column) {
		if (null == column || "".equals(column)) {
			return "";
		} else if ("plattform".equalsIgnoreCase(column) || "plattform".equalsIgnoreCase(column)) {
			return getPlattform() == null ? "" : getPlattform().toString();
		} else if ("title".equalsIgnoreCase(column) || "title".equalsIgnoreCase(column)) {
			return getTitle() == null ? "" : getTitle().toString();
		} else if ("gsm".equalsIgnoreCase(column) || "gsm".equalsIgnoreCase(column)) {
			return getGsm() == null ? "" : getGsm().toString();
		} else if ("gse".equalsIgnoreCase(column) || "gse".equalsIgnoreCase(column)) {
			return getGse() == null ? "" : getGse().toString();
		} else if ("tissue".equalsIgnoreCase(column) || "tissue".equalsIgnoreCase(column)) {
			return getTissue() == null ? "" : getTissue().toString();
		} else if ("array_id".equalsIgnoreCase(column) || "arrayId".equalsIgnoreCase(column)) {
			return getArrayId() == null ? "" : getArrayId().toString();
		}
		return "";
	}

	/**
	 * @see java.lang.Object#equals(Object)
	 */
	public boolean equals(Object object) {
		if (!(object instanceof ExpressionArrayBean)) {
			return false;
		}

		ExpressionArrayBean obj = (ExpressionArrayBean) object;
		return new EqualsBuilder().append(getPlattform(), obj.getPlattform()).append(getTitle(), obj.getTitle())
				.append(getGsm(), obj.getGsm()).append(getGse(), obj.getGse()).append(getTissue(), obj.getTissue())
				.append(getArrayId(), obj.getArrayId()).isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode() {
		return new HashCodeBuilder(-82280557, -700257973).append(getPlattform()).append(getTitle()).append(getGsm())
				.append(getGse()).append(getTissue()).append(getArrayId()).toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString() {
		return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles: <li>ToStringStyle.DEFAULT_STYLE</li> <li>ToStringStyle.MULTI_LINE_STYLE</li>
	 * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li> <li>ToStringStyle.SHORT_PREFIX_STYLE</li> <li>
	 * ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style).append("plattform", getPlattform()).append("title", getTitle())
				.append("gsm", getGsm()).append("gse", getGse()).append("tissue", getTissue())
				.append("array_id", getArrayId()).toString();
	}

	public int compareTo(Object object) {
		ExpressionArrayBean obj = (ExpressionArrayBean) object;
		return new CompareToBuilder().append(getPlattform(), obj.getPlattform()).append(getTitle(), obj.getTitle())
				.append(getGsm(), obj.getGsm()).append(getGse(), obj.getGse()).append(getTissue(), obj.getTissue())
				.append(getArrayId(), obj.getArrayId()).toComparison();
	}
}
